#include <core.h>
using Core;

#include <aio.h>

#include <arpa/inet.h>


  namespace Cbyteswap {
    extern "C" uint32_t __stub_htonl(uint32_t x);
    extern "C" uint16_t __stub_htons(uint16_t x);
    extern "C" uint32_t __stub_ntohl(uint32_t x);
    extern "C" uint16_t __stub_ntohs(uint16_t x);
  }
  uint32_t htonl(uint32_t x) {
    return Cbyteswap::__stub_htonl(x);
  }
  uint16_t htons(uint16_t x) {
    return Cbyteswap::__stub_htons(x);
  }
  uint32_t ntohl(uint32_t x) {
    return Cbyteswap::__stub_ntohl(x);
  }
  uint16_t ntohs(uint16_t x) {
    return Cbyteswap::__stub_ntohs(x);
  }

#include <cpio.h>

#include <crypt.h>

#include <ctype.h>

#include <dlfcn.h>

#include <dirent.h>


  namespace Cdirent {
    extern "C" struct __abstractDIR;
    typedef struct __abstractDIR __cDIR;
  }
  abstract struct __cycDIR { // must match defn in c stub
    Cdirent::__cDIR @dir;
  };

  namespace Cdirent {
    extern "C" int closedir(__cDIR @d);
  }
  int closedir(DIR @d) {
    return Cdirent::closedir(d->dir);
  }

  namespace Cdirent {
    extern "C" __cDIR *opendir(const char @);
  }
  static datatype exn.Failure __opendir_failure =
    Failure("opendir called with NULL string");
  DIR *opendir(const char @ f) {
    let cd = Cdirent::opendir(f);
    // FIX: get rid of heap allocation
    return cd ? new __cycDIR((Cdirent::__cDIR @)cd) : NULL;
  }

  namespace Cdirent {
    extern "C" struct dirent @readdir(__cDIR @);
  }
  struct dirent @readdir(DIR @d) {
    return Cdirent::readdir(d->dir);
  }

  namespace Cdirent {
    extern "C" void rewinddir(__cDIR @d);
  }
  void rewinddir(DIR @d) {
    return Cdirent::rewinddir(d->dir);
  }

  namespace Cdirent {
    extern "C" void seekdir(__cDIR @d, long);
  }
  void seekdir(DIR @d, long x) {
    return Cdirent::seekdir(d->dir,x);
  }

  namespace Cdirent {
    extern "C" long telldir(__cDIR @d);
  }
  long telldir(DIR @d) {
    return Cdirent::telldir(d->dir);
  }

#include <errno.h>

#include <fcntl.h>


  namespace Cfcntl {
    extern "C" int fcntl(int fd, int cmd);
    extern "C" int fcntl_with_arg(int fd, int cmd, long arg);
    extern "C" int fcntl_with_lock(int fd, int cmd, struct flock *lock);
    extern "C" int open_without_mode(const char *,int);
    extern "C" int open_with_mode(const char *,int,mode_t);
  }
  static datatype exn.Failure __fcntl_failure =
    Failure("fcntl: too many args");
  int fcntl(int fd, int cmd, ... inject fcntlarg_t argv) {
    if (numelts(argv) == 0) return Cfcntl::fcntl(fd, cmd);
    else if (numelts(argv) != 1) throw &__fcntl_failure;
    else switch (argv[0]) {
    case &Long(arg): return Cfcntl::fcntl_with_arg(fd, cmd, arg);
    case &Flock(lock): return Cfcntl::fcntl_with_lock(fd, cmd, lock);
    }
  }

  int open(const char * s, int i, ... mode_t ms) {
    /* Note: if open is called with more than 3 arguments, the
       additional args are simply ignored. */
    if (numelts(ms) >= 1)
      return Cfcntl::open_with_mode(s,i,ms[0]);
    else
      return Cfcntl::open_without_mode(s,i);
  }

#include <fenv.h>

#include <float.h>

#include <fmtmsg.h>

#include <fnmatch.h>

#include <ftw.h>

#include <glob.h>

#include <grp.h>

#include <inttypes.h>

#include <iso646.h>

#include <langinfo.h>

#include <libgen.h>

#include <limits.h>

#include <locale.h>

#include <math.h>

#include <monetary.h>

#include <mqueue.h>

#include <net/if.h>

#include <netdb.h>

#include <netinet/in.h>

#include <netinet/tcp.h>

#include <nl_types.h>

#include <poll.h>


  namespace Cpoll {
    extern "C" int poll(struct pollfd @{0}, nfds_t b, int c);
  }
  static datatype exn.Failure __poll_failure_1 =
    Failure("poll called with NULL");
  static datatype exn.Failure __poll_failure_2 =
    Failure("poll called with out-of-bounds pointer");
  int poll(struct pollfd?a, nfds_t b, int c) {
    if (!a) throw &__poll_failure_1;
    int len = numelts(a);
    if (len < 1) throw &__poll_failure_2;
    return Cpoll::poll((struct pollfd @{0})a,
                       (b<(nfds_t)len)?b:(nfds_t)len,
                       c);
  }

#include <pthread.h>

#include <pwd.h>

#include <sched.h>

#include <search.h>

#include <semaphore.h>

#include <setjmp.h>

#include <signal.h>


  namespace Csignal {
    extern "C" sigarg_t signal_SIG_DFL(int);
    extern "C" sigarg_t signal_SIG_ERR(int);
#ifdef _SIG_HOLD_def_
    extern "C" sigarg_t signal_SIG_HOLD(int);
#endif
    extern "C" sigarg_t signal_SIG_IGN(int);
    extern "C" sigarg_t signal_SIG_HANDLER(int, sigarg_t);
  }
  sigarg_t signal(int a, sigarg_t b) {
    if (b == SIG_DFL) return Csignal::signal_SIG_DFL(a);
    if (b == SIG_ERR) return Csignal::signal_SIG_ERR(a);
#ifdef _SIG_HOLD_def_
    if (b == SIG_HOLD) return Csignal::signal_SIG_HOLD(a);
#endif
    if (b == SIG_IGN) return Csignal::signal_SIG_IGN(a);
    return Csignal::signal_SIG_HANDLER(a,b);
  }

  namespace Csignal {
    extern "C" int sigaction(int, const struct sigaction *,
		             struct sigaction *);
    extern "C" int sigaction_wrap(struct sigaction *);
    extern "C" int sigaction_unwrap(struct sigaction *);
  }
  int sigaction(int sig, struct sigaction *act,
		struct sigaction *oact) {
    if (act != NULL) Csignal::sigaction_unwrap(act);
    int ret = Csignal::sigaction(sig,act,oact);
    // we really don't have to do this, since the compiler won't
    // let the user read out of these fields anyway ...
    if (act != NULL) Csignal::sigaction_wrap(act);
    if (oact != NULL) Csignal::sigaction_wrap(oact);
    return ret;
  }

#include <spawn.h>

#include <stdarg.h>

#include <stdbool.h>

#include <stddef.h>

#include <stdint.h>

#include <stdio.h>


  namespace Cstdio {
    extern "C" struct __abstractFILE;
    typedef struct __abstractFILE __cFILE;
  }
  abstract struct __cycFILE { // must match defn in c stub
    Cstdio::__cFILE *file;
  };

  FILE*`H fromCfile(Cstdio::__cFILE *`H cf) {
    return cf ? new __cycFILE(cf) : NULL;
  }

  namespace Cstdio {
    extern "C" void clearerr(__cFILE @);
  }
  void clearerr(FILE @f) {
    return Cstdio::clearerr(f->file);
  }

  namespace Cstdio {
    extern "C" int fclose(__cFILE @);
  }
  static datatype exn.Failure __fclose_failure =
    Failure("fclose: FILE already closed");
  int fclose(FILE @f) {
    if (f->file == NULL) throw &__fclose_failure;
    int retc = Cstdio::fclose(f->file);
    f->file = NULL;
    return retc;
  }

  namespace Cstdio {
    extern "C" Cstdio::__cFILE *fdopen(int,const char *);
  }
  FILE *fdopen(int i, const char * s) {
    let cf = Cstdio::fdopen(i,s);
    // FIX: get rid of the heap allocation
    return cf ? new __cycFILE((Cstdio::__cFILE @)cf) : NULL;
  }

  namespace Cstdio {
    extern "C" int feof(__cFILE @);
  }
  int feof(FILE @f) {
    return Cstdio::feof(f->file);
  }

  namespace Cstdio {
    extern "C" int ferror(__cFILE @);
  }
  int ferror(FILE @f) {
    return Cstdio::ferror(f->file);
  }

  namespace Cstdio {
    extern "C" int fflush(__cFILE *);
  }
  int fflush(FILE *f) {
    if (f)
      return Cstdio::fflush(f->file);
    else return Cstdio::fflush(NULL);
  }

  namespace Cstdio {
    extern "C" int fgetc(__cFILE @);
  }
  int fgetc(FILE @f) {
    return Cstdio::fgetc(f->file);
  }

  namespace Cstdio {
    extern "C" int fgetpos(__cFILE @, fpos_t @);
  }
  int fgetpos(FILE @f, fpos_t @x) {
    return Cstdio::fgetpos(f->file,x);
  }

  namespace Cstdio {
    extern "C" char * @nozeroterm`r fgets(char * @nozeroterm`r, int, __cFILE @);
  }
  static datatype exn.Failure __fgets_failure_1 =
    Failure("fgets called with NULL string");
  static datatype exn.Failure __fgets_failure_2 =
    Failure("fgets: buffer insufficient");
  char ? @nozeroterm`r fgets(char ? @nozeroterm`r s, int n, FILE @f) {
    if (!s) throw &__fgets_failure_1;
    char * @nozeroterm`r result;
    char * @nozeroterm buffer = (char * @nozeroterm)s;
    unsigned int len = numelts(s);
    if (len < n) throw &__fgets_failure_2; 
    // n = (len < n) ? len : n;
    result = Cstdio::fgets(buffer, n, f->file);
    if (result == NULL) 
      return NULL;
    else 
      return s;
  }

  namespace Cstdio {
    extern "C" int fileno(__cFILE @);
  }
  int fileno(FILE @f) {
    return Cstdio::fileno(f->file);
  }

  #ifndef __CYGWIN__
  namespace Cstdio {
    extern "C" void flockfile(__cFILE @);
  }
  void flockfile(FILE @f) {
    return Cstdio::flockfile(f->file);
  }
  #endif

  namespace Cstdio {
    extern "C" __cFILE *fopen(const char @, const char @);
  }
  FILE *fopen(const char @ name, const char @ type) {
    let cf = Cstdio::fopen(name, type);
    // FIX: get rid of the heap allocation
    return cf ? new __cycFILE((Cstdio::__cFILE @)cf) : NULL;
  }

  namespace Cstdio {
    extern "C" int fputc(int, __cFILE @);
  }
  int fputc(int x, FILE @f) {
    return Cstdio::fputc(x,f->file);
  }

  namespace Cstdio {
    extern "C" int fputs(const char @, __cFILE @);
  }
  int fputs(const char @ x, FILE @f) {
    return Cstdio::fputs(x,f->file);
  }

  namespace Cstdio {
    extern "C" size_t fread(char * @nozeroterm, size_t, size_t, __cFILE @);
  }
  static datatype exn.Failure __fread_failure =
    Failure("fread: buffer insufficient");
  size_t fread(char ? @nozeroterm ptr, size_t size, size_t nmemb, FILE @f) {
    if (size * nmemb > numelts(ptr)) throw &__fread_failure;
    return Cstdio::fread((char * @nozeroterm)ptr, size, nmemb, f->file);
  }

  namespace Cstdio {
    extern "C" __cFILE *`r freopen(const char *, const char @, 
				   __cFILE @`r);
  }
  FILE *`r freopen(const char * filename, const char @ modes, FILE @`r f) {
    // Note, filename is allowed to be NULL
    let cf = Cstdio::freopen(filename,modes,f->file);
    // FIX: get rid of the heap allocation
    return cf ? new __cycFILE((Cstdio::__cFILE @)cf) : NULL;
  }

  namespace Cstdio {
    extern "C" int fseek(__cFILE @, long, int);
  }
  int fseek(FILE @a, long b, int c) {
    return Cstdio::fseek(a->file,b,c);
  }

  namespace Cstdio {
    extern "C" int fsetpos(__cFILE @, const fpos_t @);
  }
  int fsetpos(FILE @f, const fpos_t @b) {
    return Cstdio::fsetpos(f->file,b);
  }

  namespace Cstdio {
    extern "C" long ftell(__cFILE @);
  }
  long ftell(FILE @f) {
    return Cstdio::ftell(f->file);
  }

  #ifndef __CYGWIN__
  namespace Cstdio {
    extern "C" int ftrylockfile(__cFILE @);
  }
  int ftrylockfile(FILE @f) {
    return Cstdio::ftrylockfile(f->file);
  }
  #endif

  #ifndef __CYGWIN__
  namespace Cstdio {
    extern "C" void funlockfile(__cFILE @);
  }
  void funlockfile(FILE @f) {
    return Cstdio::funlockfile(f->file);
  }
  #endif

  namespace Cstdio {
    extern "C" size_t fwrite(const char @ @nozeroterm, size_t, size_t, __cFILE @);
  }
  static datatype exn.Failure __fwrite_failure_1 =
    Failure("fwrite called with NULL string");
  static datatype exn.Failure __fwrite_failure_2 =
    Failure("fwrite: buffer insufficient");
  size_t fwrite(const char ? @nozeroterm`r ptr, size_t size, size_t nmemb, FILE @f) {
    if (!ptr) { throw &__fwrite_failure_1; } 
    else {
      if (size * nmemb > numelts(ptr)) throw &__fwrite_failure_2;
      return Cstdio::fwrite((const char @ @nozeroterm)ptr, size, nmemb, f->file);
    }
  }

  namespace Cstdio {
    extern "C" int getc(__cFILE @);
  }
  int getc(FILE @f) {
    return Cstdio::getc(f->file);
  }

  namespace Cstdio {
    extern "C" int getchar(void);
  }
  int getchar(void) {
    return Cstdio::getchar();
  }

  #ifndef __CYGWIN__
  namespace Cstdio {
    extern "C" int getc_unlocked(__cFILE @);
  }
  int getc_unlocked(FILE @f) {
    return Cstdio::getc_unlocked(f->file);
  }
  #endif

  #ifndef __CYGWIN__
  namespace Cstdio {
    extern "C" int __CYCLONE_GETCHAR_UNLOCKED(void);
  }
  int getchar_unlocked(void) {
    return Cstdio::__CYCLONE_GETCHAR_UNLOCKED();
  }
  #endif

  namespace Cstdio {
    extern "C" int pclose(__cFILE @);
  }
  int pclose(FILE @f) {
    return Cstdio::pclose(f->file);
  }

  namespace Cstdio {
    extern "C" __cFILE *popen(const char @, const char @);
  }
  FILE *popen(const char @ name, const char @ type) {
    let cf = Cstdio::popen(name, type);
    // FIX: get rid of the heap allocation
    return cf ? new __cycFILE((Cstdio::__cFILE @)cf) : NULL;
  }

  namespace Cstdio {
    extern "C" int putc(int, __cFILE @);
  }
  int putc(int x, FILE @f) {
    return Cstdio::putc(x,f->file);
  }

  #ifndef __CYGWIN__
  namespace Cstdio {
    extern "C" int putc_unlocked(int, __cFILE @);
  }
  int putc_unlocked(int x, FILE @f) {
    return Cstdio::putc_unlocked(x,f->file);
  }
  #endif

  namespace Cstdio {
    extern "C" void rewind(__cFILE @);
  }
  void rewind(FILE @f) {
    return Cstdio::rewind(f->file);
  }

  namespace Cstdio {
    extern "C" int setvbuf(__cFILE @, char * @nozeroterm`H, int, size_t);
  }
  static datatype exn.Failure __setvbuf_failure_1 =
    Failure("setvbuf: buffer is NULL");
  static datatype exn.Failure __setvbuf_failure_2 =
    Failure("setvbuf: buffer insufficient");
  int setvbuf(FILE @f, char ? @nozeroterm`H buf, int type, size_t size) {
    if (!buf) throw &__setvbuf_failure_1;
    if (numelts(buf) < size) throw &__setvbuf_failure_2;
    return Cstdio::setvbuf(f->file,(char * @nozeroterm`H)buf,type,size);
  }

  void setbuf(FILE @f, char ? @nozeroterm`H buf) {
    setvbuf(f, buf, buf ? _IOFBF : _IONBF, BUFSIZ);
    return;
  }

// currently in tmp.cyc
//  namespace Cstdio {
//    extern "C" __cFILE *tmpfile(void);
//  }
//  extern FILE *tmpfile(void) {
//    let cf = Cstdio::tmpfile();
//    // FIX: get rid of the heap allocation
//    return cf ? new __cycFILE((Cstdio::__cFILE @)cf) : NULL;
//  }

// currently defined in tmp.cyc
//  extern char ?`r strcpy(char ?`r,const char ?); 
//  // Instead of putting this in the stub file, we should just
//  // have a separate file for it.  That way the linker can leave
//  // it out if it isn't used, preventing a warning about the
//  // security problem.
//  namespace Cstdio {
//    extern "C" char * tmpnam(char *);
//  }
//  char ?`H tmpnam(char ?`H s) {
//    char ?name = static_c2s(Cstdio::tmpnam(NULL));
//    return s ? strcpy(s, name) : name;
//  }

  namespace Cstdio {
    extern "C" int ungetc(int, __cFILE @);
  }
  int ungetc(int x, FILE @f) {
    return Cstdio::ungetc(x,f->file);
  }

  namespace Cstdio {
    extern "C" int getw(__cFILE @);
  }
  int getw(FILE @f) {
    return Cstdio::getw(f->file);
  }

  namespace Cstdio {
    extern "C" int putw(int, __cFILE @);
  }
  int putw(int x, FILE @f) {
    return Cstdio::putw(x,f->file);
  }

  datatype exn { 
    FileOpenError(const char ?); 
    FileCloseError;
  };

  FILE @file_open(const char ?fname, const char ?mode) {
    FILE *f = fopen((const char @)fname, (const char @)mode);
    if (f == NULL) {
      const char ? fn = new {for i < numelts(fname) : fname[i]};
      throw new FileOpenError(fn);
    }
    return (FILE @)f; // FIX: get rid of cast?
  }

  datatype exn.FileCloseError FileCloseError_val = FileCloseError;
  void file_close(FILE @ f) {
    if (fclose(f) != 0) throw &FileCloseError_val;
  }

#include <stdlib.h>


  void free(`a::A ?ptr) {}

  namespace Cstdlib {
    extern "C" void qsort(`a::A @, size_t, size_t,
                          int (@)(const `a @, const `a @));
  }
  static datatype exn.Failure __qsort_failure_1 =
    Failure("qsort called with NULL");
  static datatype exn.Failure __qsort_failure_2 =
    Failure("qsort called with insufficient array size");
  void qsort(`a::A ? tab, size_t nmemb, tag_t<valueof_t(sizeof(`a))> szmemb, 
             int (@compar)(const `a @, const `a @)) {
    if (!tab) throw &__qsort_failure_1;
    if (numelts(tab) < nmemb) throw &__qsort_failure_2;
    Cstdlib::qsort((_@)tab,nmemb,(size_t)szmemb,compar);
  }

#include <stropts.h>

#include <sys/dir.h>

#include <sys/file.h>

#include <sys/ioctl.h>

#include <sys/ipc.h>

#include <sys/mman.h>


  namespace Cmman {
    // refers to our Cyclone stub that deals with MMAP_FAILED
    extern "C" char *{valueof(`i)} @nozeroterm
      __stub_mmap(char * @nozeroterm start, tag_t<`i> length, int prot,
                  int flags, int fd, off_t offset);
    extern "C" int munmap(const char * @nozeroterm start, size_t length);
  }
  static datatype exn.Failure __mmap_failure =
    Failure("mmap called with illegal start/prot/flags");
  char ? @nozeroterm mmap(char ? @nozeroterm ignored,
			  size_t length, int prot, 
		          int flags, int fd, off_t offset) {
    if (prot == PROT_EXEC ||
        ((flags & MAP_PRIVATE) && (flags & MAP_SHARED))
#if defined(__linux__)	
    || (flags & MAP_GROWSDOWN)
#endif
	)
      throw &__mmap_failure;
    else if (flags & MAP_FIXED) // don't support mapping to fixed addresses
      return NULL;
    else {
      let l<`i> = length;
      let buf = Cmman::__stub_mmap(NULL, l, prot, flags, fd, offset);
      return Core::mkfat(buf,sizeof(char),l);
    }
  }
  // Is it unsafe to ask the user for the size?  I'd like to take it
  // from the char? type, but that could have been cast around...
  // We might also consider nulling out the pointer.
  int munmap(const char ? @nozeroterm start, size_t length) {
    // We definitely do NOT want to copy the "string"
    return Cmman::munmap((const char * @nozeroterm)start, length);
  }

#include <sys/msg.h>

#include <sys/resource.h>

#include <sys/sem.h>

#include <sys/select.h>


  namespace Csysselect {
    extern "C" int select(int, fd_set *, fd_set *, fd_set *, struct timeval *);
  }
  #include <errno.h>
  extern int select(int a, fd_set *b, fd_set *c, fd_set *d,
                    struct timeval *e) {
    /* C probably doesn't check for fd_set overflow, so we do */
    if (a<0 || a>FD_SETSIZE) {
      errno = EINVAL;
      return -1;
    }
    return Csysselect::select(a,b,c,d,e);
  }

  namespace Csysselect {
    extern "C" void __stub_FD_CLR(int, fd_set @);
    extern "C" int __stub_FD_ISSET(int, fd_set @);
    extern "C" void __stub_FD_SET(int, fd_set @);
    extern "C" void __stub_FD_ZERO(fd_set @);
  }
  void FD_CLR(int a, fd_set @b) {
    if (a<0 || a>FD_SETSIZE) return; /* force fd_set overflow check */
    return Csysselect::__stub_FD_CLR(a,b);
  }
  int FD_ISSET(int a, fd_set @b) {
    if (a<0 || a>FD_SETSIZE) return 0; /* force fd_set overflow check */
    return Csysselect::__stub_FD_ISSET(a,b);
  }
  void FD_SET(int a, fd_set @b) {
    if (a<0 || a>FD_SETSIZE) return; /* force fd_set overflow check */
    return Csysselect::__stub_FD_SET(a,b);
  }
  void FD_ZERO(fd_set @a) {
    return Csysselect::__stub_FD_ZERO(a);
  }

#include <sys/shm.h>

#include <sys/socket.h>


  datatype exn { SocketError };
  datatype exn.SocketError SocketError_val = SocketError;

  namespace Csocket {
    extern "C" int accept_in(int, const struct sockaddr_in @, socklen_t @);
  }
  int accept(int fd, ... inject SA ap) {
    if (numelts(ap) != 2) throw &SocketError_val;
    switch ($(ap[0],ap[1])) {
    case $(&SA_sockaddr_in(x),&SA_socklenptr(y)):
      return Csocket::accept_in(fd,x,y);
    default: throw &SocketError_val;
    }
  }

  namespace Csocket {
    extern "C" int bind_in(int, const struct sockaddr_in @, socklen_t);
  }
  int bind(int fd, ... inject SA ap) {
    if (numelts(ap) != 2) throw &SocketError_val;
    switch ($(ap[0],ap[1])) {
    case $(&SA_sockaddr_in(x),&SA_socklen(y)):
      return Csocket::bind_in(fd,x,y);
    default: throw &SocketError_val;
    }
  }

  namespace Csocket {
    extern "C" int connect_in(int, const struct sockaddr_in @, socklen_t);
  }
  int connect(int fd, ... inject SA ap) {
    if (numelts(ap) != 2) throw &SocketError_val;
    switch ($(ap[0],ap[1])) {
    case $(&SA_sockaddr_in(x),&SA_socklen(y)):
      return Csocket::connect_in(fd,x,y);
    default: throw &SocketError_val;
    }
  }

  namespace Csocket {
    extern "C" int getpeername_in(int, const struct sockaddr_in @, socklen_t @);
  }
  int getpeername(int fd, ... inject SA ap) {
    if (numelts(ap) != 2) throw &SocketError_val;
    switch ($(ap[0],ap[1])) {
    case $(&SA_sockaddr_in(x),&SA_socklenptr(y)):
      return Csocket::getpeername_in(fd,x,y);
    default: throw &SocketError_val;
    }
  }

  namespace Csocket {
    extern "C" int getsockname_in(int, const struct sockaddr_in @, socklen_t @);
  }
  int getsockname(int fd, ... inject SA ap) {
    if (numelts(ap) != 2) throw &SocketError_val;
    switch ($(ap[0],ap[1])) {
    case $(&SA_sockaddr_in(x),&SA_socklenptr(y)):
      return Csocket::getsockname_in(fd,x,y);
    default: throw &SocketError_val;
    }
  }

  namespace Csocket {
    extern "C" int getsockopt_int(int, int, int, int @, socklen_t @);
    extern "C" int getsockopt_timeval(int, int, int, struct timeval @, socklen_t @);
  }
  int getsockopt(int fd, int level, int optname, ... inject SO ap) {
    if (numelts(ap) != 2) throw &SocketError_val;
    switch ($(ap[0],ap[1])) {
    case $(&SO_int(x),&SO_socklenptr(y)):
      return Csocket::getsockopt_int(fd,level,optname,x,y);
    case $(&SO_int(x),&SO_int(y)): // FIX: inject problem b/c socklen_t=int
      return Csocket::getsockopt_int(fd,level,optname,x,(socklen_t @)y);
    case $(&SO_timeval(x),&SO_socklenptr(y)):
      return Csocket::getsockopt_timeval(fd,level,optname,x,y);
    case $(&SO_timeval(x),&SO_int(y)): // FIX: inject problem b/c socklen_t=int
      return Csocket::getsockopt_timeval(fd,level,optname,x,(socklen_t @)y);
    default: throw &SocketError_val;
    }
  }

  namespace Csocket {
    extern "C" ssize_t recv_wrapped(int, char ? @nozeroterm, size_t, int);
  }
  // FIX: kill the extra level of indirection?  That is, rename the
  //   C function to be Cyc__recv and call it directly ...
  ssize_t recv(int fd, char ? @nozeroterm buf, size_t n, int flags) {
    return Csocket::recv_wrapped(fd,buf,n,flags);
  }

  namespace Csocket {
    extern "C" ssize_t recvfrom_in(int, char ? @nozeroterm, size_t, int,
                                   const struct sockaddr_in @, socklen_t @);
  }
  ssize_t recvfrom(int fd, char ? @nozeroterm buf, size_t n, int flags, 
		   ... inject SA ap) {
    if (numelts(ap) != 2) throw &SocketError_val;
    switch ($(ap[0],ap[1])) {
    case $(&SA_sockaddr_in(x),&SA_socklenptr(y)):
      return Csocket::recvfrom_in(fd,buf,n,flags,x,y);
    default: throw &SocketError_val;
    }
  }

  namespace Csocket {
    extern "C" ssize_t send_wrapped(int, const char ? @nozeroterm, size_t, int);
  }
  ssize_t send(int fd, const char ? @nozeroterm buf, size_t n, int flags) {
    return Csocket::send_wrapped(fd,buf,n,flags);
  }

  namespace Csocket {
    extern "C" ssize_t sendto_in(int, const char ? @nozeroterm, size_t, int,
                                 const struct sockaddr_in @, socklen_t);
  }
  ssize_t sendto(int fd, const char ? @nozeroterm buf, size_t n, int flags,
                 ... inject SA ap) {
    if (numelts(ap) != 2) throw &SocketError_val;
    switch ($(ap[0],ap[1])) {
    case $(&SA_sockaddr_in(x),&SA_socklen(y)):
      return Csocket::sendto_in(fd,buf,n,flags,x,y);
    default: throw &SocketError_val;
    }
  }

  namespace Csocket {
    extern "C" int setsockopt_int(int, int, int, const int @, socklen_t);
    extern "C" int setsockopt_timeval(int, int, int, const struct timeval @, socklen_t);
    extern "C" int setsockopt_linger(int, int, int, const struct linger @, socklen_t);
  }
  int setsockopt(int fd, int level, int optname, ... inject SO ap) {
    if (numelts(ap) != 2) throw &SocketError_val;
    switch ($(ap[0],ap[1])) {
    case $(&SO_int(x),&SO_socklen(y)):
      return Csocket::setsockopt_int(fd,level,optname,x,y);
    case $(&SO_timeval(x),&SO_socklen(y)):
      return Csocket::setsockopt_timeval(fd,level,optname,x,y);
    case $(&SO_linger(x),&SO_socklen(y)):
      return Csocket::setsockopt_linger(fd,level,optname,x,y);
    default: throw &SocketError_val;
    }
  }

#include <sys/stat.h>

#include <sys/statvfs.h>

#include <sys/time.h>


  namespace Csystime {
    extern "C" int gettimeofday(struct timeval @, struct timezone *);
  }
  int gettimeofday(struct timeval @a, struct timezone *b) {
    return Csystime::gettimeofday(a,NULL);
  }

#include <sys/timeb.h>

#include <sys/times.h>

#include <sys/types.h>

#include <sys/uio.h>

#include <sys/un.h>

#include <sys/utsname.h>

#include <sys/wait.h>

#include <sys/syslog.h>

#include <tar.h>

#include <termios.h>

#include <time.h>


  namespace Ctime {
    extern "C" size_t strftime(char *, size_t, const char *,
                               const struct tm @);
  }
  static datatype exn.Failure __strftime_failure =
    Failure("fgets: buffer insufficient");
  size_t strftime(char ?s, size_t maxsize, const char ?fmt,
                  const struct tm @t) {
    if (maxsize > numelts(s)) throw &__strftime_failure; 
    return Ctime::strftime(s,maxsize,fmt,t);
  }

#include <ucontext.h>

#include <ulimit.h>

#include <unistd.h>


  // This is untested; I'd be surprised if it actually works
  //  int execl(const char ? path, const char ? arg0, ... const char ? argv) {
  //    if (argv[numelts(argv) - 1] != NULL)
  //      throw new Failure("execl: arg list must be NULL-terminated");
  //
  //    // We allocate 1+numelts(argv) because we need to prepend arg0
  //    char * ?newargs = new {for i < 1 + numelts(argv) : NULL};
  //    newargs[0] = string_to_char *(arg0);
  //    for (int i = 0; i < numelts(argv); i++)
  //      newargs[i+1] = string_to_char *(argv[i]);
  //    return Cunistd::execv(string_to_char *(path), (char **) newargs);
  //  }

  static datatype exn.Failure __execlp_failure =
    Failure("execlp arg list not NULL-terminated");
  int execlp(const char @ path, const char @`r arg0, ... const char *`r argv) {
    if (argv[numelts(argv) - 1] != NULL) throw &__execlp_failure;
    // We allocate 1+numelts(argv) because we need to prepend arg0
    { region r2; 
      const char *`r ? @zeroterm newargs = 
        rnew(r2) {for i < numelts(argv) : (const char *`r)NULL};
      newargs[0] = arg0;
      for (int i = 0; i < numelts(argv)-1; i++)
        newargs[i+1] = argv[i];
      return execvp(path, newargs);
    }
  }

  //  namespace Cunistd {
  //    extern "C" int execv(char * path, char * *argv);
  //  }

//    namespace Cunistd {
//      extern "C" int execve(char * path, char @ *argv, char @ *envp);
//    }
//    static datatype exn.Failure __execve_failure =
//      Failure("execve: arg list must be NULL-terminated");
//    int execve(const char ? filename, char ? const ?argv, char ? const ?envp) {
//      if (argv[numelts(argv) - 1] != NULL)
//        throw &__execve_failure;

//      char * ?newargs = new {for i < numelts(argv) : NULL};
//      for (int i = 0; i < numelts(argv); i++)
//        newargs[i] = string_to_char *(argv[i]);

//      char * ?newenvp = new {for i < numelts(envp) : NULL};
//      for (int i = 0; i < numelts(envp); i++)
//        newenvp[i] = string_to_char *(envp[i]);

//      return Cunistd::execve(string_to_char *(filename),
//                             (char **) newargs, (char **) newenvp);
//    }

  // FIX: this should really use a buffer, rather than a string, but
  //   I can't get it to work otherwise
  namespace Cunistd {
    extern "C" char *`r getcwd(char *`r buf, size_t size);
  }
  static datatype exn.Failure __getcwd_failure =
    Failure("getcwd: invalid buf argument");
  char ?`r getcwd(char ?`r buf, size_t size) {
    if (numelts(buf) < size) throw &__getcwd_failure;
    let response = Cunistd::getcwd((char *)buf, size);
    return response ? buf : NULL;
  }

  namespace Cunistd {
    extern "C" int gethostname(char @ @nozeroterm,size_t);
  }
  static datatype exn.Failure __gethostname_failure_1 =
    Failure("gethostname: called with NULL buf");
  static datatype exn.Failure __gethostname_failure_2 =
    Failure("gethostname: called with count > numelts(buf)");
  int gethostname(char ? @nozeroterm buf, size_t count) {
    if (!buf) throw &__gethostname_failure_1;
    else {
      if (count > numelts(buf)) throw &__gethostname_failure_2;
      return Cunistd::gethostname((char @ @nozeroterm)buf, count);
    }
  }

  namespace Cunistd {
    extern "C" ssize_t read(int fd, char * @nozeroterm buf, size_t count);
  }
  static datatype exn.Failure __read_failure =
    Failure("read: called with count > numelts(buf)");
  ssize_t read(int fd, char ? @nozeroterm buf, size_t count) {
    if (count > numelts(buf)) throw &__read_failure;
    return Cunistd::read(fd, (char * @nozeroterm)buf, count);
  }

  namespace Cunistd {
    extern "C" ssize_t write(int fd, const char @ @nozeroterm buf, size_t count);
  }
  static datatype exn.Failure __write_failure =
    Failure("write: called with count > numelts(buf)");
  ssize_t write(int fd, const char ? @nozeroterm buf, size_t count) {
    if (count > numelts(buf)) throw &__write_failure;
    return Cunistd::write(fd, (const char @ @nozeroterm)buf, count);
  }

#include <utime.h>

#include <utmpx.h>

#include <wchar.h>

#include <wctype.h>

#include <wordexp.h>

