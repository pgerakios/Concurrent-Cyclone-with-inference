
/*  A Bison parser, made from /home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y
 by  GNU Bison version 1.25
  */

void (*beforedie)(void) = NULL;
#define YYBISON 1  /* Identify Bison output.  */

#define YYLSP_NEEDED

#define	AUTO	258
#define	REGISTER	259
#define	STATIC	260
#define	EXTERN	261
#define	TYPEDEF	262
#define	VOID	263
#define	CHAR	264
#define	SHORT	265
#define	INT	266
#define	LONG	267
#define	FLOAT	268
#define	DOUBLE	269
#define	SIGNED	270
#define	UNSIGNED	271
#define	CONST	272
#define	VOLATILE	273
#define	RESTRICT	274
#define	STRUCT	275
#define	UNION	276
#define	CASE	277
#define	DEFAULT	278
#define	INLINE	279
#define	SIZEOF	280
#define	OFFSETOF	281
#define	IF	282
#define	ELSE	283
#define	SWITCH	284
#define	WHILE	285
#define	DO	286
#define	FOR	287
#define	GOTO	288
#define	CONTINUE	289
#define	BREAK	290
#define	RETURN	291
#define	ENUM	292
#define	TYPEOF	293
#define	BUILTIN_VA_LIST	294
#define	EXTENSION	295
#define	NULL_kw	296
#define	LET	297
#define	THROW	298
#define	TRY	299
#define	CATCH	300
#define	EXPORT	301
#define	OVERRIDE	302
#define	HIDE	303
#define	NEW	304
#define	ABSTRACT	305
#define	FALLTHRU	306
#define	USING	307
#define	NAMESPACE	308
#define	DATATYPE	309
#define	SPAWN	310
#define	MALLOC	311
#define	RMALLOC	312
#define	RMALLOC_INLINE	313
#define	CALLOC	314
#define	RCALLOC	315
#define	SWAP	316
#define	REGION_T	317
#define	TAG_T	318
#define	REGION	319
#define	RNEW	320
#define	REGIONS	321
#define	PORTON	322
#define	PORTOFF	323
#define	PRAGMA	324
#define	TEMPESTON	325
#define	TEMPESTOFF	326
#define	NUMELTS	327
#define	VALUEOF	328
#define	VALUEOF_T	329
#define	TAGCHECK	330
#define	NUMELTS_QUAL	331
#define	THIN_QUAL	332
#define	FAT_QUAL	333
#define	NOTNULL_QUAL	334
#define	NULLABLE_QUAL	335
#define	REQUIRES_QUAL	336
#define	ENSURES_QUAL	337
#define	IEFFECT_QUAL	338
#define	OEFFECT_QUAL	339
#define	REGION_QUAL	340
#define	NOZEROTERM_QUAL	341
#define	ZEROTERM_QUAL	342
#define	TAGGED_QUAL	343
#define	EXTENSIBLE_QUAL	344
#define	PTR_OP	345
#define	INC_OP	346
#define	DEC_OP	347
#define	LEFT_OP	348
#define	RIGHT_OP	349
#define	LE_OP	350
#define	GE_OP	351
#define	EQ_OP	352
#define	NE_OP	353
#define	AND_OP	354
#define	OR_OP	355
#define	MUL_ASSIGN	356
#define	DIV_ASSIGN	357
#define	MOD_ASSIGN	358
#define	ADD_ASSIGN	359
#define	SUB_ASSIGN	360
#define	LEFT_ASSIGN	361
#define	RIGHT_ASSIGN	362
#define	AND_ASSIGN	363
#define	XOR_ASSIGN	364
#define	OR_ASSIGN	365
#define	ELLIPSIS	366
#define	LEFT_RIGHT	367
#define	COLON_COLON	368
#define	IDENTIFIER	369
#define	INTEGER_CONSTANT	370
#define	STRING	371
#define	WSTRING	372
#define	CHARACTER_CONSTANT	373
#define	WCHARACTER_CONSTANT	374
#define	FLOATING_CONSTANT	375
#define	TYPE_VAR	376
#define	TYPEDEF_NAME	377
#define	QUAL_IDENTIFIER	378
#define	QUAL_TYPEDEF_NAME	379
#define	ATTRIBUTE	380
#define	ASM_TOK	381

#line 46 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"

#define YYDEBUG 0 // 1 to debug, 0 otherwise
#define YYPRINT yyprint
#define YYERROR_VERBOSE

#if YYDEBUG==1
extern @tagged union YYSTYPE<`yy::R>;
extern void yyprint(int i, union YYSTYPE<`yy> v);
#endif

#include <lexing.h>
#include <string.h>
#include "warn.h"
#include "tcutil.h"
#include "absynpp.h"
using Core;
using List;
using Absyn;
 extern void (*beforedie)(void);

// Typedef processing must be split between the parser and lexer.
// These functions are called by the parser to communicate typedefs
// to the lexer, so the lexer can distinguish typedefs from identifiers.
namespace Lex {
  extern void register_typedef(qvar_t s);
  extern void enter_namespace(var_t);
  extern void leave_namespace();
  extern void enter_using(qvar_t);
  extern void leave_using();
  extern void enter_extern_c();
  extern void leave_extern_c();
  extern qvar_t token_qvar;
  extern string_t token_string;
}

// State that we thread through the lexer and parser.
#define YYLEX_PARAM_ARG Lexing::Lexbuf<Lexing::Function_lexbuf_state<FILE@>>,union YYSTYPE<`yy> @yylval_ptr, YYLTYPE @yylloc
#define YYLEX_ARG yylex_buf,&yylval,&yylloc
#define YYPARSE_PARAM_ARG region_t<`yy> yyr, Lexing::Lexbuf<Lexing::Function_lexbuf_state<FILE@>> yylex_buf

#define LOC(s,e) ({ yylloc.first_line = s.first_line;  (s.first_line); })
#define SLOC(s) (s.first_line)
#define ELOC(s) (s.last_line)
#define DUMMYLOC 0


namespace Parse {
  // Flag that's turned on when processing tempest code instead of cyclone.
  // We interpreter "*" as a fat pointer there and intend for regions to
  // default to the heap (along with some other trickery).
  bool parsing_tempest = false;

  // flattened lists
  struct FlatList<`a::A,`r::R> { struct FlatList<`a,`r> *`r tl; `a hd; };
  typedef struct FlatList<`a,`r> *`r flat_list_t<`a,`r>;
  // imperatively reverse a flattened list
  flat_list_t<`a,`r> flat_imp_rev(flat_list_t<`a,`r> x) {
    if (x == NULL) return x;
    else {
      flat_list_t<`a,`r> first  = x;
      flat_list_t<`a,`r> second = x->tl;
      x->tl = NULL;
      while (second != NULL) {
        flat_list_t<`a,`r> temp = second->tl;
        second->tl = first;
        first = second;
        second = temp;
      } 
      return first;
    }
  }

  // if true, parse register storage class as public
bool no_register = false;

datatype exn {Exit};

////////////////////// Type definitions needed only during parsing ///////////
struct Type_specifier {
  bool Signed_spec      : 1;
  bool Unsigned_spec    : 1;
  bool Short_spec       : 1;
  bool Long_spec        : 1;
  bool Long_Long_spec   : 1;
  bool Valid_type_spec  : 1;
  type_t Type_spec;
  seg_t loc;
};
typedef struct Type_specifier type_specifier_t;

enum Storage_class {
 Typedef_sc, Extern_sc, ExternC_sc, Static_sc, Auto_sc, Register_sc, Abstract_sc
};
typedef enum Storage_class storage_class_t;

struct Declaration_spec {
  storage_class_t*         sc;
  tqual_t                  tq;
  type_specifier_t         type_specs;
  bool                     is_inline;
  list_t<attribute_t>      attributes;
};
typedef struct Declaration_spec decl_spec_t;

struct Declarator<`yy::R> {
  qvar_t                  id;
  seg_t                   varloc;
  list_t<type_modifier_t<`yy>,`yy> tms;
};
typedef struct Declarator<`yy> declarator_t<`yy>;
typedef flat_list_t<declarator_t<`yy>,`r> declarators_t<`r,`yy>;
typedef flat_list_t<$(declarator_t<`yy>,exp_opt_t),`yy> declarator_list_t<`yy>;

datatype Pointer_qual {
  Numelts_ptrqual(exp_t);
  Region_ptrqual(type_t);
  Thin_ptrqual;
  Fat_ptrqual;
  Zeroterm_ptrqual;
  Nozeroterm_ptrqual;
  Notnull_ptrqual;
  Nullable_ptrqual;
};
typedef datatype Pointer_qual @`r pointer_qual_t<`r>;
typedef list_t<pointer_qual_t<`r>,`r> pointer_quals_t<`r>;

static void
  decl_split(region_t<`r> r,declarator_list_t<`yy> ds,
             declarators_t<`r,`yy>@ decls,
             list_t<exp_opt_t,`r>@ es) {
  declarators_t<`r,`yy> declarators = NULL;
  list_t<exp_opt_t,`r>  exprs       = NULL;
  for (; ds != NULL; ds = ds->tl) {
    let $(d,e) = ds->hd;
    declarators = rnew(r) FlatList{declarators,d};
    exprs = rnew(r) List(e,exprs);
  }
  *es    = imp_rev(exprs);
  *decls = flat_imp_rev(declarators);
}

struct Abstractdeclarator<`yy::R> {
  list_t<type_modifier_t<`yy>,`yy> tms;
};
typedef struct Abstractdeclarator<`yy> abstractdeclarator_t<`yy>;

////////////////////////// forward references //////////////////////
static type_t collapse_type_specifiers(type_specifier_t ts, seg_t loc);
static $(tqual_t,type_t,list_t<tvar_t>,list_t<attribute_t>)
  apply_tms(tqual_t,type_t,list_t<attribute_t,`H>,list_t<type_modifier_t>);

////////////////// global state (we're not re-entrant) ////////////////
  //opt_t<Lexing::Lexbuf<Lexing::Function_lexbuf_state<FILE@>>> lbuf = NULL;
static list_t<decl_t> parse_result = NULL;

static `a parse_abort(seg_t loc, string_t fmt, ... inject parg_t<`r2> ap) 
  __attribute__((format(printf,2,3), noreturn)) {
  Warn::verr(loc,fmt,ap);
  throw new Exit;
}

static type_t type_name_to_type($(var_opt_t,tqual_t,type_t)@ tqt,
                                seg_t loc) {
  let &$(_,tq,t) = tqt;
  if (tq.print_const || tq.q_volatile || tq.q_restrict) {
    if (tq.loc != 0) loc = tq.loc;
    Warn::warn(loc,"qualifier on type is ignored");
  }
  return t;
}
////////////////// Collapsing pointer qualifiers ///////////////////////////
static $(booltype_t nullable,ptrbound_t bound,
         booltype_t zeroterm,rgntype_t rgn) 
  collapse_pointer_quals(seg_t loc, booltype_t nullable, 
                         ptrbound_t bound, rgntype_t rgn, 
                         pointer_quals_t pqs) {
  // for now, the last qualifier wins and overrides previous ones
  booltype_t zeroterm = Tcutil::any_bool(NULL);
  for (; pqs != NULL; pqs = pqs->tl)
    switch (pqs->hd) {
    case &Zeroterm_ptrqual:   zeroterm = true_type;            break;
    case &Nozeroterm_ptrqual: zeroterm = false_type;           break;
    case &Nullable_ptrqual:   nullable = true_type;            break;
    case &Notnull_ptrqual:    nullable = false_type;           break;
    case &Fat_ptrqual:           bound = fat_bound_type;       break;
    case &Thin_ptrqual:          bound = bounds_one();         break;
    case &Numelts_ptrqual(e):    bound = thin_bounds_exp(e);   break;
    case &Region_ptrqual(t):       rgn = t;                    break;
    }
  return $(nullable,bound,zeroterm,rgn);
}

////////////////// Functions for creating abstract syntax //////////////////

// FIX:  need to guarantee this won't conflict with a user name
qvar_t gensym_enum() {
  // a way to gensym an enum name
  static int enum_counter = 0;
  return new $(Rel_n(NULL), 
	       new (string_t)aprintf("__anonymous_enum_%d__", enum_counter++));
}

static aggrfield_t
make_aggr_field(seg_t loc,
		$($(seg_t,qvar_t,tqual_t,type_t,list_t<tvar_t>,
		    list_t<attribute_t,`H>)@,$(exp_opt_t,exp_opt_t)@)@ 
                field_info) {
  let &$(&$(varloc,qid,tq,t,tvs,atts),&$(widthopt,reqopt)) = field_info;
  if (tvs != NULL)
    Warn::err(loc,"bad type params in struct field");
  if(is_qvar_qualified(qid))
    Warn::err(loc,"struct or union field cannot be qualified with a namespace");
  return new Aggrfield{.name = (*qid)[1], .tq = tq, .type = t,
		       .width = widthopt, .attributes = atts,
                       .requires_clause = reqopt};
}

static type_specifier_t empty_spec(seg_t loc) {
  return Type_specifier{.Signed_spec = false,
                        .Unsigned_spec = false,
                        .Short_spec = false,
                        .Long_spec = false,
                        .Long_Long_spec = false,
                        .Valid_type_spec = false,
                        .Type_spec = sint_type,
                        .loc = loc};
}

static type_specifier_t type_spec(type_t t,seg_t loc) {
  let s = empty_spec(loc);
  s.Type_spec = t;
  s.Valid_type_spec = true;
  return s;
}
static type_specifier_t signed_spec(seg_t loc) {
  let s = empty_spec(loc);
  s.Signed_spec = true;
  return s;
}
static type_specifier_t unsigned_spec(seg_t loc) {
  let s = empty_spec(loc);
  s.Unsigned_spec = true;
  return s;
}
static type_specifier_t short_spec(seg_t loc) {
  let s = empty_spec(loc);
  s.Short_spec = true;
  return s;
}
static type_specifier_t long_spec(seg_t loc) {
  let s = empty_spec(loc);
  s.Long_spec = true;
  return s;
}

// convert any array types to pointer types
static type_t array2ptr(type_t t, bool argposn) {
    // FIX: don't lose zero-term location
  return Tcutil::is_array_type(t) ? 
    Tcutil::promote_array(t, argposn ? new_evar(&Tcutil::rko, NULL) : heap_rgn_type, false) : t;
}

// The next few functions are used when we have a function (or aggregate)
// where the type of one parameter appears to depend on the value of
// another.  Specifically, when we have:
//    void foo(tag_t<`i> x, int arr[x])
// we want to rewrite it to:
//    void foo(tag_t<`i> x, int arr[valueof(`i)])

// given a list of arguments, pull out those that have names and
// are given tag_t's
static list_t<$(var_t,type_t)@> get_arg_tags(list_t<$(var_opt_t,tqual_t,type_t) @>x) {
  let res = NULL;
  for (; x != NULL; x = x->tl) {
    switch (x->hd) {
    case &$(v,_,&AppType(&TagCon,&List{i,NULL})) && v != NULL: 
      switch (i) {
      case &Evar(_,*z,_,_):
        // using an evar here will mess things up since the evar will be
        // duplicated.  So, we pin the evar down to a type variable instead.
        stringptr_t nm = new ((string_t)aprintf("`%s",*((var_t)v)));
        *z = var_type(new Tvar{nm,-1,new Eq_kb(&Tcutil::ik)});
        break;
      default: break;
      }
      res = new List(new $((var_t)v,i),res); break;
      // while we're at it, give any anonymous regions_t's a name that
      // corresponds to the variable.
    case &$(&v,_,&AppType(&RgnHandleCon,&List{&Evar(_,*z,_,_),NULL})):
      stringptr_t nm = new ((string_t)aprintf("`%s",v));
      *z = var_type(new Tvar{nm,-1,new Eq_kb(&Tcutil::rk)});
      break;
    default: break;
    }
  }
  return res;
}

// same as above, but for a list of aggregate fields
static list_t<$(var_t,type_t)@> get_aggrfield_tags(list_t<aggrfield_t> x) {
  let res = NULL;
  for (; x != NULL; x = x->tl) {
    switch (x->hd->type) {
    case &AppType(&TagCon,&List{i,NULL}):
      res = new List(new $(x->hd->name,i), res); break;
    default: break;
    }
  }
  return res;
}

// given a mapping of variables to tags (x->`i), replace the variable x with `i
static exp_t substitute_tags_exp(list_t<$(var_t,type_t)@> tags, exp_t e) {
  switch (e->r) {
  case &Var_e(&Unresolved_b(&$({.Rel_n = NULL},y))): 
    for (let ts = tags; ts != NULL; ts = ts->tl) {
      let &$(x,i) = ts->hd;
      if (strptrcmp(x,y) == 0) 
        return new_exp(new Valueof_e(Tcutil::copy_type(i)),e->loc);
    }
    break;
  default: break;
  }
  return e;
}

// we have a variable x in scope with type tag_t<`i> -- look for
// array or pointer bounds involving x and replace with valueof(`i).
static type_t substitute_tags(list_t<$(var_t,type_t)@> tags, type_t t) {
  switch (t) {
  case &ArrayType(ArrayInfo{et,tq,nelts,zt,ztloc}):
    exp_opt_t nelts2 = nelts;
    if (nelts != 0) {
      nelts2 = substitute_tags_exp(tags,nelts);
    }
    let et2 = substitute_tags(tags,et);
    if (nelts != nelts2 || et != et2)
      return array_type(et2,tq,nelts2,zt,ztloc);
    break;
  case &PointerType(PtrInfo{et,tq,PtrAtts{r,n,b,zt,pl}}):
    let et2 = substitute_tags(tags,et);
    let b2 = substitute_tags(tags,b);
    if (et2 != et || b2 != b)
      return pointer_type(PtrInfo{et2,tq,PtrAtts{r,n,b2,zt,pl}});
    break;
  case &AppType(&ThinCon, &List{t,NULL}):
    let t2 = substitute_tags(tags,t);
    if (t != t2) return thin_bounds_type(t2);
    break;
  case &ValueofType(e):
    let e2 = substitute_tags_exp(tags,e);
    if (e2 != e) return valueof_type(e2);
    break;

  default: 
    // FIX: should go into other types too
    break;
  }
  return t;
}

// eliminate dependencies on tag fields by substituting the type-level
// value for the associated field name.
static void substitute_aggrfield_tags(list_t<$(var_t,type_t)@> tags, aggrfield_t x) {
  x->type = substitute_tags(tags,x->type);
}

// given an optional variable, tqual, type, and list of type
// variables, return the tqual and type and check that the type
// variables are NULL -- used when we have a tuple type specification.
static $(tqual_t,type_t)@
  get_tqual_typ(seg_t loc,$(var_opt_t,tqual_t,type_t) @t) {
  return new $((*t)[1],(*t)[2]);
}

static bool is_typeparam(type_modifier_t tm) {
  switch (tm) {
  case &TypeParams_mod(...): return true;
  default: return false;
  }
}

// convert an identifier to a type -- if it's the special identifier
// `H then return HeapRgn, otherwise, return a type variable.
static type_t id2type(string_t<`H> s, kindbound_t k) {
  if (zstrcmp(s,"`H") == 0)
    return heap_rgn_type;
  else if (zstrcmp(s,"`U") == 0)
    return unique_rgn_type;
  else if (zstrcmp(s,"`RC") == 0)
    return refcnt_rgn_type;
  else
    return var_type(new Tvar(new s,-1,k));
}

// convert a list of types to a list of typevars -- the parser can't
// tell lists of types apart from lists of typevars easily so we parse
// them as types and then convert them back to typevars.  See
// productions "struct_or_union_specifier" and "datatype_specifier";
static tvar_t typ2tvar(seg_t loc, type_t t) {
  switch (t) {
  case &VarType(pr): return pr;
  default: parse_abort(loc,"expecting a list of type variables, not types");
  }
}

// if tvar's kind is unconstrained, set it to k
static void set_vartyp_kind(type_t t, kind_t k, bool leq) {
  switch(Tcutil::compress(t)) {
  case &VarType(&Tvar(_,_,*cptr)): 
    switch(compress_kb(*cptr)) {
    case &Unknown_kb(_): 
      if (!leq) *cptr = Tcutil::kind_to_bound(k);
      else *cptr = new Less_kb(NULL,k);
      return;
    default: return;
    }
  default: return;
  }
}

// Convert an old-style function into a new-style function
static list_t<type_modifier_t<`yy>,`yy> 
  oldstyle2newstyle(region_t<`yy> yy,
                    list_t<type_modifier_t<`yy>,`yy> tms,
                    list_t<decl_t> tds, 
                    seg_t loc) {
  // Not an old-style function
  if (tds==NULL) return tms;

  // If no function is found, or the function is not innermost, then
  // this is not a function definition; it is an error.  But, we
  // return silently.  The error will be caught by make_function below.
  if (tms==NULL) return NULL;

  switch (tms->hd) {
  case &Function_mod(args):
    // Is this the innermost function??
    if (tms->tl==NULL ||
	(is_typeparam(tms->tl->hd) && tms->tl->tl==NULL)) {
      // Yes
      switch (args) {
      case &WithTypes(...):
	Warn::warn(loc,"function declaration with both new- and old-style "
		   "parameter declarations; ignoring old-style");
	return tms;
      case &NoTypes(ids,_):
	if(length(ids) != length(tds))
	  parse_abort(loc, "wrong number of parameter declarations in old-style "
		"function declaration");
	// replace each parameter with the right typed version
	list_t<$(var_opt_t,tqual_t,type_t)@> rev_new_params = NULL;
	for(; ids != NULL; ids = ids->tl) {
	  let tds2 = tds;
	  for(; tds2 != NULL; tds2 = tds2->tl) {
	    let x = tds2->hd;
	    switch(x->r) {
	    case &Var_d(vd):
	      if(zstrptrcmp((*vd->name)[1],ids->hd)!=0)
		continue;
	      if(vd->initializer != NULL)
		parse_abort(x->loc, "initializer found in parameter declaration");
	      if(is_qvar_qualified(vd->name))
		parse_abort(x->loc, "namespaces forbidden in parameter declarations");
	      rev_new_params =
		new List(new $((*vd->name)[1], vd->tq, vd->type), 
			 rev_new_params);
	      goto L;
	    default: parse_abort(x->loc, "nonvariable declaration in parameter type");
	    }
	  }
	L: if(tds2 == NULL)
	  parse_abort(loc,"%s is not given a type",*ids->hd);
	}
	return
	  rnew(yy) List(rnew(yy) Function_mod(rnew(yy) WithTypes(imp_rev(rev_new_params),
						  false,NULL,NULL,NULL,NULL,NULL,NULL,NULL)),
		   NULL);
      }
    } 
    // No, keep looking for the innermost function
    fallthru;
  default: return rnew(yy) List(tms->hd,oldstyle2newstyle(yy,tms->tl,tds,loc));
  }
}

// make a top-level function declaration out of a declaration-specifier
// (return type, etc.), a declarator (the function name and args),
// a declaration list (for old-style function definitions), and a statement.
static fndecl_t make_function(region_t<`yy> yy,
                              decl_spec_t *dso, declarator_t<`yy> d,
                              list_t<decl_t> tds, stmt_t body, seg_t loc) {
  // Handle old-style parameter declarations
  if (tds!=NULL)
    d = Declarator(d.id, d.varloc, oldstyle2newstyle(yy,d.tms,tds,loc));

  scope_t sc = Public;
  type_specifier_t tss = empty_spec(loc);
  tqual_t tq = empty_tqual(0);
  bool is_inline = false;
  list_t<attribute_t> atts = NULL;

  if (dso != NULL) {
    tss = dso->type_specs;
    tq  = dso->tq;
    is_inline = dso->is_inline;
    atts = dso->attributes;
    // Examine storage class; like C, we allow both static and extern
    if (dso->sc != NULL)
      switch (*dso->sc) {
      case Extern_sc: sc = Extern; break;
      case Static_sc: sc = Static; break;
      default: Warn::err(loc,"bad storage class on function"); break;
      }
  }
  let t = collapse_type_specifiers(tss,loc);
  let $(fn_tqual,fn_type,x,out_atts) = apply_tms(tq,t,atts,d.tms);
  // what to do with the left-over attributes out_atts?  I'm just
  // going to append them to the function declaration and let the
  // type-checker deal with it.
  if (x != NULL)
    // Example:   `a f<`b><`a>(`a x) {...}
    // Here info[2] will be the list `b.
    Warn::warn(loc,"bad type params, ignoring");
  
  switch (fn_type) { // fn_type had better be a FnType
  case &FnType(i):
    for(let args2 = i.args; args2 != NULL; args2 = args2->tl)
      if((*args2->hd)[0] == NULL) {
	Warn::err(loc,"missing argument variable in function prototype");
	(*args2->hd)[0] = new "?";
      }
    // We don't fill in the cached type here because we may need
    // to figure out the bound type variables and the effect.
    i.attributes=append(i.attributes,out_atts);
    return new Fndecl {.sc=sc,.is_inline=is_inline,.name=d.id,.body=body,
		       .i=i,
		       .cached_type=NULL,.param_vardecls=NULL,.fn_vardecl=NULL};
  default: parse_abort(loc,"declarator is not a function prototype");
  }
}

static string_t msg1 = 
  "at most one type may appear within a type specifier \n\t(missing ';' or ','?)";
static string_t msg2 =
  "const or volatile may appear only once within a type specifier \n\t(missing ';' or ','?)";
static string_t msg3 = 
  "type specifier includes more than one declaration \n\t(missing ';' or ','?)";
static string_t msg4 = 
  "sign specifier may appear only once within a type specifier \n\t(missing ';' or ','?)";

// Given two partial type-specifiers, combine their information
// to produce a new type specifier.  Warns when you have duplicates
// such as "signed signed" but ignores conflicts such as "signed unsigned".
// These are caught when collapse_type_specifiers is called.
static type_specifier_t combine_specifiers(seg_t loc,
                                           type_specifier_t s1,
                                           type_specifier_t s2) {
  if (s1.Signed_spec && s2.Signed_spec)
    Warn::warn(loc,msg4);
  s1.Signed_spec |= s2.Signed_spec;
  if (s1.Unsigned_spec && s2.Unsigned_spec)
    Warn::warn(loc,msg4);
  s1.Unsigned_spec |= s2.Unsigned_spec;
  if (s1.Short_spec && s2.Short_spec)
    Warn::warn(loc,msg4);
  s1.Short_spec |= s2.Short_spec;
  if ((s1.Long_Long_spec && s2.Long_Long_spec) ||
      (s1.Long_Long_spec && s2.Long_spec) ||
      (s2.Long_Long_spec && s1.Long_spec))
    Warn::warn(loc,msg4);
  s1.Long_Long_spec = 
    (s1.Long_Long_spec || s2.Long_Long_spec || (s1.Long_spec && s2.Long_spec));
  s1.Long_spec = !s1.Long_Long_spec && (s1.Long_spec || s2.Long_spec);
  if (s1.Valid_type_spec && s2.Valid_type_spec)
    Warn::err(loc,msg1);
  else if (s2.Valid_type_spec) {
    s1.Type_spec = s2.Type_spec;
    s1.Valid_type_spec = true;
  }
  return s1;
}

// Given a type-specifier, determines the type.  This just really
// needs to look for conflicts (e.g., "signed unsigned") and collapse
// the specifier down to a type.
static type_t
  collapse_type_specifiers(type_specifier_t ts, seg_t loc) {

  bool      seen_type = ts.Valid_type_spec;
  bool      seen_sign = ts.Signed_spec || ts.Unsigned_spec;
  bool      seen_size = ts.Short_spec || ts.Long_spec || ts.Long_Long_spec;
  type_t    t         = seen_type ? ts.Type_spec : void_type;
  size_of_t sz        = Int_sz; 
  sign_t    sgn  = Signed;

  if (ts.Signed_spec && ts.Unsigned_spec)
    Warn::err(loc,msg4);
  if (ts.Unsigned_spec) sgn = Unsigned;
  if ((ts.Short_spec && (ts.Long_spec || ts.Long_Long_spec)) ||
      (ts.Long_spec && ts.Long_Long_spec))
    Warn::err(loc,msg4);
  if (ts.Short_spec) sz = Short_sz;
  if (ts.Long_spec) sz = Long_sz;
  if (ts.Long_Long_spec) sz = LongLong_sz;

  // it's okay to not have an explicit type as long as we have some
  // combination of signed, unsigned, short, long, or longlong
  if (!seen_type) {
    if(!seen_sign && !seen_size) 
      Warn::warn(loc,"missing type within specifier");
    t = int_type(sgn,sz);
  } else {
    if(seen_sign)
      switch (t) {
      case &AppType(&IntCon(sgn2,sz2),_):
        if (sgn2 != sgn)
          t = int_type(sgn,sz2);
        break;
      default: Warn::err(loc,"sign specification on non-integral type"); break;
      }
    if(seen_size)
      switch (t) {
      case &AppType(&IntCon(sgn2,sz2),_):
        if (sz2 != sz)
          t = int_type(sgn2,sz);
        break;
        // hack -- if we've seen "long" then sz will be long_double_type
      case &AppType(&FloatCon(_),_): t = long_double_type; break;
      default: Warn::err(loc,"size qualifier on non-integral type"); break;
      }
  }
  return t;
}

static list_t<$(seg_t, qvar_t,tqual_t,type_t,list_t<tvar_t>,list_t<attribute_t>)@`r,`r>
  apply_tmss(region_t<`r> r, tqual_t tq, type_t t,declarators_t<`r> ds,
             attributes_t shared_atts)
{
  if (ds==NULL) return NULL;
  declarator_t d = ds->hd;
  let q = d.id;
  let varloc = d.varloc;
  let $(tq2,new_typ,tvs,atts) = apply_tms(tq,t,shared_atts,d.tms);
  // NB: we copy the type here to avoid sharing definitions
  // but we avoid the copy when ds->tl is NULL
  if (ds->tl == NULL) 
    return rnew(r) List(rnew(r) $(varloc,q,tq2,new_typ,tvs,atts),NULL);
  else
    return rnew(r) List(rnew(r) $(varloc,q,tq2,new_typ,tvs,atts),
                    apply_tmss(r,tq,Tcutil::copy_type(t),ds->tl,shared_atts));
}

static $(tqual_t,type_t,list_t<tvar_t>,list_t<attribute_t>)
  apply_tms(tqual_t tq, type_t t, list_t<attribute_t,`H> atts,
            list_t<type_modifier_t> tms) {
  if (tms==NULL) return $(tq,t,NULL,atts);
  switch (tms->hd) {
  case &Carray_mod(zeroterm,ztloc):
    return apply_tms(empty_tqual(0),
                     array_type(t,tq,NULL,zeroterm,ztloc),atts,tms->tl);
  case &ConstArray_mod(e,zeroterm,ztloc):
    return apply_tms(empty_tqual(0),
                     array_type(t,tq,e,zeroterm,ztloc),atts,tms->tl);
  case &Function_mod(args): {
    switch (args) {
    case &WithTypes(args2,c_vararg,cyc_vararg,eff,rgn_po,req,ens,ieff,oeff):
      list_t<tvar_t> typvars = NULL;
      // function type attributes seen thus far get put in the function type
      attributes_t fn_atts = NULL, new_atts = NULL;
      for (_ as = atts; as != NULL; as = as->tl) {
	if (fntype_att(as->hd))
	  fn_atts = new List(as->hd,fn_atts);
	else
	  new_atts = new List(as->hd,new_atts);
      }
      // functions consume type parameters
      if (tms->tl != NULL) {
	switch (tms->tl->hd) {
	case &TypeParams_mod(ts,_,_):
	  typvars = ts;
	  tms=tms->tl; // skip TypeParams on call of apply_tms below
	  break;
	default:
	  break;
	}
      }
      // special case where the parameters are void, e.g., int f(void)
      if (!c_vararg && cyc_vararg == NULL // not vararg function
	  && args2 != NULL      // not empty arg list
	  && args2->tl == NULL   // not >1 arg
	  && (*args2->hd)[0] == NULL // not f(void x)
	  && (*args2->hd)[2] == void_type) {
	args2 = NULL;
      }
      // pull out any tag_t variables and their associated tag_t types
      let tags = get_arg_tags(args2);
      // convert result type from array to pointer result
      if (tags != NULL)
        t = substitute_tags(tags,t);
      t = array2ptr(t,false);
      // convert any array arguments to suitable  pointer arguments
      // and substitute away any implicit tag arguments.  
      for (let a = args2; a != NULL; a = a->tl) {
        let &$(vopt,tq,*t) = a->hd;
        if (tags != NULL) 
          *t = substitute_tags(tags,*t);
        *t = array2ptr(*t,true);
      }
      // Note, we throw away the tqual argument.  An example where
      // this comes up is "const int f(char c)"; it doesn't really
      // make sense to think of the function as returning a const
      // (or volatile, or restrict).  The result will be copied
      // anyway.  TODO: maybe we should issue a warning.  But right
      // now we don't have a loc so the warning will be confusing.
      return apply_tms(empty_tqual(tq.loc),
		       function_type(typvars,eff,tq,t,args2,
                                     c_vararg,cyc_vararg,rgn_po,fn_atts,
                                     req,ens,
												 ieff,oeff
								  ),
		       new_atts,
		       tms->tl);
    case &NoTypes(_,loc):
      parse_abort(loc,"function declaration without parameter types");
    }
  }
  case &TypeParams_mod(ts,loc,_):
    // If we are the last type modifier, this could be the list of
    // type parameters to a typedef:
    // typedef struct foo<`a,int> foo_t<`a>
    if (tms->tl==NULL)
      return $(tq,t,ts,atts);
    // Otherwise, it is an error in the program if we get here;
    // TypeParams should already have been consumed by an outer
    // Function (see last case).
    parse_abort(loc, "type parameters must appear before function arguments "
                "in declarator");
  case &Pointer_mod(ptratts,tq2):
    return apply_tms(tq2,pointer_type(PtrInfo(t,tq,ptratts)),atts,tms->tl);
  case &Attributes_mod(loc,atts2):
    // FIX: get this in line with GCC
    // attributes get attached to function types -- I doubt that this
    // is GCC's behavior but what else to do?
    return apply_tms(tq,t,List::append(atts,atts2),tms->tl);
  }
}

// given a specifier-qualifier list, warn and ignore about any nested type
// definitions and return the collapsed type.
type_t speclist2typ(type_specifier_t tss, seg_t loc) {
  return collapse_type_specifiers(tss,loc);
}

// convert an (optional) variable, tqual, type, and type
// parameters to a typedef declaration.  As a side effect, register
// the typedef with the lexer.
// TJ: FIX the tqual should make it into the typedef as well,
// e.g., typedef const int CI;
static decl_t v_typ_to_typedef(seg_t loc, $(seg_t,qvar_t,tqual_t,type_t,list_t<tvar_t,`H>,list_t<attribute_t,`H>)@ t) {
  let &$(varloc,x,tq,typ,tvs,atts) = t;
  // tell the lexer that x is a typedef identifier
  Lex::register_typedef(x);
  // if the "type" is an evar, then the typedef is abstract
  opt_t<kind_t> kind;
  type_opt_t type;
  switch (typ) {
  case &Evar(kopt,_,_,_): 
    type = NULL;
    if (kopt == NULL) kind = &Tcutil::bko;
    else kind = kopt;
    break;
  default: kind = NULL; type = typ; break;
  }
  return new_decl(new Typedef_d(new Typedefdecl{.name=x, .tvs=tvs, .kind=kind,
                                                .defn=type, .atts=atts,
                                                .tq=tq, .extern_c = false}),
		  loc);
}

// given a local declaration and a statement produce a decl statement
static stmt_t flatten_decl(decl_t d,stmt_t s) {
  return new_stmt(new Decl_s(d,s),d->loc);
}

// given a list of local declarations and a statement, produce a big
// decl statement.
static stmt_t flatten_declarations(list_t<decl_t> ds, stmt_t s){
  return List::fold_right(flatten_decl,ds,s);
}

// Given a declaration specifier list (a combination of storage class
// [typedef, extern, static, etc.] and type specifiers (signed, int,
// `a, const, etc.), and a list of declarators and initializers,
// produce a list of top-level declarations.  By far, this is the most
// involved function and thus I expect a number of subtle errors.
static list_t<decl_t> make_declarations(decl_spec_t ds,
					declarator_list_t ids,
                                        seg_t tqual_loc,
					seg_t loc) {
 region mkrgn;
 let Declaration_spec(_,tq,tss,_,atts) = ds;
 if (tq.loc == 0) tq.loc = tqual_loc;
 if (ds.is_inline)
   Warn::warn(loc,"inline qualifier on non-function definition");

 scope_t s = Public;
 bool istypedef = false;
 if (ds.sc != NULL)
   switch (*ds.sc) {
   case Typedef_sc:  istypedef = true; break;
   case Extern_sc:   s = Extern;   break;
   case ExternC_sc:  s = ExternC;  break;
   case Static_sc:   s = Static;   break;
   case Auto_sc:     s = Public;   break;
   case Register_sc: if(no_register) s = Public; else s = Register;   break;
   case Abstract_sc: 
   default: s = Abstract; break;
   }

 // separate the declarators from their initializers
 // FIX: should abstract this out, but the code generator produces
 // bad code due to tuple return type.
 declarators_t<`mkrgn> declarators = NULL;
 list_t<exp_opt_t,`mkrgn> exprs = NULL;
 decl_split(mkrgn,ids,&declarators,&exprs);
 // check to see if there are no initializers -- useful later on
 bool exps_empty = true;
 for (list_t<exp_opt_t> es = exprs; es != NULL; es = es->tl)
   if (es->hd != NULL) {
     exps_empty = false;
     break;
   }

 // Collapse the type specifiers to get the base type.
 let base_type = collapse_type_specifiers(tss,loc);
 if (declarators == NULL) {
   // here we should have a type declaration -- either a struct, union,
   // enum, or datatype as in: "struct Foo { ... };"
   switch (base_type) {
   case &TypeDeclType(&{.r = &Aggr_td(ad),...},_): 
     ad->attributes = List::append(ad->attributes,atts);
     ad->sc = s;
     return new List(new_decl(new Aggr_d(ad),loc),NULL);
   case &TypeDeclType(&{.r = &Enum_td(ed),...},_):
     if (atts != NULL) Warn::err(loc,"attributes on enum not supported");
     ed->sc = s;
     return new List(new_decl(new Enum_d(ed),loc),NULL);
   case &TypeDeclType(&{.r = &Datatype_td(dd),...},_):
     if (atts != NULL) Warn::err(loc,"attributes on datatypes not supported");
     dd->sc = s;
     return new List(new_decl(new Datatype_d(dd),loc),NULL);
   case &AppType(&AggrCon({.UnknownAggr = $(k,n,_)}),ts):
     let ts2 = List::map_c(typ2tvar,loc,ts);
     let ad  = new Aggrdecl(k,s,n,ts2,NULL,NULL,false);
     if (atts != NULL) Warn::err(loc,"bad attributes on type declaration");
     return new List(new_decl(new Aggr_d(ad),loc),NULL);
   case &AppType(&DatatypeCon({.KnownDatatype = tudp}),_):
     if(atts != NULL) Warn::err(loc,"bad attributes on datatype");
     return new List(new_decl(new Datatype_d(*tudp),loc),NULL);
   case &AppType(&DatatypeCon({.UnknownDatatype = UnknownDatatypeInfo(n,isx)}),ts):
     let ts2 = List::map_c(typ2tvar,loc,ts);
     let tud = datatype_decl(s, n, ts2, NULL, isx, loc);
     if (atts != NULL) Warn::err(loc,"bad attributes on datatype");
     return new List(tud,NULL);
   case &AppType(&EnumCon(n,_),_):
     let ed = new Enumdecl{s,n,NULL};
     if (atts != NULL) Warn::err(loc,"bad attributes on enum");
     return new List(new Decl(new Enum_d(ed),loc),NULL);
   case &AppType(&AnonEnumCon(fs),_):
     // someone's written:  enum {A,B,C}; which is a perfectly good
     // way to declare symbolic constants A, B, and C.
     let ed = new Enumdecl{s,gensym_enum(),new Opt(fs)};
     if (atts != NULL) Warn::err(loc,"bad attributes on enum");
     return new List(new Decl(new Enum_d(ed),loc),NULL);
   default: Warn::err(loc,"missing declarator"); return NULL;
   }
 } else {
   // declarators != NULL
   let fields = apply_tmss(mkrgn,tq,base_type,declarators,atts);
   if (istypedef) {
     // we can have a nested struct, union, or datatype
     // declaration within the typedef as in:
     // typedef struct Foo {...} t;
     if (!exps_empty)
      Warn::err(loc,"initializer in typedef declaration");
     list_t<decl_t> decls = List::map_c(v_typ_to_typedef,loc,fields);
     return decls;
   } else {
     // here, we have a bunch of variable declarations
     list_t<decl_t> decls = NULL;
     for (let ds = fields; ds != NULL; ds = ds->tl, exprs = exprs->tl) {
       let &$(varloc,x,tq2,t2,tvs2,atts2) = ds->hd;
       if (tvs2 != NULL)
	 Warn::warn(loc,"bad type params, ignoring");
       if (exprs == NULL)
	 parse_abort(loc,"unexpected NULL in parse!");
       let eopt = exprs->hd;
       let vd   = new_vardecl(varloc,x, t2, eopt);
       vd->tq = tq2;
       vd->sc = s;
       vd->attributes = atts2;
       let d = new Decl(new Var_d(vd),loc);
       decls = new List(d,decls);
     }
     return List::imp_rev(decls);
   }
 }
}

// Convert an identifier to a kind
static kind_t id_to_kind(string_t s, seg_t loc) {
  if(strlen(s)==1 || strlen(s)==2)
    switch (s[0]) {
    case 'A': return &Tcutil::ak;
    case 'M': return &Tcutil::mk;
    case 'B': return &Tcutil::bk;
    case 'R': return &Tcutil::rk;
    case 'E': return &Tcutil::ek;
    case 'I': return &Tcutil::ik;
    case 'U': 
      switch (s[1]) {
      case 'R':	return &Tcutil::urk;
      case 'A': return &Tcutil::uak;
      case 'M': return &Tcutil::umk;
      case 'B': return &Tcutil::ubk;
      default: break;
      }
      break;
    case 'T':
      switch (s[1]) {
      case 'R':	return &Tcutil::trk;
      case 'A': return &Tcutil::tak;
      case 'M': return &Tcutil::tmk;
      case 'B': return &Tcutil::tbk;
      default: break;
      }
      break;
    default:  break;
  }
  Warn::err(loc,"bad kind: %s; strlen=%d",s,strlen(s));
  return &Tcutil::bk;
}

// extract a string from an expression
static string_t exp2string(seg_t loc, exp_t e) {
  switch (e->r) {
  case &Const_e({.String_c = s}): return s;
  default: 
    Warn::err(loc,"expecting string constant");
    return 0;
  }
}

// extract an unsigned integer from a cnst_t
static unsigned int cnst2uint(seg_t loc, cnst_t x) {
  switch (x) {
  case {.Int_c = $(_,i)}: return i;
  case {.Char_c = $(_,c)}: return (unsigned int)c;
  case {.LongLong_c = $(_,x)}:
    unsigned long long y = x;
    if (y > 0xffffffff) 
      Warn::err(loc,"integer constant too large");
    return (unsigned int)x;
  default:
    Warn::err(loc,"expected integer constant but found %s",Absynpp::cnst2string(x));
    return 0;
  }
}

// convert a pattern back into an expression 
static exp_t pat2exp(pat_t p) {
  switch (p->r) {
  case &UnknownId_p(x): return unknownid_exp(x,p->loc);
  case &Reference_p(vd,&Pat{.r = &Wild_p,...}): 
    return deref_exp(unknownid_exp(vd->name,p->loc),p->loc);
  case &Pointer_p(p2): return address_exp(pat2exp(p2),p->loc);
  case &Null_p: return null_exp(p->loc);
  case &Int_p(s,i): return int_exp(s,i,p->loc);
  case &Char_p(c): return char_exp(c,p->loc);
  case &Float_p(s,i): return float_exp(s,i,p->loc);
  case &UnknownCall_p(x,ps,false): 
    exp_t e1 = unknownid_exp(x,p->loc);
    list_t<exp_t> es = List::map(pat2exp,ps);
    return unknowncall_exp(e1,es,p->loc);
  case &Exp_p(e): return e;
  default: 
    Warn::err(p->loc,"cannot mix patterns and expressions in case");
    return null_exp(p->loc);
  }
}

} // end namespace Parse
using Parse;
@tagged union YYSTYPE <`yy::R>
{
  cnst_t Int_tok;
  char Char_tok;
  string_t<`H> String_tok;
  opt_t<stringptr_t<`H,`H>,`H> Stringopt_tok;
  qvar_t QualId_tok;
  $(bool,string_t<`H>) Asm_tok;
  exp_t Exp_tok;
  stmt_t Stmt_tok;
  $(Position::seg_t,booltype_t, ptrbound_t)@`H YY1;
  ptrbound_t YY2;
  list_t<offsetof_field_t,`H> YY3;
  list_t<exp_t,`H> YY4;
  list_t<$(list_t<designator_t,`H>,exp_t)@`H,`H> YY5;
  primop_t YY6;
  opt_t<primop_t,`H> YY7;
  list_t<switch_clause_t,`H> YY8;
  pat_t YY9;
  $(list_t<pat_t,`H>,bool)@`H YY10;
  list_t<pat_t,`H> YY11;
  $(list_t<designator_t,`H>,pat_t)@`H YY12;
  list_t<$(list_t<designator_t,`H>,pat_t)@`H,`H> YY13;
  $(list_t<$(list_t<designator_t,`H>,pat_t)@`H,`H>,bool)@`H YY14;
  fndecl_t YY15;
  list_t<decl_t,`H> YY16;
  decl_spec_t YY17;
  $(declarator_t<`yy>,exp_opt_t) YY18;
  declarator_list_t<`yy> YY19;
  storage_class_t@`H YY20;
  type_specifier_t YY21;
  aggr_kind_t YY22;
  tqual_t YY23;
  list_t<aggrfield_t,`H> YY24;
  list_t<list_t<aggrfield_t,`H>,`H> YY25;
  list_t<type_modifier_t<`yy>,`yy> YY26;
  declarator_t<`yy> YY27;
  $(declarator_t<`yy>,exp_opt_t,exp_opt_t)@`yy YY28;
  list_t<$(declarator_t<`yy>,exp_opt_t,exp_opt_t)@`yy,`yy> YY29;
  abstractdeclarator_t<`yy> YY30;
  bool YY31;
  scope_t YY32;
  datatypefield_t YY33;
  list_t<datatypefield_t,`H> YY34;
  $(tqual_t,type_specifier_t,attributes_t) YY35;
  list_t<var_t,`H> YY36;
  $(var_opt_t,tqual_t,type_t)@`H YY37;
  list_t<$(var_opt_t,tqual_t,type_t)@`H,`H> YY38;
  $(list_t<$(var_opt_t,tqual_t,type_t)@`H,`H>, bool,vararg_info_t *`H,type_opt_t, list_t<$(type_t,type_t)@`H,`H>)@`H YY39;
  types_t YY40;
  list_t<designator_t,`H> YY41;
  designator_t YY42;
  kind_t YY43;
  type_t YY44;
  list_t<attribute_t,`H> YY45;
  attribute_t YY46;
  enumfield_t YY47;
  list_t<enumfield_t,`H> YY48;
  type_opt_t YY49;
  list_t<$(type_t,type_t)@`H,`H> YY50;
  booltype_t YY51;
  list_t<$(Position::seg_t,qvar_t,bool)@`H,`H> YY52;
  $(list_t<$(Position::seg_t,qvar_t,bool)@`H,`H>, seg_t)@`H YY53;
  list_t<qvar_t,`H> YY54;
  pointer_qual_t<`yy> YY55;
  pointer_quals_t<`yy> YY56;
  exp_opt_t YY57;
  raw_exp_t YY58;
  $(list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<string_t<`H>@`H, `H>)@`H YY59;
  $(list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<string_t<`H>@`H, `H>)@`H YY60;
  list_t<string_t<`H>@`H, `H> YY61;
  list_t<$(string_t<`H>, exp_t)@`H, `H> YY62;
  $(string_t<`H>, exp_t)@`H YY63;
  list_t<type_t,`H> YY64;
  int YYINITIALSVAL;
};

#define YYSTYPEVARS <`yy::R>

static void yythrowfail(string_t<`H> s) __attribute__((noreturn)) {
 throw new Core::Failure(s);
 } 
#line 1079 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"

#line 1090 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static cnst_t yyget_Int_tok(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "cnst_t";
  switch(yy1) {
  case &{.Int_tok = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> Int_tok(cnst_t yy1) { return YYSTYPE{.Int_tok = yy1}; }
#line 1091 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static char yyget_Char_tok(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "char";
  switch(yy1) {
  case &{.Char_tok = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> Char_tok(char yy1) { return YYSTYPE{.Char_tok = yy1}; }
#line 1092 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static string_t<`H> yyget_String_tok(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "string_t<`H>";
  switch(yy1) {
  case &{.String_tok = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> String_tok(string_t<`H> yy1) { return YYSTYPE{.String_tok = yy1}; }
#line 1095 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static $(Position::seg_t,booltype_t, ptrbound_t)@`H yyget_YY1(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(Position::seg_t,booltype_t, ptrbound_t)@`H";
  switch(yy1) {
  case &{.YY1 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY1($(Position::seg_t,booltype_t, ptrbound_t)@`H yy1) { return YYSTYPE{.YY1 = yy1}; }
#line 1096 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static ptrbound_t yyget_YY2(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "ptrbound_t";
  switch(yy1) {
  case &{.YY2 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY2(ptrbound_t yy1) { return YYSTYPE{.YY2 = yy1}; }
#line 1097 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<offsetof_field_t,`H> yyget_YY3(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<offsetof_field_t,`H>";
  switch(yy1) {
  case &{.YY3 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY3(list_t<offsetof_field_t,`H> yy1) { return YYSTYPE{.YY3 = yy1}; }
#line 1098 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static exp_t yyget_Exp_tok(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "exp_t";
  switch(yy1) {
  case &{.Exp_tok = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> Exp_tok(exp_t yy1) { return YYSTYPE{.Exp_tok = yy1}; }
#line 1106 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<exp_t,`H> yyget_YY4(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<exp_t,`H>";
  switch(yy1) {
  case &{.YY4 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY4(list_t<exp_t,`H> yy1) { return YYSTYPE{.YY4 = yy1}; }
#line 1107 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<$(list_t<designator_t,`H>,exp_t)@`H,`H> yyget_YY5(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<$(list_t<designator_t,`H>,exp_t)@`H,`H>";
  switch(yy1) {
  case &{.YY5 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY5(list_t<$(list_t<designator_t,`H>,exp_t)@`H,`H> yy1) { return YYSTYPE{.YY5 = yy1}; }
#line 1108 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static primop_t yyget_YY6(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "primop_t";
  switch(yy1) {
  case &{.YY6 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY6(primop_t yy1) { return YYSTYPE{.YY6 = yy1}; }
#line 1109 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static opt_t<primop_t,`H> yyget_YY7(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "opt_t<primop_t,`H>";
  switch(yy1) {
  case &{.YY7 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY7(opt_t<primop_t,`H> yy1) { return YYSTYPE{.YY7 = yy1}; }
#line 1110 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static qvar_t yyget_QualId_tok(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "qvar_t";
  switch(yy1) {
  case &{.QualId_tok = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> QualId_tok(qvar_t yy1) { return YYSTYPE{.QualId_tok = yy1}; }
#line 1113 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static stmt_t yyget_Stmt_tok(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "stmt_t";
  switch(yy1) {
  case &{.Stmt_tok = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> Stmt_tok(stmt_t yy1) { return YYSTYPE{.Stmt_tok = yy1}; }
#line 1117 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<switch_clause_t,`H> yyget_YY8(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<switch_clause_t,`H>";
  switch(yy1) {
  case &{.YY8 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY8(list_t<switch_clause_t,`H> yy1) { return YYSTYPE{.YY8 = yy1}; }
#line 1118 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static pat_t yyget_YY9(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "pat_t";
  switch(yy1) {
  case &{.YY9 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY9(pat_t yy1) { return YYSTYPE{.YY9 = yy1}; }
#line 1123 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static $(list_t<pat_t,`H>,bool)@`H yyget_YY10(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(list_t<pat_t,`H>,bool)@`H";
  switch(yy1) {
  case &{.YY10 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY10($(list_t<pat_t,`H>,bool)@`H yy1) { return YYSTYPE{.YY10 = yy1}; }
#line 1124 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<pat_t,`H> yyget_YY11(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<pat_t,`H>";
  switch(yy1) {
  case &{.YY11 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY11(list_t<pat_t,`H> yy1) { return YYSTYPE{.YY11 = yy1}; }
#line 1125 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static $(list_t<designator_t,`H>,pat_t)@`H yyget_YY12(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(list_t<designator_t,`H>,pat_t)@`H";
  switch(yy1) {
  case &{.YY12 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY12($(list_t<designator_t,`H>,pat_t)@`H yy1) { return YYSTYPE{.YY12 = yy1}; }
#line 1126 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<$(list_t<designator_t,`H>,pat_t)@`H,`H> yyget_YY13(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<$(list_t<designator_t,`H>,pat_t)@`H,`H>";
  switch(yy1) {
  case &{.YY13 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY13(list_t<$(list_t<designator_t,`H>,pat_t)@`H,`H> yy1) { return YYSTYPE{.YY13 = yy1}; }
#line 1127 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static $(list_t<$(list_t<designator_t,`H>,pat_t)@`H,`H>,bool)@`H yyget_YY14(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(list_t<$(list_t<designator_t,`H>,pat_t)@`H,`H>,bool)@`H";
  switch(yy1) {
  case &{.YY14 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY14($(list_t<$(list_t<designator_t,`H>,pat_t)@`H,`H>,bool)@`H yy1) { return YYSTYPE{.YY14 = yy1}; }
#line 1128 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static fndecl_t yyget_YY15(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "fndecl_t";
  switch(yy1) {
  case &{.YY15 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY15(fndecl_t yy1) { return YYSTYPE{.YY15 = yy1}; }
#line 1129 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<decl_t,`H> yyget_YY16(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<decl_t,`H>";
  switch(yy1) {
  case &{.YY16 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY16(list_t<decl_t,`H> yy1) { return YYSTYPE{.YY16 = yy1}; }
#line 1132 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static decl_spec_t yyget_YY17(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "decl_spec_t";
  switch(yy1) {
  case &{.YY17 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY17(decl_spec_t yy1) { return YYSTYPE{.YY17 = yy1}; }
#line 1133 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static $(declarator_t<`yy>,exp_opt_t) yyget_YY18(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(declarator_t<`yy>,exp_opt_t)";
  switch(yy1) {
  case &{.YY18 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY18($(declarator_t<`yy>,exp_opt_t) yy1) { return YYSTYPE{.YY18 = yy1}; }
#line 1134 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static declarator_list_t<`yy> yyget_YY19(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "declarator_list_t<`yy>";
  switch(yy1) {
  case &{.YY19 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY19(declarator_list_t<`yy> yy1) { return YYSTYPE{.YY19 = yy1}; }
#line 1135 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static storage_class_t@`H yyget_YY20(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "storage_class_t@`H";
  switch(yy1) {
  case &{.YY20 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY20(storage_class_t@`H yy1) { return YYSTYPE{.YY20 = yy1}; }
#line 1136 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static type_specifier_t yyget_YY21(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "type_specifier_t";
  switch(yy1) {
  case &{.YY21 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY21(type_specifier_t yy1) { return YYSTYPE{.YY21 = yy1}; }
#line 1138 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static aggr_kind_t yyget_YY22(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "aggr_kind_t";
  switch(yy1) {
  case &{.YY22 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY22(aggr_kind_t yy1) { return YYSTYPE{.YY22 = yy1}; }
#line 1139 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static tqual_t yyget_YY23(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "tqual_t";
  switch(yy1) {
  case &{.YY23 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY23(tqual_t yy1) { return YYSTYPE{.YY23 = yy1}; }
#line 1140 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<aggrfield_t,`H> yyget_YY24(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<aggrfield_t,`H>";
  switch(yy1) {
  case &{.YY24 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY24(list_t<aggrfield_t,`H> yy1) { return YYSTYPE{.YY24 = yy1}; }
#line 1141 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<list_t<aggrfield_t,`H>,`H> yyget_YY25(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<list_t<aggrfield_t,`H>,`H>";
  switch(yy1) {
  case &{.YY25 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY25(list_t<list_t<aggrfield_t,`H>,`H> yy1) { return YYSTYPE{.YY25 = yy1}; }
#line 1142 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<type_modifier_t<`yy>,`yy> yyget_YY26(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<type_modifier_t<`yy>,`yy>";
  switch(yy1) {
  case &{.YY26 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY26(list_t<type_modifier_t<`yy>,`yy> yy1) { return YYSTYPE{.YY26 = yy1}; }
#line 1143 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static declarator_t<`yy> yyget_YY27(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "declarator_t<`yy>";
  switch(yy1) {
  case &{.YY27 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY27(declarator_t<`yy> yy1) { return YYSTYPE{.YY27 = yy1}; }
#line 1144 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static $(declarator_t<`yy>,exp_opt_t,exp_opt_t)@`yy yyget_YY28(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(declarator_t<`yy>,exp_opt_t,exp_opt_t)@`yy";
  switch(yy1) {
  case &{.YY28 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY28($(declarator_t<`yy>,exp_opt_t,exp_opt_t)@`yy yy1) { return YYSTYPE{.YY28 = yy1}; }
#line 1145 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<$(declarator_t<`yy>,exp_opt_t,exp_opt_t)@`yy,`yy> yyget_YY29(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<$(declarator_t<`yy>,exp_opt_t,exp_opt_t)@`yy,`yy>";
  switch(yy1) {
  case &{.YY29 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY29(list_t<$(declarator_t<`yy>,exp_opt_t,exp_opt_t)@`yy,`yy> yy1) { return YYSTYPE{.YY29 = yy1}; }
#line 1146 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static abstractdeclarator_t<`yy> yyget_YY30(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "abstractdeclarator_t<`yy>";
  switch(yy1) {
  case &{.YY30 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY30(abstractdeclarator_t<`yy> yy1) { return YYSTYPE{.YY30 = yy1}; }
#line 1147 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static bool yyget_YY31(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "bool";
  switch(yy1) {
  case &{.YY31 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY31(bool yy1) { return YYSTYPE{.YY31 = yy1}; }
#line 1148 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static scope_t yyget_YY32(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "scope_t";
  switch(yy1) {
  case &{.YY32 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY32(scope_t yy1) { return YYSTYPE{.YY32 = yy1}; }
#line 1149 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static datatypefield_t yyget_YY33(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "datatypefield_t";
  switch(yy1) {
  case &{.YY33 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY33(datatypefield_t yy1) { return YYSTYPE{.YY33 = yy1}; }
#line 1150 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<datatypefield_t,`H> yyget_YY34(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<datatypefield_t,`H>";
  switch(yy1) {
  case &{.YY34 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY34(list_t<datatypefield_t,`H> yy1) { return YYSTYPE{.YY34 = yy1}; }
#line 1151 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static $(tqual_t,type_specifier_t,attributes_t) yyget_YY35(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(tqual_t,type_specifier_t,attributes_t)";
  switch(yy1) {
  case &{.YY35 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY35($(tqual_t,type_specifier_t,attributes_t) yy1) { return YYSTYPE{.YY35 = yy1}; }
#line 1152 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<var_t,`H> yyget_YY36(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<var_t,`H>";
  switch(yy1) {
  case &{.YY36 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY36(list_t<var_t,`H> yy1) { return YYSTYPE{.YY36 = yy1}; }
#line 1153 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static $(var_opt_t,tqual_t,type_t)@`H yyget_YY37(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(var_opt_t,tqual_t,type_t)@`H";
  switch(yy1) {
  case &{.YY37 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY37($(var_opt_t,tqual_t,type_t)@`H yy1) { return YYSTYPE{.YY37 = yy1}; }
#line 1154 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<$(var_opt_t,tqual_t,type_t)@`H,`H> yyget_YY38(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<$(var_opt_t,tqual_t,type_t)@`H,`H>";
  switch(yy1) {
  case &{.YY38 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY38(list_t<$(var_opt_t,tqual_t,type_t)@`H,`H> yy1) { return YYSTYPE{.YY38 = yy1}; }
#line 1155 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static $(list_t<$(var_opt_t,tqual_t,type_t)@`H,`H>, bool,vararg_info_t *`H,type_opt_t, list_t<$(type_t,type_t)@`H,`H>)@`H yyget_YY39(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(list_t<$(var_opt_t,tqual_t,type_t)@`H,`H>, bool,vararg_info_t *`H,type_opt_t, list_t<$(type_t,type_t)@`H,`H>)@`H";
  switch(yy1) {
  case &{.YY39 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY39($(list_t<$(var_opt_t,tqual_t,type_t)@`H,`H>, bool,vararg_info_t *`H,type_opt_t, list_t<$(type_t,type_t)@`H,`H>)@`H yy1) { return YYSTYPE{.YY39 = yy1}; }
#line 1156 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static types_t yyget_YY40(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "types_t";
  switch(yy1) {
  case &{.YY40 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY40(types_t yy1) { return YYSTYPE{.YY40 = yy1}; }
#line 1158 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<designator_t,`H> yyget_YY41(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<designator_t,`H>";
  switch(yy1) {
  case &{.YY41 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY41(list_t<designator_t,`H> yy1) { return YYSTYPE{.YY41 = yy1}; }
#line 1159 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static designator_t yyget_YY42(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "designator_t";
  switch(yy1) {
  case &{.YY42 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY42(designator_t yy1) { return YYSTYPE{.YY42 = yy1}; }
#line 1160 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static kind_t yyget_YY43(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "kind_t";
  switch(yy1) {
  case &{.YY43 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY43(kind_t yy1) { return YYSTYPE{.YY43 = yy1}; }
#line 1161 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static type_t yyget_YY44(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "type_t";
  switch(yy1) {
  case &{.YY44 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY44(type_t yy1) { return YYSTYPE{.YY44 = yy1}; }
#line 1162 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<attribute_t,`H> yyget_YY45(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<attribute_t,`H>";
  switch(yy1) {
  case &{.YY45 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY45(list_t<attribute_t,`H> yy1) { return YYSTYPE{.YY45 = yy1}; }
#line 1163 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static attribute_t yyget_YY46(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "attribute_t";
  switch(yy1) {
  case &{.YY46 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY46(attribute_t yy1) { return YYSTYPE{.YY46 = yy1}; }
#line 1164 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static enumfield_t yyget_YY47(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "enumfield_t";
  switch(yy1) {
  case &{.YY47 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY47(enumfield_t yy1) { return YYSTYPE{.YY47 = yy1}; }
#line 1165 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<enumfield_t,`H> yyget_YY48(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<enumfield_t,`H>";
  switch(yy1) {
  case &{.YY48 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY48(list_t<enumfield_t,`H> yy1) { return YYSTYPE{.YY48 = yy1}; }
#line 1166 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static type_opt_t yyget_YY49(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "type_opt_t";
  switch(yy1) {
  case &{.YY49 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY49(type_opt_t yy1) { return YYSTYPE{.YY49 = yy1}; }
#line 1167 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<$(type_t,type_t)@`H,`H> yyget_YY50(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<$(type_t,type_t)@`H,`H>";
  switch(yy1) {
  case &{.YY50 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY50(list_t<$(type_t,type_t)@`H,`H> yy1) { return YYSTYPE{.YY50 = yy1}; }
#line 1168 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static booltype_t yyget_YY51(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "booltype_t";
  switch(yy1) {
  case &{.YY51 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY51(booltype_t yy1) { return YYSTYPE{.YY51 = yy1}; }
#line 1169 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<$(Position::seg_t,qvar_t,bool)@`H,`H> yyget_YY52(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<$(Position::seg_t,qvar_t,bool)@`H,`H>";
  switch(yy1) {
  case &{.YY52 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY52(list_t<$(Position::seg_t,qvar_t,bool)@`H,`H> yy1) { return YYSTYPE{.YY52 = yy1}; }
#line 1170 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static $(list_t<$(Position::seg_t,qvar_t,bool)@`H,`H>, seg_t)@`H yyget_YY53(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(list_t<$(Position::seg_t,qvar_t,bool)@`H,`H>, seg_t)@`H";
  switch(yy1) {
  case &{.YY53 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY53($(list_t<$(Position::seg_t,qvar_t,bool)@`H,`H>, seg_t)@`H yy1) { return YYSTYPE{.YY53 = yy1}; }
#line 1171 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<qvar_t,`H> yyget_YY54(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<qvar_t,`H>";
  switch(yy1) {
  case &{.YY54 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY54(list_t<qvar_t,`H> yy1) { return YYSTYPE{.YY54 = yy1}; }
#line 1172 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static pointer_qual_t<`yy> yyget_YY55(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "pointer_qual_t<`yy>";
  switch(yy1) {
  case &{.YY55 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY55(pointer_qual_t<`yy> yy1) { return YYSTYPE{.YY55 = yy1}; }
#line 1173 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static pointer_quals_t<`yy> yyget_YY56(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "pointer_quals_t<`yy>";
  switch(yy1) {
  case &{.YY56 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY56(pointer_quals_t<`yy> yy1) { return YYSTYPE{.YY56 = yy1}; }
#line 1174 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static exp_opt_t yyget_YY57(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "exp_opt_t";
  switch(yy1) {
  case &{.YY57 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY57(exp_opt_t yy1) { return YYSTYPE{.YY57 = yy1}; }
#line 1175 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static raw_exp_t yyget_YY58(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "raw_exp_t";
  switch(yy1) {
  case &{.YY58 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY58(raw_exp_t yy1) { return YYSTYPE{.YY58 = yy1}; }
#line 1177 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static $(list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<string_t<`H>@`H, `H>)@`H yyget_YY59(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<string_t<`H>@`H, `H>)@`H";
  switch(yy1) {
  case &{.YY59 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY59($(list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<string_t<`H>@`H, `H>)@`H yy1) { return YYSTYPE{.YY59 = yy1}; }
#line 1178 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static $(list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<string_t<`H>@`H, `H>)@`H yyget_YY60(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<string_t<`H>@`H, `H>)@`H";
  switch(yy1) {
  case &{.YY60 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY60($(list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<string_t<`H>@`H, `H>)@`H yy1) { return YYSTYPE{.YY60 = yy1}; }
#line 1179 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<string_t<`H>@`H, `H> yyget_YY61(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<string_t<`H>@`H, `H>";
  switch(yy1) {
  case &{.YY61 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY61(list_t<string_t<`H>@`H, `H> yy1) { return YYSTYPE{.YY61 = yy1}; }
#line 1180 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<$(string_t<`H>, exp_t)@`H, `H> yyget_YY62(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<$(string_t<`H>, exp_t)@`H, `H>";
  switch(yy1) {
  case &{.YY62 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY62(list_t<$(string_t<`H>, exp_t)@`H, `H> yy1) { return YYSTYPE{.YY62 = yy1}; }
#line 1181 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static $(string_t<`H>, exp_t)@`H yyget_YY63(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(string_t<`H>, exp_t)@`H";
  switch(yy1) {
  case &{.YY63 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY63($(string_t<`H>, exp_t)@`H yy1) { return YYSTYPE{.YY63 = yy1}; }
#line 1183 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
static list_t<type_t,`H> yyget_YY64(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<type_t,`H>";
  switch(yy1) {
  case &{.YY64 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY64(list_t<type_t,`H> yy1) { return YYSTYPE{.YY64 = yy1}; }
#define YYMAXRULELENGTH 12

#ifndef YYLTYPE
struct Yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
   };
typedef struct Yyltype yyltype;


#define YYLTYPE yyltype
YYLTYPE yynewloc() { 
  return Yyltype{0,0,0,0,0}; 
}
yyltype yylloc=Yyltype{0,0,0,0,0};
#endif



#define	YYFINAL		1169
#define	YYFLAG		-32768
#define	YYNTBASE	154

#define YYTRANSLATE(x) (((x)>0) && ((x) <= 381) ? yytranslate[x] : 319)

static short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   153,     2,     2,   138,   151,   148,     2,   135,
   136,   131,   145,   130,   149,   140,   150,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   139,   127,   133,
   132,   134,   144,   143,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   141,     2,   142,   147,   137,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   128,   146,   129,   152,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126
};

#if YYDEBUG != 0
static short yyprhs[] = {     0,
     0,     2,     5,     9,    15,    19,    25,    34,    38,    42,
    46,    50,    51,    53,    55,    58,    60,    61,    66,    68,
    71,    75,    76,    78,    83,    87,    92,    94,    97,   101,
   102,   107,   109,   111,   113,   115,   116,   120,   125,   130,
   136,   140,   145,   148,   150,   153,   155,   158,   162,   168,
   172,   179,   183,   192,   194,   197,   199,   202,   205,   207,
   210,   212,   215,   217,   220,   222,   225,   227,   229,   231,
   233,   236,   238,   240,   241,   243,   250,   252,   256,   258,
   260,   265,   274,   276,   279,   281,   283,   285,   287,   289,
   291,   293,   295,   297,   299,   301,   306,   308,   310,   312,
   314,   318,   323,   328,   330,   335,   337,   342,   344,   346,
   348,   350,   356,   359,   364,   366,   370,   372,   375,   379,
   384,   394,   403,   408,   412,   413,   417,   419,   421,   422,
   424,   426,   429,   431,   433,   437,   439,   443,   447,   449,
   452,   454,   457,   459,   462,   464,   467,   469,   472,   474,
   477,   479,   481,   485,   488,   491,   492,   496,   501,   502,
   506,   512,   517,   518,   523,   524,   529,   530,   537,   541,
   547,   549,   552,   554,   557,   561,   565,   566,   568,   570,
   573,   579,   581,   584,   586,   589,   591,   595,   600,   605,
   611,   620,   630,   635,   640,   643,   645,   647,   651,   656,
   661,   667,   676,   686,   691,   696,   699,   701,   704,   710,
   711,   714,   719,   724,   726,   728,   730,   732,   734,   736,
   739,   742,   744,   745,   749,   750,   752,   754,   755,   757,
   759,   760,   763,   767,   773,   779,   787,   789,   793,   794,
   797,   798,   801,   805,   811,   812,   814,   816,   820,   823,
   827,   832,   834,   836,   840,   842,   846,   849,   851,   854,
   856,   858,   862,   864,   866,   869,   873,   878,   887,   896,
   898,   901,   905,   910,   913,   916,   918,   921,   925,   928,
   930,   933,   935,   938,   942,   947,   951,   953,   957,   959,
   961,   964,   968,   972,   977,   982,   988,   997,  1005,  1015,
  1024,  1029,  1032,  1034,  1036,  1038,  1040,  1042,  1044,  1048,
  1050,  1053,  1056,  1060,  1062,  1065,  1069,  1074,  1076,  1079,
  1081,  1084,  1090,  1098,  1106,  1112,  1121,  1128,  1129,  1134,
  1139,  1145,  1152,  1160,  1166,  1174,  1181,  1189,  1197,  1206,
  1214,  1223,  1232,  1242,  1249,  1257,  1265,  1274,  1278,  1281,
  1284,  1287,  1291,  1294,  1299,  1305,  1307,  1309,  1315,  1317,
  1321,  1323,  1327,  1329,  1333,  1335,  1339,  1341,  1345,  1347,
  1351,  1355,  1357,  1361,  1365,  1369,  1373,  1375,  1379,  1383,
  1385,  1389,  1393,  1395,  1399,  1403,  1407,  1409,  1414,  1416,
  1419,  1422,  1427,  1430,  1437,  1439,  1441,  1443,  1447,  1449,
  1451,  1455,  1462,  1469,  1474,  1479,  1485,  1490,  1493,  1496,
  1499,  1504,  1509,  1514,  1516,  1520,  1522,  1524,  1528,  1530,
  1533,  1535,  1539,  1541,  1543,  1547,  1549,  1553,  1555,  1559,
  1563,  1565,  1567,  1569,  1571,  1573,  1575,  1577,  1579,  1581,
  1583,  1585,  1587,  1593,  1596,  1599,  1602,  1608,  1614,  1616,
  1618,  1622,  1624,  1628,  1630,  1634,  1636,  1640,  1642,  1646,
  1648,  1652,  1656,  1658,  1662,  1666,  1670,  1674,  1676,  1680,
  1684,  1686,  1690,  1694,  1696,  1700,  1704,  1708,  1710,  1715,
  1717,  1720,  1723,  1726,  1729,  1732,  1735,  1740,  1743,  1750,
  1757,  1762,  1769,  1776,  1786,  1798,  1803,  1810,  1817,  1822,
  1825,  1828,  1834,  1835,  1837,  1838,  1841,  1845,  1847,  1851,
  1852,  1855,  1859,  1861,  1865,  1870,  1871,  1873,  1876,  1878,
  1882,  1884,  1886,  1888,  1890,  1895,  1899,  1904,  1908,  1912,
  1915,  1918,  1924,  1931,  1939,  1941,  1943,  1947,  1951,  1953,
  1958,  1960,  1962,  1964,  1968,  1971,  1977,  1982,  1988,  1994,
  1996,  1998,  2002,  2004,  2006,  2008,  2010,  2012,  2014,  2016,
  2018,  2020,  2022,  2024,  2026,  2028,  2030
};

static short yyrhs[] = {   155,
     0,   166,   155,     0,   170,   127,   155,     0,   170,   128,
   155,   171,   155,     0,   172,   127,   155,     0,   172,   128,
   155,   173,   155,     0,   158,   128,   155,   159,   165,   162,
   160,   155,     0,    67,   127,   155,     0,    68,   127,   155,
     0,   156,   127,   155,     0,   157,   127,   155,     0,     0,
    70,     0,    71,     0,     6,   116,     0,   129,     0,     0,
    48,   128,   161,   129,     0,   316,     0,   316,   127,     0,
   316,   130,   161,     0,     0,   163,     0,    46,   128,   164,
   129,     0,    46,   128,   129,     0,    46,   128,   131,   129,
     0,   316,     0,   316,   127,     0,   316,   130,   164,     0,
     0,    47,   128,   155,   129,     0,   168,     0,   174,     0,
     1,     0,   127,     0,     0,   213,   253,   167,     0,   176,
   213,   253,   167,     0,   213,   175,   253,   167,     0,   176,
   213,   175,   253,   167,     0,   176,   213,   253,     0,   176,
   213,   175,   253,     0,    52,   314,     0,   129,     0,    53,
   114,     0,   129,     0,   176,   127,     0,   176,   194,   127,
     0,    42,   275,   132,   281,   127,     0,    42,   237,   127,
     0,    64,   133,   121,   134,   114,   127,     0,    64,   114,
   127,     0,    64,   114,   132,   114,   135,   281,   136,   127,
     0,   174,     0,   175,   174,     0,   177,     0,   177,   176,
     0,    40,   176,     0,   182,     0,   182,   176,     0,   185,
     0,   185,   176,     0,    24,     0,    24,   176,     0,   179,
     0,   179,   176,     0,     3,     0,     4,     0,     5,     0,
     6,     0,     6,   116,     0,     7,     0,    50,     0,     0,
   179,     0,   125,   135,   135,   180,   136,   136,     0,   181,
     0,   181,   130,   180,     0,   114,     0,    17,     0,   114,
   135,   282,   136,     0,   114,   135,   114,   130,   115,   130,
   115,   136,     0,   183,     0,   315,   190,     0,     8,     0,
     9,     0,    10,     0,    11,     0,    12,     0,    13,     0,
    14,     0,    15,     0,    16,     0,   186,     0,   189,     0,
    38,   135,   281,   136,     0,    39,     0,   208,     0,   227,
     0,   137,     0,   137,   113,   184,     0,   138,   135,   235,
   136,     0,    62,   133,   246,   318,     0,    62,     0,    63,
   133,   246,   318,     0,    63,     0,    74,   135,   281,   136,
     0,   317,     0,    17,     0,    18,     0,    19,     0,    37,
   314,   128,   188,   129,     0,    37,   314,     0,    37,   128,
   188,   129,     0,   314,     0,   314,   132,   285,     0,   187,
     0,   187,   130,     0,   187,   130,   188,     0,   191,   128,
   192,   129,     0,    88,   191,   316,   190,   128,   190,   229,
   192,   129,     0,   191,   316,   190,   128,   190,   229,   192,
   129,     0,    88,   191,   316,   190,     0,   191,   316,   190,
     0,     0,   133,   247,   318,     0,    20,     0,    21,     0,
     0,   193,     0,   197,     0,   193,   197,     0,   195,     0,
   196,     0,   195,   130,   196,     0,   213,     0,   213,   132,
   239,     0,   198,   200,   127,     0,   182,     0,   182,   199,
     0,   185,     0,   185,   198,     0,   179,     0,   179,   198,
     0,   183,     0,   183,   199,     0,   185,     0,   185,   199,
     0,   179,     0,   179,   199,     0,   201,     0,   202,     0,
   201,   130,   202,     0,   214,   203,     0,   139,   285,     0,
     0,   214,   139,   285,     0,    81,   135,   285,   136,     0,
     0,   128,   247,   129,     0,   204,   130,   128,   247,   129,
     0,    83,   135,   204,   136,     0,     0,    84,   135,   204,
   136,     0,     0,    82,   135,   285,   136,     0,     0,   209,
   314,   190,   128,   210,   129,     0,   209,   314,   190,     0,
   209,   314,   140,   314,   190,     0,    54,     0,    89,    54,
     0,   212,     0,   212,   127,     0,   212,   130,   210,     0,
   212,   127,   210,     0,     0,     6,     0,     5,     0,   211,
   314,     0,   211,   314,   135,   235,   136,     0,   215,     0,
   217,   215,     0,   216,     0,   217,   216,     0,   314,     0,
   135,   213,   136,     0,   135,   179,   213,   136,     0,   215,
   141,   142,   223,     0,   215,   141,   282,   142,   223,     0,
   215,   135,   226,   136,   203,   207,   205,   206,     0,   215,
   135,   228,   229,   136,   203,   207,   205,   206,     0,   215,
   135,   237,   136,     0,   215,   133,   247,   318,     0,   215,
   179,     0,   314,     0,   315,     0,   135,   214,   136,     0,
   135,   179,   214,   136,     0,   216,   141,   142,   223,     0,
   216,   141,   282,   142,   223,     0,   216,   135,   226,   136,
   203,   207,   205,   206,     0,   216,   135,   228,   229,   136,
   203,   207,   205,   206,     0,   216,   135,   237,   136,     0,
   216,   133,   247,   318,     0,   216,   179,     0,   218,     0,
   218,   217,     0,   221,   219,   224,   178,   225,     0,     0,
   220,   219,     0,    76,   135,   282,   136,     0,    85,   135,
   246,   136,     0,    77,     0,    78,     0,    87,     0,    86,
     0,    79,     0,    80,     0,   131,   222,     0,   143,   222,
     0,   144,     0,     0,   128,   282,   129,     0,     0,    87,
     0,    86,     0,     0,   227,     0,   137,     0,     0,   185,
   225,     0,   235,   228,   229,     0,   235,   130,   111,   228,
   229,     0,   111,   231,   236,   228,   229,     0,   235,   130,
   111,   231,   236,   228,   229,     0,   121,     0,   121,   113,
   184,     0,     0,   127,   232,     0,     0,   139,   230,     0,
   233,   134,   121,     0,   233,   134,   121,   130,   230,     0,
     0,   114,     0,   233,     0,   233,   145,   232,     0,   128,
   129,     0,   128,   234,   129,     0,    66,   135,   246,   136,
     0,   227,     0,   245,     0,   245,   130,   234,     0,   236,
     0,   235,   130,   236,     0,   198,   214,     0,   198,     0,
   198,   248,     0,   238,     0,   114,     0,   238,   130,   114,
     0,   282,     0,   240,     0,   128,   129,     0,   128,   241,
   129,     0,   128,   241,   130,   129,     0,   128,    32,   114,
   133,   281,   139,   281,   129,     0,   128,    32,   114,   133,
   281,   139,   245,   129,     0,   239,     0,   242,   239,     0,
   241,   130,   239,     0,   241,   130,   242,   239,     0,   243,
   132,     0,   317,   139,     0,   244,     0,   243,   244,     0,
   141,   285,   142,     0,   140,   317,     0,   198,     0,   198,
   248,     0,   245,     0,   128,   129,     0,   128,   234,   129,
     0,    66,   135,   246,   136,     0,   246,   145,   233,     0,
   246,     0,   247,   130,   246,     0,   217,     0,   249,     0,
   217,   249,     0,   135,   248,   136,     0,   141,   142,   223,
     0,   249,   141,   142,   223,     0,   141,   282,   142,   223,
     0,   249,   141,   282,   142,   223,     0,   135,   228,   229,
   136,   203,   207,   205,   206,     0,   135,   226,   136,   203,
   207,   205,   206,     0,   249,   135,   228,   229,   136,   203,
   207,   205,   206,     0,   249,   135,   226,   136,   203,   207,
   205,   206,     0,   249,   133,   247,   318,     0,   249,   179,
     0,   251,     0,   252,     0,   253,     0,   255,     0,   257,
     0,   258,     0,   114,   139,   250,     0,   127,     0,   281,
   127,     0,   128,   129,     0,   128,   254,   129,     0,   174,
     0,   174,   254,     0,   114,   139,   174,     0,   114,   139,
   174,   254,     0,   250,     0,   250,   254,     0,   169,     0,
   169,   254,     0,    27,   135,   281,   136,   250,     0,    27,
   135,   281,   136,   250,    28,   250,     0,    29,   135,   281,
   136,   128,   256,   129,     0,    29,   314,   128,   256,   129,
     0,    29,   138,   135,   311,   136,   128,   256,   129,     0,
    44,   250,    45,   128,   256,   129,     0,     0,    23,   139,
   254,   256,     0,    22,   259,   139,   256,     0,    22,   259,
   139,   254,   256,     0,    22,   275,    99,   281,   139,   256,
     0,    22,   275,    99,   281,   139,   254,   256,     0,    30,
   135,   281,   136,   250,     0,    31,   250,    30,   135,   281,
   136,   127,     0,    32,   135,   127,   127,   136,   250,     0,
    32,   135,   127,   127,   281,   136,   250,     0,    32,   135,
   127,   281,   127,   136,   250,     0,    32,   135,   127,   281,
   127,   281,   136,   250,     0,    32,   135,   281,   127,   127,
   136,   250,     0,    32,   135,   281,   127,   127,   281,   136,
   250,     0,    32,   135,   281,   127,   281,   127,   136,   250,
     0,    32,   135,   281,   127,   281,   127,   281,   136,   250,
     0,    32,   135,   174,   127,   136,   250,     0,    32,   135,
   174,   281,   127,   136,   250,     0,    32,   135,   174,   127,
   281,   136,   250,     0,    32,   135,   174,   281,   127,   281,
   136,   250,     0,    33,   114,   127,     0,    34,   127,     0,
    35,   127,     0,    36,   127,     0,    36,   281,   127,     0,
    51,   127,     0,    51,   135,   136,   127,     0,    51,   135,
   311,   136,   127,     0,   260,     0,   261,     0,   261,   144,
   281,   139,   284,     0,   262,     0,   261,   100,   287,     0,
   263,     0,   263,    99,   288,     0,   264,     0,   264,   146,
   289,     0,   265,     0,   265,   147,   289,     0,   266,     0,
   265,   148,   291,     0,   267,     0,   266,    97,   292,     0,
   266,    98,   292,     0,   268,     0,   267,   133,   293,     0,
   267,   134,   293,     0,   267,    95,   293,     0,   267,    96,
   293,     0,   269,     0,   268,    93,   294,     0,   268,    94,
   294,     0,   270,     0,   269,   145,   295,     0,   269,   149,
   295,     0,   271,     0,   270,   131,   296,     0,   270,   150,
   296,     0,   270,   151,   296,     0,   272,     0,   135,   245,
   136,   296,     0,   273,     0,   145,   296,     0,   307,   296,
     0,    25,   135,   245,   136,     0,    25,   297,     0,    26,
   135,   245,   130,   309,   136,     0,   274,     0,   275,     0,
   137,     0,   135,   281,   136,     0,   313,     0,   314,     0,
   114,   114,   275,     0,   114,   133,   121,   134,   245,   114,
     0,   122,   133,   121,   134,   245,   114,     0,   138,   135,
   276,   136,     0,   314,   135,   276,   136,     0,   314,   128,
   190,   279,   129,     0,   128,   190,   279,   129,     0,   148,
   275,     0,    99,   275,     0,   131,   114,     0,   131,   114,
   114,   275,     0,   114,   133,   121,   134,     0,   114,   133,
   137,   134,     0,   277,     0,   277,   130,   111,     0,   111,
     0,   275,     0,   277,   130,   275,     0,   275,     0,   242,
   275,     0,   280,     0,   280,   130,   111,     0,   111,     0,
   278,     0,   280,   130,   278,     0,   282,     0,   281,   130,
   282,     0,   284,     0,   297,   283,   282,     0,   297,    61,
   282,     0,   132,     0,   101,     0,   102,     0,   103,     0,
   104,     0,   105,     0,   106,     0,   107,     0,   108,     0,
   109,     0,   110,     0,   286,     0,   286,   144,   281,   139,
   284,     0,    43,   284,     0,    49,   240,     0,    49,   286,
     0,    65,   135,   281,   136,   240,     0,    65,   135,   281,
   136,   286,     0,   284,     0,   287,     0,   286,   100,   287,
     0,   288,     0,   287,    99,   288,     0,   289,     0,   288,
   146,   289,     0,   290,     0,   289,   147,   290,     0,   291,
     0,   290,   148,   291,     0,   292,     0,   291,    97,   292,
     0,   291,    98,   292,     0,   293,     0,   292,   133,   293,
     0,   292,   134,   293,     0,   292,    95,   293,     0,   292,
    96,   293,     0,   294,     0,   293,    93,   294,     0,   293,
    94,   294,     0,   295,     0,   294,   145,   295,     0,   294,
   149,   295,     0,   296,     0,   295,   131,   296,     0,   295,
   150,   296,     0,   295,   151,   296,     0,   297,     0,   135,
   245,   136,   296,     0,   308,     0,    91,   297,     0,    92,
   297,     0,   148,   296,     0,   131,   296,     0,   145,   296,
     0,   307,   296,     0,    25,   135,   245,   136,     0,    25,
   297,     0,    26,   135,   245,   130,   309,   136,     0,    55,
   135,   282,   130,   282,   136,     0,    56,   135,   282,   136,
     0,    57,   135,   282,   130,   282,   136,     0,    58,   135,
   282,   130,   282,   136,     0,    59,   135,   282,   130,    25,
   135,   245,   136,   136,     0,    60,   135,   282,   130,   282,
   130,    25,   135,   245,   136,   136,     0,    72,   135,   282,
   136,     0,    75,   135,   308,   140,   317,   136,     0,    75,
   135,   308,    90,   317,   136,     0,    73,   135,   245,   136,
     0,   126,   298,     0,    40,   297,     0,   299,   135,   116,
   300,   136,     0,     0,    18,     0,     0,   139,   302,     0,
   139,   301,   302,     0,   304,     0,   301,   130,   304,     0,
     0,   139,   305,     0,   139,   303,   305,     0,   304,     0,
   303,   130,   304,     0,   116,   135,   281,   136,     0,     0,
   139,     0,   139,   306,     0,   116,     0,   306,   130,   116,
     0,   152,     0,   153,     0,   149,     0,   310,     0,   308,
   141,   281,   142,     0,   308,   135,   136,     0,   308,   135,
   311,   136,     0,   308,   140,   317,     0,   308,    90,   317,
     0,   308,    91,     0,   308,    92,     0,   135,   245,   136,
   128,   129,     0,   135,   245,   136,   128,   241,   129,     0,
   135,   245,   136,   128,   241,   130,   129,     0,   317,     0,
   115,     0,   309,   140,   317,     0,   309,   140,   115,     0,
   314,     0,    69,   135,   114,   136,     0,   313,     0,   116,
     0,   117,     0,   135,   281,   136,     0,   310,   112,     0,
   310,   143,   133,   247,   318,     0,   138,   135,   311,   136,
     0,   314,   128,   190,   241,   129,     0,   135,   128,   254,
   129,   136,     0,   312,     0,   282,     0,   312,   130,   282,
     0,   115,     0,   118,     0,   119,     0,   120,     0,    41,
     0,   114,     0,   123,     0,   122,     0,   124,     0,   314,
     0,   315,     0,   114,     0,   122,     0,   134,     0,    94,
     0
};

#endif

#if YYDEBUG != 0
static short yyrline[] = { 0,
  1188,  1194,  1199,  1203,  1206,  1210,  1212,  1236,  1238,  1240,
  1242,  1244,  1247,  1252,  1257,  1272,  1276,  1278,  1281,  1283,
  1284,  1288,  1290,  1293,  1295,  1296,  1299,  1301,  1302,  1306,
  1308,  1311,  1313,  1314,  1317,  1319,  1321,  1324,  1337,  1339,
  1346,  1350,  1355,  1358,  1361,  1364,  1369,  1373,  1377,  1379,
  1392,  1405,  1418,  1431,  1434,  1439,  1443,  1452,  1456,  1459,
  1466,  1468,  1474,  1477,  1482,  1485,  1492,  1495,  1497,  1499,
  1501,  1507,  1510,  1515,  1517,  1520,  1525,  1527,  1530,  1532,
  1533,  1535,  1614,  1617,  1621,  1623,  1624,  1625,  1626,  1627,
  1628,  1629,  1630,  1631,  1632,  1634,  1636,  1639,  1641,  1643,
  1644,  1646,  1650,  1652,  1655,  1657,  1659,  1665,  1669,  1672,
  1673,  1677,  1683,  1685,  1690,  1693,  1697,  1699,  1700,  1704,
  1708,  1719,  1730,  1734,  1738,  1741,  1745,  1747,  1750,  1753,
  1766,  1769,  1773,  1778,  1781,  1785,  1788,  1792,  1820,  1823,
  1825,  1827,  1830,  1832,  1837,  1840,  1842,  1844,  1847,  1849,
  1853,  1858,  1861,  1865,  1868,  1873,  1878,  1882,  1884,  1888,
  1893,  1900,  1905,  1908,  1913,  1917,  1919,  1923,  1931,  1935,
  1941,  1943,  1946,  1948,  1949,  1950,  1953,  1955,  1956,  1958,
  1961,  1966,  1969,  1975,  1978,  1983,  1986,  1990,  1995,  1997,
  2000,  2008,  2019,  2022,  2026,  2033,  2036,  2038,  2042,  2047,
  2051,  2056,  2066,  2078,  2082,  2087,  2094,  2096,  2098,  2114,
  2116,  2119,  2122,  2124,  2126,  2128,  2130,  2132,  2134,  2138,
  2147,  2151,  2156,  2158,  2160,  2162,  2163,  2167,  2169,  2170,
  2173,  2175,  2178,  2181,  2183,  2189,  2198,  2200,  2202,  2204,
  2207,  2209,  2212,  2222,  2231,  2234,  2241,  2243,  2246,  2248,
  2249,  2251,  2270,  2273,  2278,  2281,  2286,  2302,  2310,  2325,
  2329,  2332,  2336,  2338,  2341,  2344,  2346,  2348,  2355,  2363,
  2366,  2368,  2370,  2374,  2376,  2380,  2382,  2385,  2387,  2390,
  2398,  2412,  2414,  2415,  2416,  2417,  2422,  2424,  2427,  2430,
  2432,  2436,  2439,  2441,  2443,  2445,  2449,  2457,  2465,  2474,
  2484,  2489,  2495,  2497,  2498,  2499,  2500,  2501,  2505,  2510,
  2512,  2516,  2518,  2522,  2524,  2525,  2527,  2529,  2530,  2531,
  2533,  2537,  2540,  2546,  2549,  2553,  2559,  2572,  2575,  2581,
  2585,  2587,  2591,  2597,  2602,  2606,  2609,  2612,  2615,  2618,
  2621,  2624,  2627,  2630,  2636,  2642,  2648,  2658,  2660,  2661,
  2662,  2663,  2665,  2666,  2667,  2676,  2679,  2681,  2684,  2686,
  2689,  2691,  2694,  2696,  2699,  2701,  2704,  2706,  2709,  2711,
  2713,  2716,  2718,  2720,  2722,  2724,  2727,  2729,  2731,  2734,
  2736,  2738,  2741,  2743,  2745,  2747,  2750,  2752,  2758,  2762,
  2763,  2765,  2769,  2771,  2776,  2784,  2788,  2791,  2793,  2817,
  2819,  2825,  2834,  2843,  2847,  2851,  2858,  2864,  2866,  2868,
  2873,  2880,  2886,  2894,  2896,  2897,  2900,  2903,  2907,  2910,
  2913,  2915,  2916,  2919,  2922,  2927,  2930,  2934,  2937,  2939,
  2943,  2945,  2946,  2947,  2948,  2949,  2950,  2951,  2952,  2953,
  2954,  2957,  2960,  2963,  2966,  2968,  2970,  2972,  2976,  2979,
  2982,  2985,  2988,  2991,  2994,  2997,  3000,  3003,  3006,  3009,
  3012,  3014,  3017,  3020,  3022,  3024,  3026,  3029,  3032,  3034,
  3037,  3040,  3042,  3045,  3048,  3050,  3052,  3055,  3058,  3064,
  3066,  3067,  3068,  3069,  3070,  3071,  3072,  3076,  3077,  3082,
  3085,  3088,  3091,  3094,  3098,  3103,  3105,  3107,  3109,  3112,
  3114,  3117,  3123,  3125,  3128,  3130,  3133,  3138,  3140,  3143,
  3145,  3147,  3151,  3153,  3156,  3163,  3165,  3166,  3169,  3171,
  3174,  3176,  3177,  3180,  3183,  3185,  3187,  3189,  3191,  3193,
  3195,  3197,  3199,  3201,  3205,  3209,  3211,  3214,  3218,  3222,
  3224,  3226,  3228,  3230,  3235,  3237,  3240,  3243,  3246,  3250,
  3255,  3258,  3264,  3266,  3267,  3268,  3280,  3283,  3285,  3287,
  3289,  3293,  3295,  3297,  3299,  3302,  3304
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static string_t yytname[] = {   "$","error","$undefined.","AUTO","REGISTER",
"STATIC","EXTERN","TYPEDEF","VOID","CHAR","SHORT","INT","LONG","FLOAT","DOUBLE",
"SIGNED","UNSIGNED","CONST","VOLATILE","RESTRICT","STRUCT","UNION","CASE","DEFAULT",
"INLINE","SIZEOF","OFFSETOF","IF","ELSE","SWITCH","WHILE","DO","FOR","GOTO",
"CONTINUE","BREAK","RETURN","ENUM","TYPEOF","BUILTIN_VA_LIST","EXTENSION","NULL_kw",
"LET","THROW","TRY","CATCH","EXPORT","OVERRIDE","HIDE","NEW","ABSTRACT","FALLTHRU",
"USING","NAMESPACE","DATATYPE","SPAWN","MALLOC","RMALLOC","RMALLOC_INLINE","CALLOC",
"RCALLOC","SWAP","REGION_T","TAG_T","REGION","RNEW","REGIONS","PORTON","PORTOFF",
"PRAGMA","TEMPESTON","TEMPESTOFF","NUMELTS","VALUEOF","VALUEOF_T","TAGCHECK",
"NUMELTS_QUAL","THIN_QUAL","FAT_QUAL","NOTNULL_QUAL","NULLABLE_QUAL","REQUIRES_QUAL",
"ENSURES_QUAL","IEFFECT_QUAL","OEFFECT_QUAL","REGION_QUAL","NOZEROTERM_QUAL",
"ZEROTERM_QUAL","TAGGED_QUAL","EXTENSIBLE_QUAL","PTR_OP","INC_OP","DEC_OP","LEFT_OP",
"RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP","MUL_ASSIGN","DIV_ASSIGN",
"MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN","RIGHT_ASSIGN","AND_ASSIGN",
"XOR_ASSIGN","OR_ASSIGN","ELLIPSIS","LEFT_RIGHT","COLON_COLON","IDENTIFIER",
"INTEGER_CONSTANT","STRING","WSTRING","CHARACTER_CONSTANT","WCHARACTER_CONSTANT",
"FLOATING_CONSTANT","TYPE_VAR","TYPEDEF_NAME","QUAL_IDENTIFIER","QUAL_TYPEDEF_NAME",
"ATTRIBUTE","ASM_TOK","';'","'{'","'}'","','","'*'","'='","'<'","'>'","'('",
"')'","'_'","'$'","':'","'.'","'['","']'","'@'","'?'","'+'","'|'","'^'","'&'",
"'-'","'/'","'%'","'~'","'!'","prog","translation_unit","tempest_on_action",
"tempest_off_action","extern_c_action","end_extern_c","hide_list_opt","hide_list_values",
"export_list_opt","export_list","export_list_values","override_opt","external_declaration",
"optional_comma","function_definition","function_definition2","using_action",
"unusing_action","namespace_action","unnamespace_action","declaration","declaration_list",
"declaration_specifiers","storage_class_specifier","attributes_opt","attributes",
"attribute_list","attribute","type_specifier","type_specifier_notypedef","kind",
"type_qualifier","enum_specifier","enum_field","enum_declaration_list","struct_or_union_specifier",
"type_params_opt","struct_or_union","struct_declaration_list","struct_declaration_list0",
"init_declarator_list","init_declarator_list0","init_declarator","struct_declaration",
"specifier_qualifier_list","notypedef_specifier_qualifier_list","struct_declarator_list",
"struct_declarator_list0","struct_declarator","requires_clause_opt","eff_list",
"ieffect_clause_opt","oeffect_clause_opt","ensures_clause_opt","datatype_specifier",
"qual_datatype","datatypefield_list","datatypefield_scope","datatypefield","declarator",
"declarator_withtypedef","direct_declarator","direct_declarator_withtypedef",
"pointer","one_pointer","pointer_quals","pointer_qual","pointer_null_and_bound",
"pointer_bound","zeroterm_qual_opt","rgn_opt","tqual_list","parameter_type_list",
"type_var","optional_effect","optional_rgn_order","rgn_order","optional_inject",
"effect_set","atomic_effect","region_set","parameter_list","parameter_declaration",
"identifier_list","identifier_list0","initializer","array_initializer","initializer_list",
"designation","designator_list","designator","type_name","any_type_name","type_name_list",
"abstract_declarator","direct_abstract_declarator","statement","labeled_statement",
"expression_statement","compound_statement","block_item_list","selection_statement",
"switch_clauses","iteration_statement","jump_statement","exp_pattern","conditional_pattern",
"logical_or_pattern","logical_and_pattern","inclusive_or_pattern","exclusive_or_pattern",
"and_pattern","equality_pattern","relational_pattern","shift_pattern","additive_pattern",
"multiplicative_pattern","cast_pattern","unary_pattern","postfix_pattern","primary_pattern",
"pattern","tuple_pattern_list","tuple_pattern_list0","field_pattern","field_pattern_list",
"field_pattern_list0","expression","assignment_expression","assignment_operator",
"conditional_expression","constant_expression","logical_or_expression","logical_and_expression",
"inclusive_or_expression","exclusive_or_expression","and_expression","equality_expression",
"relational_expression","shift_expression","additive_expression","multiplicative_expression",
"cast_expression","unary_expression","asm_expr","volatile_opt","asm_out_opt",
"asm_outlist","asm_in_opt","asm_inlist","asm_io_elt","asm_clobber_opt","asm_clobber_list",
"unary_operator","postfix_expression","field_expression","primary_expression",
"argument_expression_list","argument_expression_list0","constant","qual_opt_identifier",
"qual_opt_typedef","struct_union_name","field_name","right_angle"
};
#endif

static short yyr1[] = {     0,
   154,   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   156,   157,   158,   159,   160,   160,   161,   161,
   161,   162,   162,   163,   163,   163,   164,   164,   164,   165,
   165,   166,   166,   166,   167,   167,   168,   168,   168,   168,
   169,   169,   170,   171,   172,   173,   174,   174,   174,   174,
   174,   174,   174,   175,   175,   176,   176,   176,   176,   176,
   176,   176,   176,   176,   176,   176,   177,   177,   177,   177,
   177,   177,   177,   178,   178,   179,   180,   180,   181,   181,
   181,   181,   182,   182,   183,   183,   183,   183,   183,   183,
   183,   183,   183,   183,   183,   183,   183,   183,   183,   183,
   183,   183,   183,   183,   183,   183,   183,   184,   185,   185,
   185,   186,   186,   186,   187,   187,   188,   188,   188,   189,
   189,   189,   189,   189,   190,   190,   191,   191,   192,   192,
   193,   193,   194,   195,   195,   196,   196,   197,   198,   198,
   198,   198,   198,   198,   199,   199,   199,   199,   199,   199,
   200,   201,   201,   202,   202,   202,   202,   203,   203,   204,
   204,   205,   205,   206,   206,   207,   207,   208,   208,   208,
   209,   209,   210,   210,   210,   210,   211,   211,   211,   212,
   212,   213,   213,   214,   214,   215,   215,   215,   215,   215,
   215,   215,   215,   215,   215,   216,   216,   216,   216,   216,
   216,   216,   216,   216,   216,   216,   217,   217,   218,   219,
   219,   220,   220,   220,   220,   220,   220,   220,   220,   221,
   221,   221,   222,   222,   223,   223,   223,   224,   224,   224,
   225,   225,   226,   226,   226,   226,   227,   227,   228,   228,
   229,   229,   230,   230,   231,   231,   232,   232,   233,   233,
   233,   233,   234,   234,   235,   235,   236,   236,   236,   237,
   238,   238,   239,   239,   240,   240,   240,   240,   240,   241,
   241,   241,   241,   242,   242,   243,   243,   244,   244,   245,
   245,   246,   246,   246,   246,   246,   247,   247,   248,   248,
   248,   249,   249,   249,   249,   249,   249,   249,   249,   249,
   249,   249,   250,   250,   250,   250,   250,   250,   251,   252,
   252,   253,   253,   254,   254,   254,   254,   254,   254,   254,
   254,   255,   255,   255,   255,   255,   255,   256,   256,   256,
   256,   256,   256,   257,   257,   257,   257,   257,   257,   257,
   257,   257,   257,   257,   257,   257,   257,   258,   258,   258,
   258,   258,   258,   258,   258,   259,   260,   260,   261,   261,
   262,   262,   263,   263,   264,   264,   265,   265,   266,   266,
   266,   267,   267,   267,   267,   267,   268,   268,   268,   269,
   269,   269,   270,   270,   270,   270,   271,   271,   272,   272,
   272,   272,   272,   272,   273,   274,   275,   275,   275,   275,
   275,   275,   275,   275,   275,   275,   275,   275,   275,   275,
   275,   275,   275,   276,   276,   276,   277,   277,   278,   278,
   279,   279,   279,   280,   280,   281,   281,   282,   282,   282,
   283,   283,   283,   283,   283,   283,   283,   283,   283,   283,
   283,   284,   284,   284,   284,   284,   284,   284,   285,   286,
   286,   287,   287,   288,   288,   289,   289,   290,   290,   291,
   291,   291,   292,   292,   292,   292,   292,   293,   293,   293,
   294,   294,   294,   295,   295,   295,   295,   296,   296,   297,
   297,   297,   297,   297,   297,   297,   297,   297,   297,   297,
   297,   297,   297,   297,   297,   297,   297,   297,   297,   297,
   297,   298,   299,   299,   300,   300,   300,   301,   301,   302,
   302,   302,   303,   303,   304,   305,   305,   305,   306,   306,
   307,   307,   307,   308,   308,   308,   308,   308,   308,   308,
   308,   308,   308,   308,   309,   309,   309,   309,   310,   310,
   310,   310,   310,   310,   310,   310,   310,   310,   310,   311,
   312,   312,   313,   313,   313,   313,   313,   314,   314,   315,
   315,   316,   316,   317,   317,   318,   318
};

static short yyr2[] = {     0,
     1,     2,     3,     5,     3,     5,     8,     3,     3,     3,
     3,     0,     1,     1,     2,     1,     0,     4,     1,     2,
     3,     0,     1,     4,     3,     4,     1,     2,     3,     0,
     4,     1,     1,     1,     1,     0,     3,     4,     4,     5,
     3,     4,     2,     1,     2,     1,     2,     3,     5,     3,
     6,     3,     8,     1,     2,     1,     2,     2,     1,     2,
     1,     2,     1,     2,     1,     2,     1,     1,     1,     1,
     2,     1,     1,     0,     1,     6,     1,     3,     1,     1,
     4,     8,     1,     2,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     4,     1,     1,     1,     1,
     3,     4,     4,     1,     4,     1,     4,     1,     1,     1,
     1,     5,     2,     4,     1,     3,     1,     2,     3,     4,
     9,     8,     4,     3,     0,     3,     1,     1,     0,     1,
     1,     2,     1,     1,     3,     1,     3,     3,     1,     2,
     1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
     1,     1,     3,     2,     2,     0,     3,     4,     0,     3,
     5,     4,     0,     4,     0,     4,     0,     6,     3,     5,
     1,     2,     1,     2,     3,     3,     0,     1,     1,     2,
     5,     1,     2,     1,     2,     1,     3,     4,     4,     5,
     8,     9,     4,     4,     2,     1,     1,     3,     4,     4,
     5,     8,     9,     4,     4,     2,     1,     2,     5,     0,
     2,     4,     4,     1,     1,     1,     1,     1,     1,     2,
     2,     1,     0,     3,     0,     1,     1,     0,     1,     1,
     0,     2,     3,     5,     5,     7,     1,     3,     0,     2,
     0,     2,     3,     5,     0,     1,     1,     3,     2,     3,
     4,     1,     1,     3,     1,     3,     2,     1,     2,     1,
     1,     3,     1,     1,     2,     3,     4,     8,     8,     1,
     2,     3,     4,     2,     2,     1,     2,     3,     2,     1,
     2,     1,     2,     3,     4,     3,     1,     3,     1,     1,
     2,     3,     3,     4,     4,     5,     8,     7,     9,     8,
     4,     2,     1,     1,     1,     1,     1,     1,     3,     1,
     2,     2,     3,     1,     2,     3,     4,     1,     2,     1,
     2,     5,     7,     7,     5,     8,     6,     0,     4,     4,
     5,     6,     7,     5,     7,     6,     7,     7,     8,     7,
     8,     8,     9,     6,     7,     7,     8,     3,     2,     2,
     2,     3,     2,     4,     5,     1,     1,     5,     1,     3,
     1,     3,     1,     3,     1,     3,     1,     3,     1,     3,
     3,     1,     3,     3,     3,     3,     1,     3,     3,     1,
     3,     3,     1,     3,     3,     3,     1,     4,     1,     2,
     2,     4,     2,     6,     1,     1,     1,     3,     1,     1,
     3,     6,     6,     4,     4,     5,     4,     2,     2,     2,
     4,     4,     4,     1,     3,     1,     1,     3,     1,     2,
     1,     3,     1,     1,     3,     1,     3,     1,     3,     3,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     5,     2,     2,     2,     5,     5,     1,     1,
     3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
     3,     3,     1,     3,     3,     3,     3,     1,     3,     3,
     1,     3,     3,     1,     3,     3,     3,     1,     4,     1,
     2,     2,     2,     2,     2,     2,     4,     2,     6,     6,
     4,     6,     6,     9,    11,     4,     6,     6,     4,     2,
     2,     5,     0,     1,     0,     2,     3,     1,     3,     0,
     2,     3,     1,     3,     4,     0,     1,     2,     1,     3,
     1,     1,     1,     1,     4,     3,     4,     3,     3,     2,
     2,     5,     6,     7,     1,     1,     3,     3,     1,     4,
     1,     1,     1,     3,     2,     5,     4,     5,     5,     1,
     1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1
};

static short yydefact[] = {     0,
    34,    67,    68,    69,    70,    72,    85,    86,    87,    88,
    89,    90,    91,    92,    93,   109,   110,   111,   127,   128,
    63,     0,     0,    97,     0,     0,    73,     0,     0,   171,
   104,   106,     0,     0,     0,    13,    14,     0,     0,     0,
   558,   237,   560,   559,   561,     0,   223,     0,   100,     0,
   223,   222,     1,     0,     0,     0,     0,    32,     0,     0,
    33,     0,    56,    65,    59,    83,    61,    94,    95,     0,
    98,     0,     0,   182,     0,   207,   210,    99,   186,   125,
    71,    70,    64,     0,   113,     0,    58,   557,     0,   558,
   553,   554,   555,   556,     0,   125,     0,     0,   397,     0,
     0,     0,   260,     0,   399,   400,    43,    45,     0,     0,
     0,     0,     0,     0,     0,     0,   172,     0,     0,     0,
   220,     0,     0,     0,     0,   221,     0,     0,     0,     2,
     0,     0,     0,     0,    47,     0,   133,   134,   136,    57,
    66,    60,    62,   129,   562,   563,   125,   125,     0,    54,
     0,     0,    36,     0,   239,     0,   195,   183,   208,     0,
   214,   215,   218,   219,     0,   217,   216,   228,   210,     0,
    84,    71,   117,     0,   115,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   542,   543,   503,     0,     0,     0,
     0,     0,   523,   521,   522,     0,   426,   428,   442,   450,
   452,   454,   456,   458,   460,   463,   468,   471,   474,   478,
     0,   480,   524,   541,   539,   558,   409,     0,     0,     0,
     0,   410,     0,     0,   408,    50,     0,     0,   125,     0,
     0,     0,   143,   139,   141,   280,   282,     0,     0,    52,
     0,     0,     8,     9,     0,   125,   564,   565,   238,   108,
     0,     0,     0,   187,   101,   258,     0,   255,    10,    11,
     0,     3,     0,     5,     0,    48,     0,     0,     0,    36,
     0,   130,   131,   156,   124,     0,   169,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   558,
   310,   312,     0,   320,   314,     0,   318,   303,   304,   305,
     0,   306,   307,   308,     0,    55,    36,   136,    35,    37,
   287,     0,   245,   261,     0,     0,   241,   239,     0,   225,
     0,     0,     0,   230,    74,   229,   211,     0,   118,   114,
     0,     0,     0,   488,     0,     0,   501,   444,   478,     0,
   445,   446,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   481,   482,   504,   500,     0,   484,     0,
     0,     0,     0,   485,   483,     0,    96,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   432,   433,   434,
   435,   436,   437,   438,   439,   440,   441,   431,     0,   486,
     0,   530,   531,     0,     0,     0,   545,     0,   125,   401,
     0,     0,     0,   423,   558,   565,     0,     0,     0,     0,
   276,   419,   424,     0,   421,     0,     0,   398,   416,   417,
     0,   414,   262,     0,     0,     0,     0,   283,     0,   253,
   144,   149,   145,   147,   140,   142,   239,     0,   289,   281,
   290,   567,   566,     0,   103,   105,     0,     0,   107,   123,
    80,    79,     0,    77,   224,   188,   239,   257,   184,   289,
   259,   196,   197,     0,   102,    16,    30,    44,     0,    46,
     0,   135,   137,   264,   263,    36,    38,   120,   132,     0,
     0,     0,   151,   152,   159,     0,   125,   125,   177,     0,
     0,     0,     0,     0,   558,     0,     0,     0,   349,   350,
   351,     0,     0,   353,     0,     0,     0,   321,   315,   136,
   319,   313,   311,    39,     0,   194,   246,     0,     0,     0,
   252,   240,   247,   159,     0,     0,     0,   241,   193,   227,
   226,   189,   225,     0,     0,   231,    75,   126,   119,   449,
   116,   112,     0,     0,     0,     0,   558,   265,   270,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   544,   551,     0,   550,   427,
   451,     0,   453,   455,   457,   459,   461,   462,   466,   467,
   464,   465,   469,   470,   472,   473,   475,   476,   477,   430,
   429,   529,   526,     0,   528,     0,     0,     0,   412,   413,
     0,   279,     0,   420,   274,   277,   407,     0,   275,   411,
   404,     0,    49,     0,   405,     0,   284,     0,   150,   146,
   148,     0,   241,     0,   225,     0,   291,     0,   239,     0,
   302,   286,     0,     0,   125,     0,     0,     0,   143,     0,
   125,     0,   239,     0,   206,   185,   256,     0,    22,     4,
     6,    40,     0,   155,   138,   156,     0,     0,   154,   241,
   170,   179,   178,     0,     0,   173,     0,     0,     0,   328,
     0,     0,     0,     0,     0,     0,   348,   352,     0,     0,
     0,   316,   309,     0,    41,   288,   239,     0,   249,     0,
     0,   167,   242,     0,   159,   245,   233,   190,   212,   213,
   231,   209,   487,     0,     0,     0,   266,     0,   271,     0,
   491,     0,     0,     0,     0,     0,   540,   496,   499,     0,
     0,   505,     0,     0,   479,   547,     0,     0,   527,   525,
     0,     0,     0,     0,   278,   422,   425,   415,   418,   406,
   285,   254,   159,     0,   292,   293,   225,     0,     0,   241,
   225,     0,     0,    51,   241,   558,     0,    76,    78,     0,
   198,     0,     0,   241,     0,   225,     0,     0,     0,    17,
    23,   153,     0,   157,   129,   168,   180,   177,   177,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   328,   354,     0,   317,    42,   241,     0,   250,
   248,     0,   163,     0,   167,   241,     0,   232,   536,     0,
   535,     0,   267,   272,     0,     0,     0,     0,     0,     0,
   447,   448,   529,   528,   510,     0,   549,   532,     0,   552,
   443,   546,   548,     0,   402,   403,   167,   159,   295,   301,
   159,     0,   294,   225,     0,   129,     0,    81,   199,   205,
   159,     0,   204,   200,   225,     0,     0,     0,     0,     0,
     0,     0,   176,   175,   322,   328,     0,     0,     0,     0,
     0,     0,   356,   357,   359,   361,   363,   365,   367,   369,
   372,   377,   380,   383,   387,   389,   395,   396,     0,     0,
   325,   334,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   355,   235,   251,     0,     0,   165,   243,   163,
   234,   239,   489,     0,     0,   273,   490,   492,   493,     0,
     0,   498,   497,     0,   516,   510,   506,   508,   502,   533,
     0,   163,   167,   167,   159,   296,    53,     0,     0,   167,
   159,   201,    31,    25,     0,     0,    27,     0,     7,   158,
   122,     0,     0,     0,   328,     0,   393,     0,     0,   390,
   328,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   391,   328,     0,   336,     0,     0,     0,   344,     0,
     0,     0,     0,     0,     0,   327,     0,     0,     0,   191,
     0,   165,   241,   538,   537,     0,     0,     0,     0,   517,
   516,   513,   511,     0,   507,   534,   165,   163,   163,   167,
   121,     0,   163,   167,    26,    24,    28,     0,     0,    19,
   181,   323,   324,     0,     0,     0,     0,   328,   330,   360,
     0,   362,   364,   366,   368,   370,   371,   375,   376,   373,
   374,   378,   379,   381,   382,   384,   385,   386,     0,   329,
   335,   337,   338,     0,   346,   345,     0,   340,     0,     0,
     0,   166,     0,     0,     0,   244,   192,   236,     0,     0,
     0,     0,     0,   519,   518,     0,   512,   509,   298,   165,
   165,   163,     0,   165,   163,    29,    18,    20,     0,   326,
   392,     0,   388,   331,     0,   328,   339,   347,   341,   342,
     0,     0,     0,   162,     0,   269,   268,   494,     0,   515,
     0,   514,   297,   300,   165,    82,   202,   165,    21,     0,
   358,   328,   332,   343,   160,     0,   164,     0,   520,   299,
   203,   394,   333,     0,   495,   161,     0,     0,     0
};

static short yydefgoto[] = {  1167,
    53,    54,    55,    56,   487,   879,  1049,   790,   791,   966,
   669,    57,   320,    58,   304,    59,   489,    60,   491,    61,
   151,    62,    63,   556,   243,   473,   474,   244,    66,   259,
   245,    68,   173,   174,    69,   171,    70,   281,   282,   136,
   137,   138,   283,   246,   455,   502,   503,   504,   679,  1094,
   928,  1020,   823,    71,    72,   684,   685,   686,    73,   505,
    74,   479,    75,    76,   168,   169,    77,   121,   552,   335,
   722,   642,    78,   643,   546,   713,   538,   542,   543,   449,
   328,   268,   102,   103,   569,   494,   570,   429,   430,   431,
   247,   321,   322,   644,   461,   307,   308,   309,   310,   311,
   312,   805,   313,   314,   892,   893,   894,   895,   896,   897,
   898,   899,   900,   901,   902,   903,   904,   905,   906,   907,
   432,   441,   442,   433,   434,   435,   315,   207,   409,   208,
   561,   209,   210,   211,   212,   213,   214,   215,   216,   217,
   218,   219,   220,   367,   368,   846,   946,   947,  1031,   948,
  1033,  1105,   221,   222,   830,   223,   588,   589,   224,   225,
    80,   967,   436,   465
};

static short yypact[] = {  3062,
-32768,-32768,-32768,-32768,   -60,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  3987,    94,   -10,-32768,  3987,  3188,-32768,   213,    56,-32768,
    17,    85,    43,   -15,    96,-32768,-32768,   113,   447,   228,
-32768,   140,-32768,-32768,-32768,   173,   178,   633,   216,   224,
   178,-32768,-32768,   207,   225,   254,  2917,-32768,   508,   625,
-32768,   865,  3987,  3987,  3987,-32768,  3987,-32768,-32768,   617,
-32768,   213,  3895,   380,    40,   127,  1166,-32768,-32768,   264,
   279,   303,-32768,   213,   298,  7334,-32768,-32768,  3272,   217,
-32768,-32768,-32768,-32768,   309,   264,   253,  7334,-32768,   320,
  3272,   372,   399,   378,-32768,    57,-32768,-32768,  4207,  4207,
   -38,   426,  2917,  2917,  7334,   478,-32768,   -31,   470,  7334,
-32768,   548,   462,   -31,  4697,-32768,  2917,  2917,  3206,-32768,
  2917,  3206,  2917,  3206,-32768,   480,   489,-32768,  3759,-32768,
-32768,-32768,-32768,  4697,-32768,-32768,   264,   199,  1867,-32768,
  3895,   865,   499,  4207,  4076,  1518,-32768,   380,-32768,   513,
-32768,-32768,-32768,-32768,   530,-32768,-32768,    -2,  1166,  4207,
-32768,-32768,   540,   597,   549,   213,  7745,   559,  7844,  7334,
  7547,   587,   599,   601,   609,   627,   658,   668,   675,   684,
   689,   695,  7844,  7844,-32768,-32768,   817,  7943,  2617,   709,
  7943,  7943,-32768,-32768,-32768,    38,-32768,-32768,   -65,   747,
   702,   705,   706,   717,     7,   789,   -19,    88,-32768,   978,
  7943,   343,   -35,-32768,   744,   155,-32768,  3272,    15,   753,
  1026,   766,   129,  2899,-32768,-32768,   774,  7334,   264,  2899,
   761,  4430,  4697,  1288,  4697,   698,-32768,   -25,   -25,-32768,
   784,   768,-32768,-32768,   275,   264,-32768,-32768,-32768,-32768,
    42,   777,   773,-32768,-32768,   839,   285,-32768,-32768,-32768,
   788,-32768,   791,-32768,   794,-32768,   548,  5510,  3895,   499,
   796,  4697,-32768,   918,   814,   213,   821,   797,   359,   829,
  4811,   831,   854,   842,   845,  5624,  2471,  4811,    86,   834,
-32768,-32768,   840,  2018,  2018,   865,  2018,-32768,-32768,-32768,
   848,-32768,-32768,-32768,   239,-32768,   499,   853,-32768,-32768,
   849,   234,   872,-32768,    50,   851,   856,   313,   862,   804,
   857,  7334,  4207,-32768,   876,-32768,-32768,   234,   213,-32768,
  7334,   861,  2617,-32768,  4697,  2617,-32768,-32768,-32768,  4925,
-32768,   905,  7334,  7334,  7334,  7334,  7334,  7334,  7334,   896,
  7334,  4697,   257,-32768,-32768,-32768,-32768,   878,-32768,  2018,
   883,   333,  7334,-32768,-32768,  7334,-32768,  7943,  7334,  7943,
  7943,  7943,  7943,  7943,  7943,  7943,  7943,  7943,  7943,  7943,
  7943,  7943,  7943,  7943,  7943,  7943,  7334,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  7334,-32768,
   -31,-32768,-32768,  5738,   -31,  7334,-32768,   888,   264,-32768,
   889,   890,   892,-32768,   102,   309,   -31,  7334,  3272,   135,
-32768,-32768,-32768,   893,   897,   891,  3272,-32768,-32768,-32768,
   895,   898,-32768,   425,  1026,   899,  4207,-32768,   900,   904,
-32768,  1288,  1288,  1288,-32768,-32768,  3480,  5852,   339,-32768,
   413,-32768,-32768,    50,-32768,-32768,   902,   929,-32768,   917,
-32768,   911,   912,   921,-32768,-32768,  3343,-32768,   638,   576,
-32768,-32768,-32768,  4697,-32768,-32768,  1000,-32768,  2917,-32768,
  2917,-32768,-32768,-32768,-32768,   499,-32768,-32768,-32768,  1057,
  7334,   925,   924,-32768,   -21,   592,   264,   264,   887,  7334,
  7334,   920,   928,  7334,   919,  1029,  2320,   936,-32768,-32768,
-32768,   452,  1020,-32768,  5966,  2169,  2763,-32768,-32768,  3759,
-32768,-32768,-32768,-32768,  4207,-32768,-32768,  4697,   931,  4519,
-32768,-32768,   923,   988,    50,   934,  4608,   856,-32768,-32768,
-32768,-32768,   804,   935,    55,   859,-32768,-32768,-32768,-32768,
-32768,-32768,   937,   944,   941,   964,   951,-32768,-32768,   771,
  5510,   961,   957,   966,   967,   970,   971,   463,   973,   975,
   976,   368,   990,   984,  7646,-32768,-32768,   980,   977,-32768,
   747,   259,   702,   705,   706,   717,     7,     7,   789,   789,
   789,   789,   -19,   -19,    88,    88,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   983,-32768,   183,  4207,  5393,  4697,-32768,
  4697,-32768,   972,-32768,-32768,-32768,-32768,  1563,-32768,-32768,
-32768,  3043,-32768,   992,-32768,   287,-32768,  4697,-32768,-32768,
-32768,   986,   856,   987,   804,   982,   413,  4207,  4299,  6080,
-32768,-32768,  7334,  1001,   264,  7448,   991,    42,  3617,   994,
   264,  4207,  4076,  6194,-32768,   638,-32768,  1005,  1088,-32768,
-32768,-32768,   515,-32768,-32768,   918,  1003,  7334,-32768,   856,
-32768,-32768,-32768,  1010,   213,   467,   527,   531,  7334,   882,
   552,  4811,  1008,  6308,  6422,   582,-32768,-32768,  1019,  1023,
  1015,  2018,-32768,  3895,-32768,   849,  1025,  4207,-32768,  1027,
    50,  1073,-32768,  1024,   988,   251,-32768,-32768,-32768,-32768,
   859,-32768,  1032,   231,  1032,  1035,-32768,  5042,-32768,  7334,
-32768,  7334,  7334,  1137,  7334,  7547,-32768,-32768,-32768,   -31,
   -31,  1030,  1036,  5159,-32768,-32768,  7334,  7334,-32768,-32768,
   234,   785,  1051,  1059,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   988,  1039,-32768,-32768,   804,   234,  1040,   856,
   804,  1041,   565,-32768,   856,  1047,  1048,-32768,-32768,  1049,
-32768,   234,  1050,   856,  1053,   804,  1045,  3206,  1062,  1143,
-32768,-32768,  7334,-32768,  4697,-32768,  1058,    65,   887,  4811,
  1066,  1061,  1403,  1056,  1069,  4811,  7334,  6536,   640,  6650,
   655,  6764,   882,-32768,  1072,-32768,-32768,   856,   301,-32768,
-32768,  1067,  1120,  1083,  1073,   856,  4697,-32768,-32768,   243,
-32768,  7334,-32768,-32768,  5510,  1070,  1071,  1074,  1077,  1075,
-32768,   905,  1079,  1080,   -54,  1090,-32768,-32768,   798,-32768,
-32768,-32768,-32768,  5393,-32768,-32768,  1073,   988,-32768,-32768,
   988,  1091,-32768,   804,  1081,  4697,  1094,-32768,-32768,-32768,
   988,  1092,-32768,-32768,   804,  1084,   667,  1096,  2917,  1093,
  1101,  4697,-32768,-32768,  1203,   882,  1105,  8042,  1099,  2763,
  7943,  1097,-32768,   -34,-32768,  1136,  1102,   782,   841,   147,
   847,   255,   171,-32768,-32768,-32768,-32768,  1139,  7943,  2018,
-32768,-32768,   583,  4811,   593,  6878,  4811,   619,  6992,  7106,
   701,  1110,-32768,-32768,-32768,  7334,  1119,  1171,  1126,  1120,
-32768,  1025,-32768,   271,   326,-32768,-32768,-32768,-32768,  4697,
  1232,-32768,-32768,  1123,   -32,   397,-32768,-32768,-32768,-32768,
  5276,  1120,  1073,  1073,   988,-32768,-32768,  1130,  1132,  1073,
   988,-32768,-32768,-32768,  1134,  1135,   707,   478,-32768,-32768,
-32768,   639,  4811,  1138,   882,  2617,-32768,  4697,  1129,-32768,
  1716,  7943,  7334,  7943,  7943,  7943,  7943,  7943,  7943,  7943,
  7943,  7943,  7943,  7943,  7943,  7943,  7943,  7943,  7943,  7943,
  7334,-32768,   882,  1142,-32768,  4811,  4811,   644,-32768,  4811,
  4811,   648,  4811,   664,  7220,-32768,  1140,  1144,  1131,-32768,
    50,  1171,   856,-32768,-32768,  2763,  1145,  1149,  7334,  1155,
   402,-32768,-32768,  1158,-32768,-32768,  1171,  1120,  1120,  1073,
-32768,  1160,  1120,  1073,-32768,-32768,-32768,   478,  1150,   713,
-32768,-32768,-32768,  1151,  1152,  1156,  7943,   882,-32768,   747,
   404,   702,   705,   705,   717,     7,     7,   789,   789,   789,
   789,   -19,   -19,    88,    88,-32768,-32768,-32768,   412,-32768,
-32768,-32768,-32768,  4811,-32768,-32768,  4811,-32768,  4811,  4811,
   665,-32768,  4207,   672,  1144,-32768,-32768,-32768,  1161,   816,
  1153,  4697,   677,-32768,  1157,  1158,-32768,-32768,-32768,  1171,
  1171,  1120,  1159,  1171,  1120,-32768,-32768,-32768,   478,-32768,
  1032,   231,-32768,-32768,  7334,  1716,-32768,-32768,-32768,-32768,
  4811,   822,  1163,-32768,   687,-32768,-32768,-32768,  1174,-32768,
  1169,-32768,-32768,-32768,  1171,-32768,-32768,  1171,-32768,   362,
-32768,   882,-32768,-32768,-32768,  4207,-32768,  1175,-32768,-32768,
-32768,-32768,-32768,   826,-32768,-32768,  1292,  1293,-32768
};

static short yypgoto[] = {-32768,
   229,-32768,-32768,-32768,-32768,-32768,   175,-32768,-32768,   265,
-32768,-32768,  -236,-32768,-32768,-32768,-32768,-32768,-32768,    44,
  -134,   134,-32768,-32768,     0,   654,-32768,   123,  -162,  1190,
    33,-32768,-32768,  -130,-32768,    77,  1276,  -745,-32768,-32768,
-32768,  1042,  1034,   793,   433,-32768,-32768,   641,    36,   223,
  -724,  -884,  -720,-32768,-32768,   159,-32768,-32768,   141,  -211,
  1249,  -405,   459,-32768,  1164,-32768,-32768,  1277,   -78,-32768,
   608,  -138,  -146,  -126,  -231,   311,   614,   623,  -452,  -495,
  -121,  -443,  -123,-32768,  -271,  -150,  -575,  -334,-32768,   906,
  -131,   -23,  -167,  -124,  -381,     5,-32768,-32768,   -59,  -294,
-32768,  -771,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   328,  1095,-32768,   710,   894,-32768,   588,   864,-32768,  -160,
  -377,  -145,  -369,  -354,  -375,   955,  -353,  -366,  -349,  -367,
  -365,  -149,   475,-32768,-32768,-32768,-32768,   395,-32768,  -857,
   312,-32768,   541,   985,   227,-32768,  -380,-32768,   375,   444,
   -55,   -69,  -116,   -44
};


#define	YYLAST		8195


static short yytable[] = {    64,
   147,   260,   338,   267,   279,   594,   493,   260,   591,   528,
   529,   652,   531,   153,   146,   571,   326,   597,   598,   348,
    64,   336,   603,   604,    64,   593,   605,   606,   327,   596,
   351,   329,    67,   614,   378,   352,   599,   600,   601,   602,
   667,   922,   752,   497,   710,   342,   256,   122,   369,   881,
   623,   374,   375,    67,   478,    81,    64,    67,   471,   677,
   146,   944,    64,    64,    64,   982,    64,   371,   462,   682,
   683,   410,    64,   157,   666,   584,   417,   647,   379,   280,
   534,   453,   257,   944,   945,   248,   249,  1032,   250,    67,
   258,   317,   714,   251,   707,    67,    67,    67,   647,    67,
   666,   386,   387,   667,   930,    67,  1030,   418,   463,   983,
   450,   113,    64,    64,   974,   539,   150,   678,    42,   464,
   958,   460,    65,   674,    86,   392,    64,    64,    64,   393,
    64,    64,    64,    64,   334,   421,   952,  1097,    64,   388,
   389,   481,   762,    65,   701,    67,    67,    65,    64,   109,
    64,   422,  1109,    41,    83,   472,   111,   157,    87,    67,
    67,    67,    44,    67,    67,    67,    67,   376,   849,   108,
    42,    67,   231,   377,    48,   112,  1108,   540,   541,    65,
   560,    67,   150,    67,   239,    65,    65,    65,   123,    65,
   720,   240,   305,  -174,   316,    65,   140,   141,   142,   464,
   143,   548,   139,  1054,   466,  1022,   152,    41,   559,  1059,
   483,   563,   524,   564,   565,   228,    44,   110,   394,   496,
   525,    84,   114,   285,   287,  1143,  1144,  1037,   483,  1147,
   581,  1080,  1038,  1039,   229,    65,    65,   395,   396,  1043,
  -564,   990,   991,   452,   607,   608,   609,   115,  1142,    65,
    65,    65,   118,    65,    65,    65,    65,    47,   376,   672,
  1160,    65,   263,  1161,   438,   660,   625,   560,   228,    51,
    52,    65,   152,    65,   427,   428,   454,   536,    64,   992,
   993,   117,   306,   571,   152,   130,  1124,   229,   660,   453,
   453,   453,   318,   558,   612,   516,    64,    88,   615,   729,
   794,   998,   523,    64,    64,   120,    64,   119,   802,   555,
   622,    67,   376,  1110,  1111,   445,   717,   541,  1114,  1112,
   999,  1000,   316,  1115,   750,   189,    41,   462,   124,    67,
   228,   170,   470,   127,   557,    44,    67,    67,   286,    67,
   560,   253,   254,  -261,   257,   829,  -261,   305,   305,   229,
   305,   128,   258,   104,  1153,   269,   270,   271,   125,   272,
   273,   274,   275,   535,   537,   533,   232,   463,   376,    64,
    41,    91,   195,   196,    92,    93,    94,   325,   933,    44,
  1163,   129,   934,   932,   257,  1024,  -239,  1145,   376,  -239,
  1148,   346,   258,   835,   200,   704,   170,   748,   541,   996,
   105,    65,    67,   997,   376,   267,   -15,   816,   450,   571,
   469,   764,   152,   305,   484,   880,   227,   318,   172,    65,
   485,   661,   761,   636,   483,   176,    65,    65,   235,    65,
    87,   464,   411,   412,   413,   745,   925,   306,   306,   325,
   306,   230,   547,    79,   483,   464,   530,   780,   795,   751,
   483,   452,   452,   452,   234,   376,   834,   740,   412,   413,
   651,   780,   376,   105,  1026,    85,    19,    20,   586,   106,
   705,   107,    41,   457,   718,   105,   659,   414,   665,   458,
   768,    44,   415,   416,   454,   454,   454,   753,    64,   754,
    64,    79,    65,   511,   782,   618,   512,  1162,   236,   673,
    79,   934,   414,   306,    46,    79,   450,   741,   416,   238,
   769,   706,   154,   145,   155,   148,    64,   560,    79,   835,
   156,    67,   770,    67,   783,    64,  1034,   175,   237,    64,
   703,  1106,   106,   376,   159,   945,   784,    46,   862,   785,
  1030,   376,  1125,   866,   106,   648,   252,   649,  1017,    67,
  1126,   633,   872,   650,   376,   420,    79,    79,    67,   145,
   695,   440,    67,   936,   541,    79,   766,   440,   714,   702,
    79,    79,    79,   150,    79,    79,    79,    79,   698,   712,
   818,   376,   834,   680,   681,   841,   924,   851,   721,   826,
   842,    41,   376,   798,   931,    79,   799,   264,   736,    43,
    44,    45,   105,   661,   261,   105,   276,   831,   105,  1063,
  1064,    65,  1060,    65,   105,  1003,   835,   483,   277,   175,
   483,  1066,  1067,   843,   844,   319,  1072,  1073,    41,  1062,
  1074,  1075,   560,  1065,   131,   132,    43,    44,    45,    65,
  1068,  1069,  1070,  1071,   817,    47,   651,   332,    65,   500,
   152,   344,    65,   347,   349,   349,   376,    51,    52,   152,
   376,    41,   800,   152,   333,   665,   801,   364,   365,   339,
    44,   106,   349,   206,   106,   349,   349,   106,    47,   834,
   341,   376,    48,   106,   819,   233,  1058,   806,   859,    41,
    51,    52,   863,   345,   376,   349,   703,    43,    44,    45,
   865,    64,   255,    64,   459,    41,   852,   874,   812,   482,
   477,   376,   376,    43,    44,    45,   458,   670,  1004,   671,
    79,   353,   376,   860,   480,   340,   500,   482,  1006,   508,
    41,   775,   513,   354,    67,   355,    67,   870,    43,    44,
    45,   980,   506,   356,   144,   305,    41,   316,   376,    79,
   825,   133,   134,   721,  1010,    44,   624,    46,   979,  1002,
   972,   357,    46,    47,   630,   560,   916,    48,   484,   376,
   662,   347,   663,   376,  1051,    51,    52,   376,   664,  1084,
    41,   919,   175,  1087,   376,   956,   372,    64,    43,    44,
    45,  1098,   358,   376,   376,   964,   962,   965,   857,  1089,
  1131,  1133,   359,   105,   885,  1023,   376,  1134,  1027,   360,
   912,   105,  1140,   384,   385,   349,  1133,  1025,   361,   105,
    67,   146,  1157,   362,    65,   444,    65,  1015,    47,   363,
   376,  1152,   457,  1047,   366,   306,  1048,   152,   458,  1118,
    51,    52,  1119,   373,  1055,   380,  1056,   381,  1076,  1077,
  1078,   382,   349,   383,   349,   349,   349,   349,   349,   349,
   349,   349,   349,   349,   349,   349,   349,   349,   349,   349,
   349,   419,   106,   423,   541,    16,    17,    18,    64,   437,
   106,   390,   391,   522,   639,   640,   641,   443,   106,   550,
   551,   682,   683,   953,  1099,   447,   954,   467,  1050,   727,
   728,   468,   349,   803,   804,   475,   960,  1123,   476,    64,
    65,    67,   146,   853,   854,   459,   486,   266,  1005,   488,
   482,  1009,   490,   482,   498,  1132,   950,   951,   986,   987,
   372,   510,    79,   372,    79,   480,   284,   988,   989,   994,
   995,   507,    67,   482,  1137,   376,   578,   266,   509,   482,
  1155,   535,    41,   305,  1166,   535,   883,   884,   506,   759,
    43,    44,    45,   514,  1151,   517,   592,   518,   519,    47,
  1139,   520,   526,   477,   527,   349,   532,  1052,    41,   458,
    64,    51,    52,   262,   278,   537,   544,    44,  1164,   562,
  1040,   135,   146,   464,   545,    47,  1044,   549,   553,    48,
    46,    65,   105,   616,   378,   831,   105,    51,    52,   579,
  1082,  1083,   583,    67,  1085,  1086,   876,  1088,   585,   331,
   617,   627,   619,   620,   305,   621,   628,   632,   637,   629,
   631,    41,    65,   638,   635,   451,   653,   456,   397,    43,
    44,    45,   654,   306,   655,   656,   668,   657,    47,  1050,
   658,   675,   500,   676,   689,   690,   501,   692,   693,   349,
    51,    52,   697,   146,   699,   708,    88,   711,   677,   715,
   719,   106,   723,   724,   284,   106,   725,   726,   398,   399,
   400,   401,   402,   403,   404,   405,   406,   407,  1127,  -564,
   730,  1128,   731,  1129,  1130,   732,   733,   687,   688,   734,
   735,   691,   482,    65,   696,   742,   747,   969,   737,   408,
   738,   739,   743,   755,   306,   746,   482,   506,   749,   482,
   760,   763,   765,   767,    89,    64,   778,   774,   797,   781,
   908,   506,   788,   789,   506,  1154,   424,   793,   796,   425,
    91,   495,   807,    92,    93,    94,   813,   426,    44,   814,
   815,   325,   349,    96,   822,   820,    97,   824,    67,   744,
    98,   839,    99,   100,   855,   427,   428,   832,   845,   305,
    41,   847,   856,   101,   858,   861,   867,   105,    43,    44,
    45,    46,   864,   868,   869,   871,   875,    47,   873,   877,
   878,   500,   882,   886,   910,   554,   887,   911,   923,    51,
    52,   926,   927,   929,   941,   937,   938,   957,   959,   939,
   349,   940,   963,   495,   942,   943,   572,   573,   574,   575,
   576,   577,   349,   968,   580,   949,   955,   961,   970,   971,
   973,    79,   975,   978,   984,   981,   587,  1001,  1016,   590,
   773,   160,   161,   162,   163,   164,   106,   985,    65,   266,
   165,   166,   167,  1018,  1019,  1021,  1028,  1029,  1041,   306,
   610,  1042,  1045,  1046,  1057,  1095,  1053,   349,  1081,   266,
  1104,  1093,   611,   944,  1113,  1092,   266,   587,  1117,  1120,
  1101,   809,   811,  1102,  1159,  1122,  1141,  1121,  1138,  1136,
  1156,  1168,  1169,  1149,  1146,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,  1158,
  1165,   779,  1116,   265,   116,   499,   792,  1135,   492,   266,
   145,   646,    79,   158,    22,    23,    24,   126,   828,   827,
   266,  1096,   337,   821,   446,   626,   595,   757,   634,   266,
  1035,    30,  1107,   909,     0,     0,     0,   582,  1150,    31,
    32,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    38,   977,     0,     0,   349,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    39,    40,     0,     0,     0,
     0,     0,     0,   349,     0,     0,     0,     0,   587,     0,
   587,     0,     0,     0,   913,   915,     0,   918,     0,   921,
   349,     0,     0,     0,     0,     0,     0,     0,    42,     0,
     0,   145,    46,     0,     0,     0,     0,     0,     0,   935,
     0,     0,     0,     0,    49,    50,     0,   888,   889,     0,
     0,     0,     0,     0,   495,     0,     0,     0,     0,     0,
     0,   266,     0,    88,     0,     0,     0,     0,     0,     0,
     0,   451,     0,     0,     0,   266,   349,     0,   349,   349,
   349,   349,   349,   349,   349,   349,   349,   349,   349,   349,
   349,   349,   349,   349,   349,     0,     0,   233,     0,     0,
     0,   495,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   145,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    89,     0,  1008,     0,     0,  1012,  1014,     0,     0,
     0,     0,     0,   772,     0,     0,   226,    91,     0,   777,
    92,    93,    94,     0,    95,    44,     0,   787,     0,     0,
    96,   349,     0,    97,     0,     0,     0,   890,     0,    99,
   100,     0,   177,   178,     0,     0,     0,   891,     0,     0,
   101,   203,   587,     0,   204,   205,     0,   179,    88,     0,
   180,     0,   145,   372,     0,     0,   181,     0,     0,     0,
  1061,     0,   182,   183,   184,   185,   186,   187,     0,     0,
     0,     0,   188,     0,     0,     0,   189,   284,  1079,   190,
   191,   495,   192,   836,     0,   837,   838,     0,   840,   349,
     0,     0,  1091,    88,     0,     0,     0,   495,   193,   194,
   850,     0,     0,  1100,     0,     0,  1103,     0,     0,   266,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    41,    91,   195,   196,    92,    93,    94,     0,     0,
    44,     0,     0,   197,     0,     0,     0,     0,   198,     0,
     0,     0,   199,     0,     0,   200,     0,     0,   284,   330,
     0,    89,   201,     0,     0,   202,   203,     0,     0,   204,
   205,     0,     0,   756,   266,     0,   425,    91,     0,     0,
    92,    93,    94,     0,   426,    44,     0,     0,     0,     0,
    96,     0,     0,    97,     0,     0,     0,    98,   495,    99,
   100,     0,   427,   428,     0,     0,     0,     0,     0,     0,
   101,     0,     0,     0,     0,     0,     0,   495,     2,     3,
     4,    82,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,   803,   804,    21,
   177,   178,   288,     0,   289,   290,   291,   292,   293,   294,
   295,   296,    22,    23,    24,   297,    88,    26,   180,   298,
     0,     0,     0,     0,   181,    27,   299,     0,     0,    30,
   182,   183,   184,   185,   186,   187,     0,    31,    32,    33,
   188,     0,     0,     0,   189,     0,     0,   190,   191,    38,
   192,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    39,    40,     0,   193,   194,     0,     0,
     0,     0,     0,     0,   495,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   300,
    91,   195,   196,    92,    93,    94,    42,    43,    44,    45,
    46,   197,   301,   149,     0,     0,   198,     0,     0,     0,
   199,     0,    49,   303,     0,     0,     0,     0,     0,     0,
   201,     0,     0,   202,   203,     0,     0,   204,   205,     2,
     3,     4,    82,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,     0,     0,
    21,   177,   178,   288,     0,   289,   290,   291,   292,   293,
   294,   295,   296,    22,    23,    24,   297,    88,    26,   180,
   298,     0,     0,     0,     0,   181,    27,   299,     0,     0,
    30,   182,   183,   184,   185,   186,   187,     0,    31,    32,
    33,   188,     0,     0,     0,   189,     0,     0,   190,   191,
    38,   192,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    39,    40,     0,   193,   194,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   300,    91,   195,   196,    92,    93,    94,    42,    43,    44,
    45,    46,   197,   301,   149,   302,     0,   198,     0,     0,
     0,   199,     0,    49,   303,     0,     0,     0,     0,     0,
     0,   201,     0,     0,   202,   203,     0,     0,   204,   205,
     2,     3,     4,    82,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,     0,
     0,    21,   177,   178,   288,     0,   289,   290,   291,   292,
   293,   294,   295,   296,    22,    23,    24,   297,    88,    26,
   180,   298,     0,     0,     0,     0,   181,    27,   299,     0,
     0,    30,   182,   183,   184,   185,   186,   187,     0,    31,
    32,    33,   188,     0,     0,     0,   189,     0,     0,   190,
   191,    38,   192,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    39,    40,     0,   193,   194,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   300,    91,   195,   196,    92,    93,    94,    42,    43,
    44,    45,    46,   197,   301,   149,     0,     0,   198,     0,
     0,     0,   199,     0,    49,   303,     0,     0,     0,     0,
     0,     0,   201,     0,     0,   202,   203,     0,     0,   204,
   205,     2,     3,     4,    82,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
     0,     0,    21,   177,   178,   288,     0,   289,   290,   291,
   292,   293,   294,   295,   296,    22,    23,    24,   297,    88,
    26,   180,   298,     0,     0,     0,     0,   181,    27,   299,
     0,     0,    30,   182,   183,   184,   185,   186,   187,     0,
    31,    32,    33,   188,     0,     0,     0,   189,     0,     0,
   190,   191,    38,   192,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    39,    40,     0,   193,
   194,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   515,    91,   195,   196,    92,    93,    94,    42,
    43,    44,    45,    46,   197,   301,   149,     0,     0,   198,
     0,     0,     0,   199,     0,    49,   303,     0,     0,     0,
     0,     0,     0,   201,     0,     0,   202,   203,     0,     0,
   204,   205,     2,     3,     4,    82,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,     0,     0,    21,   177,   178,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    22,    23,    24,   297,
    88,    26,   180,     0,     0,     0,     0,     0,   181,    27,
     0,     0,     0,    30,   182,   183,   184,   185,   186,   187,
     0,    31,    32,    33,   188,     0,     0,     0,   189,     0,
     0,   190,   191,    38,   192,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    39,    40,     0,
   193,   194,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    41,    91,   195,   196,    92,    93,    94,
    42,    43,    44,    45,    46,   197,   694,     0,     0,     0,
   198,     0,     0,     0,   199,     0,    49,   303,     0,     0,
     0,     0,     0,     0,   201,     0,     0,   202,   203,     0,
     0,   204,   205,     2,     3,     4,    82,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,     0,     0,    21,   177,   178,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    22,    23,    24,
   297,    88,     0,     0,     0,     0,     0,     0,     0,     0,
    27,     0,     0,     0,    30,   182,   183,   184,   185,   186,
   187,     0,    31,    32,     0,     0,     0,     0,     0,   189,
     0,     0,   190,   191,    38,   192,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    39,    40,
     0,   193,   194,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    41,    91,   195,   196,    92,    93,
    94,    42,    43,    44,    45,    46,   197,     0,     0,     0,
     0,   198,     0,     0,     0,   346,     0,    49,   303,     0,
     0,     0,     0,     0,     0,   201,     0,     0,   202,   203,
     0,     0,   204,   205,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,     0,     0,
     0,   177,   178,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    22,    23,    24,   179,    88,     0,   180,
     0,     0,     0,     0,     0,   181,     0,     0,     0,     0,
    30,   182,   183,   184,   185,   186,   187,     0,    31,    32,
     0,   188,     0,     0,     0,   189,     0,     0,   190,   191,
    38,   192,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    39,    40,     0,   193,   194,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    41,    91,   195,   196,    92,    93,    94,    42,    43,    44,
    45,    46,   197,     0,   370,     0,     0,   198,     0,     0,
     0,   199,     0,    49,   303,     0,     0,     0,     0,     0,
     0,   201,     0,     0,   202,   203,     0,     0,   204,   205,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,     0,     0,     0,   177,   178,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    22,
    23,    24,   179,    88,     0,   180,     0,     0,     0,     0,
     0,   181,     0,     0,     0,     0,    30,   182,   183,   184,
   185,   186,   187,     0,    31,    32,     0,   188,     0,     0,
     0,   189,     0,     0,   190,   191,    38,   192,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    39,    40,     0,   193,   194,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    41,    91,   195,   196,
    92,    93,    94,    42,    43,    44,    45,    46,   197,     0,
     0,     0,     0,   198,     0,     0,     0,   199,     0,    49,
   303,     0,     0,     0,     0,     0,     0,   201,     0,     0,
   202,   203,     0,     0,   204,   205,   -12,     1,     0,     2,
     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,     0,    88,
    21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    22,    23,    24,    25,     0,    26,     0,
     0,     0,     0,     0,     0,     0,    27,     0,    28,    29,
    30,     0,     0,     0,     0,     0,     0,     0,    31,    32,
    33,     0,     0,    34,    35,     0,    36,    37,     0,     0,
    38,     0,     0,     0,     0,     0,     0,    89,     0,     0,
     0,     0,     0,     0,    39,    40,     0,     0,     0,   439,
     0,     0,   226,    91,     0,     0,    92,    93,    94,     0,
    95,    44,     0,     0,     0,     0,    96,     0,     0,    97,
    41,     0,     0,    98,     0,    99,   100,    42,    43,    44,
    45,    46,     0,     0,     0,   -12,   101,    47,     0,     0,
     0,    48,     0,    49,    50,     0,     0,     0,     0,    51,
    52,   -12,     1,     0,     2,     3,     4,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    88,     0,    21,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    22,    23,
    24,    25,     0,    26,     0,     0,     0,     0,     0,     0,
     0,    27,     0,    28,    29,    30,     0,     0,     0,     0,
     0,     0,     0,    31,    32,    33,     0,     0,    34,    35,
     0,    36,    37,     0,     0,    38,     0,     0,     0,     0,
     0,    89,     0,     0,     0,     0,     0,     0,     0,    39,
    40,     0,     0,   758,     0,     0,   226,    91,     0,     0,
    92,    93,    94,     0,    95,    44,     0,     0,     0,     0,
    96,     0,     0,    97,     0,    41,     0,    98,     0,    99,
   100,     0,    42,    43,    44,    45,    46,     0,     0,     0,
   101,     0,    47,     0,     0,     0,    48,     0,    49,    50,
     0,     0,     0,     0,    51,    52,     1,     0,     2,     3,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,     0,    88,    21,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    22,    23,    24,    25,     0,    26,     0,     0,
     0,     0,     0,     0,     0,    27,     0,    28,    29,    30,
     0,     0,     0,     0,     0,     0,     0,    31,    32,    33,
     0,     0,    34,    35,     0,    36,    37,     0,     0,    38,
     0,     0,     0,     0,     0,     0,    89,     0,     0,     0,
     0,     0,     0,    39,    40,     0,     0,     0,     0,     0,
     0,    90,    91,     0,     0,    92,    93,    94,     0,    95,
    44,     0,    88,     0,     0,    96,     0,     0,    97,    41,
     0,     0,    98,     0,    99,   100,    42,    43,    44,    45,
    46,     0,     0,     0,   -12,   101,    47,     0,     0,     0,
    48,     0,    49,    50,     0,     0,     0,     0,    51,    52,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,     0,     0,     0,     0,     0,     0,
    89,     0,     0,     0,     0,     0,     0,     0,     0,    22,
    23,    24,     0,     0,     0,   226,    91,     0,     0,    92,
    93,    94,     0,    95,    44,     0,    30,     0,     0,    96,
     0,     0,    97,     0,    31,    32,    98,     0,    99,   100,
     0,     0,     0,     0,     0,     0,    38,     0,     0,   101,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    39,    40,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   323,     0,     0,    41,     0,     0,     0,
     0,     0,     0,    42,    43,    44,    45,    46,     0,   325,
     0,     0,     0,    47,     0,     0,     0,   477,     0,    49,
    50,     0,     0,   458,     0,    51,    52,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    22,    23,    24,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
     0,    31,    32,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    38,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    39,    40,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   323,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    42,    43,     0,    45,    46,     0,   325,     0,     0,     0,
    47,     0,     0,     0,   457,     0,    49,    50,     0,     0,
   458,     0,    51,    52,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    22,    23,    24,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    30,     0,     0,     0,     0,     0,     0,     0,    31,    32,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    38,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    39,    40,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    41,     0,     0,     0,     0,     0,     0,    42,    43,    44,
    45,    46,     0,     0,     0,     0,     0,    47,     0,     0,
     0,   500,     0,    49,    50,     0,     0,     0,     0,    51,
    52,     2,     3,     4,    82,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
     0,     0,    21,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    22,    23,    24,    25,     0,
    26,     0,     0,     0,     0,     0,     0,     0,    27,     0,
     0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
    31,    32,    33,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    38,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    39,    40,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
    43,     0,    45,    46,     0,     0,   149,     0,     0,     0,
   278,     0,     0,     0,     0,    49,    50,     2,     3,     4,
    82,     6,     7,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,     0,     0,    21,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    22,    23,    24,    25,     0,    26,     0,     0,     0,
     0,     0,     0,     0,    27,     0,     0,     0,    30,     0,
     0,     0,     0,     0,     0,     0,    31,    32,    33,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    38,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    39,    40,     0,     0,     0,     0,     0,     2,
     3,     4,    82,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,     0,     0,
    21,     0,     0,     0,     0,    42,    43,     0,    45,    46,
     0,     0,   149,    22,    23,    24,    25,     0,     0,     0,
     0,    49,    50,     0,     0,     0,    27,     0,     0,     0,
    30,     0,     0,     0,     0,     0,     0,     0,    31,    32,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    38,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    39,    40,     0,     0,     0,     0,
     0,     0,     0,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    42,    43,     0,
    45,    46,    22,    23,    24,     0,     0,     0,     0,     0,
     0,     0,     0,    49,    50,     0,     0,     0,     0,    30,
     0,     0,     0,     0,     0,     0,     0,    31,    32,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    38,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    39,    40,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   323,     0,     0,   324,
     0,     0,     0,     0,     0,     0,    42,    43,     0,    45,
    46,     0,   325,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    49,    50,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    22,    23,    24,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    30,     0,     0,     0,     0,     0,     0,     0,    31,    32,
     0,     0,   241,     0,     0,     0,     0,     0,     0,     0,
    38,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    39,    40,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
     0,     0,     0,     0,     0,     0,     0,    42,    43,     0,
    45,    46,     0,     0,   242,    22,    23,    24,     0,     0,
     0,     0,     0,    49,    50,     0,     0,     0,     0,     0,
     0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
    31,    32,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    38,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    39,    40,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
    43,     0,    45,    46,     0,   325,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    49,    50,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    22,    23,    24,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
     0,    31,    32,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    38,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    39,    40,     0,
     0,     0,     0,     0,     0,     0,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    42,    43,     0,    45,    46,    22,    23,    24,   448,     0,
     0,     0,     0,     0,     0,     0,    49,    50,     0,     0,
     0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
    31,    32,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    38,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    39,    40,     0,     0,
     0,     0,     0,     0,     0,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    42,
    43,     0,    45,    46,    22,    23,    24,   709,     0,     0,
     0,     0,     0,     0,     0,    49,    50,     0,     0,     0,
     0,    30,     0,     0,     0,     0,     0,     0,     0,    31,
    32,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    38,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    39,    40,     0,     0,     0,
     0,     0,     0,     0,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,   716,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    42,    43,
     0,    45,    46,    22,    23,    24,     0,     0,     0,     0,
     0,     0,     0,     0,    49,    50,     0,     0,     0,     0,
    30,     0,     0,     0,     0,     0,     0,     0,    31,    32,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    38,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    39,    40,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    42,    43,     0,
    45,    46,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    49,    50,   177,   178,   288,     0,   289,
   290,   291,   292,   293,   294,   295,   296,     0,     0,     0,
   179,    88,     0,   180,   298,     0,     0,     0,     0,   181,
     0,   299,     0,     0,     0,   182,   183,   184,   185,   186,
   187,     0,     0,     0,     0,   188,     0,     0,     0,   189,
     0,     0,   190,   191,     0,   192,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   193,   194,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   515,    91,   195,   196,    92,    93,
    94,     0,     0,    44,     0,     0,   197,   301,   149,     0,
     0,   198,     0,     0,     0,   199,     0,     0,   200,   177,
   178,     0,     0,     0,     0,   201,   566,     0,   202,   203,
     0,     0,   204,   205,   179,    88,     0,   180,     0,     0,
     0,     0,     0,   181,     0,     0,     0,     0,     0,   182,
   183,   184,   185,   186,   187,     0,     0,     0,     0,   188,
     0,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   193,   194,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   567,    91,
   195,   196,    92,    93,    94,     0,   258,    44,     0,     0,
   197,     0,   350,   568,     0,   198,     0,     0,     0,   199,
     0,     0,   200,     0,   427,   428,   177,   178,     0,   201,
     0,     0,   202,   203,     0,     0,   204,   205,     0,     0,
     0,   179,    88,     0,   180,     0,     0,     0,     0,     0,
   181,     0,     0,     0,     0,     0,   182,   183,   184,   185,
   186,   187,     0,     0,     0,     0,   188,     0,     0,     0,
   189,     0,     0,   190,   191,     0,   192,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   193,   194,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   567,    91,   195,   196,    92,
    93,    94,     0,   258,    44,     0,     0,   197,     0,   350,
   833,     0,   198,     0,     0,     0,   199,     0,     0,   200,
     0,   427,   428,   177,   178,     0,   201,     0,     0,   202,
   203,     0,     0,   204,   205,     0,     0,     0,   179,    88,
     0,   180,     0,     0,     0,     0,     0,   181,     0,     0,
     0,     0,     0,   182,   183,   184,   185,   186,   187,     0,
     0,     0,     0,   188,     0,     0,     0,   189,     0,     0,
   190,   191,     0,   192,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   193,
   194,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   567,    91,   195,   196,    92,    93,    94,     0,
   258,    44,     0,     0,   197,     0,   350,   848,     0,   198,
     0,     0,     0,   199,     0,     0,   200,     0,   427,   428,
   177,   178,     0,   201,     0,     0,   202,   203,     0,     0,
   204,   205,     0,     0,     0,   179,    88,     0,   180,     0,
     0,     0,     0,     0,   181,     0,     0,     0,     0,     0,
   182,   183,   184,   185,   186,   187,     0,     0,     0,     0,
   188,     0,     0,     0,   189,     0,     0,   190,   191,     0,
   192,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   193,   194,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   567,
    91,   195,   196,    92,    93,    94,     0,   258,    44,     0,
     0,   197,     0,   350,  1036,     0,   198,     0,     0,     0,
   199,     0,     0,   200,     0,   427,   428,   177,   178,     0,
   201,     0,     0,   202,   203,     0,     0,   204,   205,     0,
     0,     0,   179,    88,     0,   180,     0,     0,     0,     0,
     0,   181,     0,     0,     0,     0,     0,   182,   183,   184,
   185,   186,   187,     0,     0,     0,     0,   188,     0,     0,
     0,   189,     0,     0,   190,   191,     0,   192,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   193,   194,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   567,    91,   195,   196,
    92,    93,    94,     0,   258,    44,     0,     0,   197,     0,
   350,     0,     0,   198,     0,     0,     0,   199,     0,     0,
   200,     0,   427,   428,   177,   178,     0,   201,     0,     0,
   202,   203,     0,     0,   204,   205,     0,     0,     0,   179,
    88,     0,   180,     0,     0,     0,     0,     0,   181,     0,
     0,     0,     0,     0,   182,   183,   184,   185,   186,   187,
     0,     0,     0,     0,   188,     0,     0,     0,   189,     0,
     0,   190,   191,     0,   192,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   193,   194,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    41,    91,   195,   196,    92,    93,    94,
     0,     0,    44,     0,     0,   197,     0,   350,     0,     0,
   198,     0,     0,     0,   199,     0,     0,   200,   177,   178,
     0,     0,     0,     0,   201,     0,     0,   202,   203,     0,
     0,   204,   205,   179,    88,     0,   180,     0,     0,     0,
     0,     0,   181,     0,     0,     0,     0,     0,   182,   183,
   184,   185,   186,   187,     0,     0,     0,     0,   188,     0,
     0,     0,   189,     0,     0,   190,   191,     0,   192,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   193,   194,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    41,    91,   195,
   196,    92,    93,    94,     0,     0,    44,     0,     0,   197,
   521,     0,     0,     0,   198,     0,     0,     0,   199,     0,
     0,   200,   177,   178,     0,     0,     0,     0,   201,     0,
     0,   202,   203,     0,     0,   204,   205,   179,    88,     0,
   180,     0,     0,     0,     0,     0,   181,     0,     0,     0,
     0,     0,   182,   183,   184,   185,   186,   187,     0,     0,
     0,     0,   188,     0,     0,     0,   189,     0,     0,   190,
   191,     0,   192,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   193,   194,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    41,    91,   195,   196,    92,    93,    94,     0,     0,
    44,     0,     0,   197,     0,     0,     0,     0,   198,     0,
     0,     0,   199,   613,     0,   200,   177,   178,     0,     0,
     0,     0,   201,     0,     0,   202,   203,     0,     0,   204,
   205,   179,    88,     0,   180,     0,     0,     0,     0,     0,
   181,     0,     0,     0,     0,     0,   182,   183,   184,   185,
   186,   187,     0,     0,     0,     0,   188,     0,     0,     0,
   189,     0,     0,   190,   191,     0,   192,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   193,   194,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    41,    91,   195,   196,    92,
    93,    94,     0,     0,    44,     0,     0,   197,     0,     0,
     0,     0,   198,     0,     0,     0,   199,     0,     0,   200,
   177,   178,     0,   645,     0,     0,   201,     0,     0,   202,
   203,     0,     0,   204,   205,   179,    88,     0,   180,     0,
     0,     0,     0,     0,   181,     0,     0,     0,     0,     0,
   182,   183,   184,   185,   186,   187,     0,     0,     0,     0,
   188,     0,     0,     0,   189,     0,     0,   190,   191,     0,
   192,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   193,   194,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
    91,   195,   196,    92,    93,    94,     0,     0,    44,     0,
     0,   197,     0,     0,     0,     0,   198,     0,     0,     0,
   199,   700,     0,   200,   177,   178,     0,     0,     0,     0,
   201,     0,     0,   202,   203,     0,     0,   204,   205,   179,
    88,     0,   180,     0,     0,     0,     0,     0,   181,     0,
     0,     0,     0,     0,   182,   183,   184,   185,   186,   187,
     0,     0,     0,     0,   188,     0,     0,     0,   189,     0,
     0,   190,   191,     0,   192,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   193,   194,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    41,    91,   195,   196,    92,    93,    94,
     0,     0,    44,     0,     0,   197,     0,     0,     0,     0,
   198,     0,     0,     0,   199,     0,     0,   200,   177,   178,
     0,   771,     0,     0,   201,     0,     0,   202,   203,     0,
     0,   204,   205,   179,    88,     0,   180,     0,     0,     0,
     0,     0,   181,     0,     0,     0,     0,     0,   182,   183,
   184,   185,   186,   187,     0,     0,     0,     0,   188,     0,
     0,     0,   189,     0,     0,   190,   191,     0,   192,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   193,   194,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    41,    91,   195,
   196,    92,    93,    94,     0,     0,    44,     0,     0,   197,
     0,     0,     0,     0,   198,     0,     0,     0,   199,     0,
     0,   200,   177,   178,     0,   786,     0,     0,   201,     0,
     0,   202,   203,     0,     0,   204,   205,   179,    88,     0,
   180,     0,     0,     0,     0,     0,   181,     0,     0,     0,
     0,     0,   182,   183,   184,   185,   186,   187,     0,     0,
     0,     0,   188,     0,     0,     0,   189,     0,     0,   190,
   191,     0,   192,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   193,   194,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    41,    91,   195,   196,    92,    93,    94,     0,     0,
    44,     0,     0,   197,   808,     0,     0,     0,   198,     0,
     0,     0,   199,     0,     0,   200,   177,   178,     0,     0,
     0,     0,   201,     0,     0,   202,   203,     0,     0,   204,
   205,   179,    88,     0,   180,     0,     0,     0,     0,     0,
   181,     0,     0,     0,     0,     0,   182,   183,   184,   185,
   186,   187,     0,     0,     0,     0,   188,     0,     0,     0,
   189,     0,     0,   190,   191,     0,   192,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   193,   194,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    41,    91,   195,   196,    92,
    93,    94,     0,     0,    44,     0,     0,   197,   810,     0,
     0,     0,   198,     0,     0,     0,   199,     0,     0,   200,
   177,   178,     0,     0,     0,     0,   201,     0,     0,   202,
   203,     0,     0,   204,   205,   179,    88,     0,   180,     0,
     0,     0,     0,     0,   181,     0,     0,     0,     0,     0,
   182,   183,   184,   185,   186,   187,     0,     0,     0,     0,
   188,     0,     0,     0,   189,     0,     0,   190,   191,     0,
   192,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   193,   194,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
    91,   195,   196,    92,    93,    94,     0,     0,    44,     0,
     0,   197,     0,     0,     0,     0,   198,     0,     0,     0,
   199,   914,     0,   200,   177,   178,     0,     0,     0,     0,
   201,     0,     0,   202,   203,     0,     0,   204,   205,   179,
    88,     0,   180,     0,     0,     0,     0,     0,   181,     0,
     0,     0,     0,     0,   182,   183,   184,   185,   186,   187,
     0,     0,     0,     0,   188,     0,     0,     0,   189,     0,
     0,   190,   191,     0,   192,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   193,   194,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    41,    91,   195,   196,    92,    93,    94,
     0,     0,    44,     0,     0,   197,     0,     0,     0,     0,
   198,     0,     0,     0,   199,   917,     0,   200,   177,   178,
     0,     0,     0,     0,   201,     0,     0,   202,   203,     0,
     0,   204,   205,   179,    88,     0,   180,     0,     0,     0,
     0,     0,   181,     0,     0,     0,     0,     0,   182,   183,
   184,   185,   186,   187,     0,     0,     0,     0,   188,     0,
     0,     0,   189,     0,     0,   190,   191,     0,   192,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   193,   194,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    41,    91,   195,
   196,    92,    93,    94,     0,     0,    44,     0,     0,   197,
   920,     0,     0,     0,   198,     0,     0,     0,   199,     0,
     0,   200,   177,   178,     0,     0,     0,     0,   201,     0,
     0,   202,   203,     0,     0,   204,   205,   179,    88,     0,
   180,     0,     0,     0,     0,     0,   181,     0,     0,     0,
     0,     0,   182,   183,   184,   185,   186,   187,     0,     0,
     0,     0,   188,     0,     0,     0,   189,     0,     0,   190,
   191,     0,   192,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   193,   194,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    41,    91,   195,   196,    92,    93,    94,     0,     0,
    44,     0,     0,   197,     0,     0,     0,     0,   198,     0,
     0,     0,   199,  1007,     0,   200,   177,   178,     0,     0,
     0,     0,   201,     0,     0,   202,   203,     0,     0,   204,
   205,   179,    88,     0,   180,     0,     0,     0,     0,     0,
   181,     0,     0,     0,     0,     0,   182,   183,   184,   185,
   186,   187,     0,     0,     0,     0,   188,     0,     0,     0,
   189,     0,     0,   190,   191,     0,   192,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   193,   194,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    41,    91,   195,   196,    92,
    93,    94,     0,     0,    44,     0,     0,   197,     0,     0,
     0,     0,   198,     0,     0,     0,   199,  1011,     0,   200,
   177,   178,     0,     0,     0,     0,   201,     0,     0,   202,
   203,     0,     0,   204,   205,   179,    88,     0,   180,     0,
     0,     0,     0,     0,   181,     0,     0,     0,     0,     0,
   182,   183,   184,   185,   186,   187,     0,     0,     0,     0,
   188,     0,     0,     0,   189,     0,     0,   190,   191,     0,
   192,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   193,   194,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
    91,   195,   196,    92,    93,    94,     0,     0,    44,     0,
     0,   197,     0,     0,     0,     0,   198,     0,     0,     0,
   199,  1013,     0,   200,   177,   178,     0,     0,     0,     0,
   201,     0,     0,   202,   203,     0,     0,   204,   205,   179,
    88,     0,   180,     0,     0,     0,     0,     0,   181,     0,
     0,     0,     0,     0,   182,   183,   184,   185,   186,   187,
     0,     0,     0,     0,   188,     0,     0,     0,   189,     0,
     0,   190,   191,     0,   192,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   193,   194,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    41,    91,   195,   196,    92,    93,    94,
     0,     0,    44,     0,     0,   197,     0,     0,     0,     0,
   198,     0,     0,     0,   199,  1090,     0,   200,   177,   178,
     0,     0,     0,     0,   201,     0,     0,   202,   203,     0,
     0,   204,   205,   179,    88,     0,   180,     0,     0,     0,
     0,     0,   181,     0,     0,     0,     0,     0,   182,   183,
   184,   185,   186,   187,     0,     0,     0,     0,   188,     0,
     0,     0,   189,     0,     0,   190,   191,     0,   192,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   193,   194,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    41,    91,   195,
   196,    92,    93,    94,     0,     0,    44,     0,     0,   197,
     0,     0,     0,     0,   198,     0,     0,     0,   199,     0,
     0,   200,   177,   178,     0,     0,     0,     0,   201,     0,
     0,   202,   203,     0,     0,   204,   205,   179,    88,     0,
   180,     0,     0,     0,     0,     0,   181,     0,     0,     0,
     0,     0,   182,   183,   184,   185,   186,   187,     0,     0,
     0,     0,   188,     0,     0,     0,   189,     0,     0,   190,
   191,     0,   192,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   193,   194,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   776,    91,   195,   196,    92,    93,    94,     0,     0,
    44,   177,   178,   197,     0,     0,     0,     0,   198,     0,
     0,     0,   199,     0,     0,   200,   179,    88,     0,     0,
     0,     0,   201,     0,     0,   202,   203,     0,     0,   204,
   205,   182,   183,   184,   185,   186,   187,     0,     0,     0,
     0,     0,     0,     0,     0,   189,     0,     0,   190,   191,
     0,   192,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   193,   194,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    41,    91,   195,   196,    92,    93,    94,     0,     0,    44,
   177,   178,   197,     0,   350,     0,     0,   198,     0,     0,
     0,   199,     0,     0,   200,   179,    88,     0,     0,     0,
     0,   201,     0,     0,   202,   203,     0,     0,   204,   205,
   182,   183,   184,   185,   186,   187,     0,     0,     0,     0,
     0,     0,     0,     0,   189,     0,     0,   190,   191,     0,
   192,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   193,   194,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
    91,   195,   196,    92,    93,    94,     0,     0,    44,   177,
   178,   197,     0,   744,     0,     0,   198,     0,     0,     0,
   199,     0,     0,   200,   179,    88,     0,     0,     0,     0,
   201,     0,     0,   202,   203,     0,     0,   204,   205,   182,
   183,   184,   185,   186,   187,     0,     0,     0,     0,     0,
     0,     0,     0,   189,     0,     0,   190,   191,     0,   192,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   193,   194,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    41,    91,
   195,   196,    92,    93,    94,     0,     0,    44,   177,   178,
   197,     0,     0,     0,     0,   198,     0,     0,     0,   343,
     0,     0,   200,   179,    88,     0,     0,     0,     0,   201,
     0,     0,   202,   203,     0,     0,   204,   205,   182,   183,
   184,   185,   186,   187,     0,     0,     0,     0,     0,     0,
     0,     0,   189,     0,     0,   190,   191,     0,   192,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   193,   194,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    41,    91,   195,
   196,    92,    93,    94,     0,     0,    44,   177,   178,   197,
     0,     0,     0,     0,   198,     0,     0,     0,   346,     0,
     0,   200,   179,    88,     0,     0,     0,     0,   201,     0,
     0,   202,   203,     0,     0,   204,   205,   182,   183,   184,
   185,   186,   187,     0,     0,     0,     0,     0,     0,     0,
     0,   189,     0,     0,   190,   191,     0,   192,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   193,   194,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    41,    91,   195,   196,
    92,    93,    94,     0,     0,    44,   177,   178,   197,     0,
     0,     0,     0,   198,     0,     0,     0,   199,     0,     0,
   200,   179,    88,     0,     0,     0,     0,   201,     0,     0,
   202,   203,     0,     0,   204,   205,   182,   183,   184,   185,
   186,   187,     0,     0,     0,     0,     0,     0,     0,     0,
   189,     0,     0,   190,   191,     0,   192,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   193,   194,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    41,    91,   195,   196,    92,
    93,    94,     0,     0,    44,     0,     0,   197,     0,     0,
     0,     0,   198,     0,     0,     0,   976,     0,     0,   200,
     0,     0,     0,     0,     0,     0,   201,     0,     0,   202,
   203,     0,     0,   204,   205
};

static short yycheck[] = {     0,
    70,   118,   170,   125,   139,   381,   278,   124,   378,   304,
   305,   464,   307,    73,    70,   350,   155,   384,   385,   180,
    21,   168,   390,   391,    25,   380,   392,   393,   155,   383,
   181,   155,     0,   414,   100,   181,   386,   387,   388,   389,
   484,   813,   618,   280,   540,   176,   116,    48,   198,   795,
   428,   201,   202,    21,   266,   116,    57,    25,    17,    81,
   116,   116,    63,    64,    65,   100,    67,   199,    94,     5,
     6,   221,    73,    74,   480,   370,   112,   459,   144,   139,
   317,   244,   114,   116,   139,   109,   110,   945,   127,    57,
   122,   151,   545,   132,   538,    63,    64,    65,   480,    67,
   506,    95,    96,   547,   825,    73,   139,   143,   134,   144,
   242,   127,   113,   114,   886,    66,    73,   139,   121,   145,
   866,   246,     0,   501,   135,   145,   127,   128,   129,   149,
   131,   132,   133,   134,   137,   121,   857,  1022,   139,   133,
   134,   266,   638,    21,   525,   113,   114,    25,   149,   133,
   151,   137,  1037,   114,    21,   114,   114,   158,    25,   127,
   128,   129,   123,   131,   132,   133,   134,   130,   744,   114,
   121,   139,    96,   136,   135,   133,  1034,   128,   325,    57,
   341,   149,   139,   151,   128,    63,    64,    65,    48,    67,
   136,   135,   149,   129,   151,    73,    63,    64,    65,   145,
    67,   328,    62,   975,   249,   930,    73,   114,   339,   981,
   266,   343,   127,   345,   346,   114,   123,   133,   131,   279,
   135,   128,   127,   147,   148,  1110,  1111,   952,   284,  1114,
   362,  1003,   953,   954,   133,   113,   114,   150,   151,   960,
   139,    95,    96,   244,   394,   395,   396,   135,  1106,   127,
   128,   129,   113,   131,   132,   133,   134,   131,   130,   496,
  1145,   139,   122,  1148,   136,   477,   132,   428,   114,   143,
   144,   149,   139,   151,   140,   141,   244,   322,   279,   133,
   134,    54,   149,   618,   151,    57,  1058,   133,   500,   452,
   453,   454,   152,   338,   411,   291,   297,    41,   415,   571,
   678,   131,   298,   304,   305,   128,   307,   135,   689,   333,
   427,   279,   130,  1038,  1039,   239,   548,   464,  1043,  1040,
   150,   151,   279,  1044,   142,    69,   114,    94,   113,   297,
   114,   133,   256,   127,   335,   123,   304,   305,   140,   307,
   501,   113,   114,   127,   114,   115,   130,   304,   305,   133,
   307,   127,   122,    26,  1126,   127,   128,   129,   135,   131,
   132,   133,   134,   130,   114,   127,   114,   134,   130,   370,
   114,   115,   116,   117,   118,   119,   120,   127,   136,   123,
  1152,   128,   140,   827,   114,   115,   136,  1112,   130,   139,
  1115,   135,   122,   728,   138,   530,   133,   139,   545,   145,
    26,   279,   370,   149,   130,   527,   128,   702,   540,   744,
   136,   643,   279,   370,   130,   793,    89,   277,   116,   297,
   136,   477,   136,   447,   480,   128,   304,   305,   101,   307,
   297,   145,    90,    91,    92,   585,   136,   304,   305,   127,
   307,   133,   130,     0,   500,   145,   306,   659,   680,   617,
   506,   452,   453,   454,   135,   130,   728,    90,    91,    92,
   461,   673,   130,    89,   139,    22,    20,    21,   136,    26,
   530,    28,   114,   135,   553,   101,   477,   135,   479,   141,
   648,   123,   140,   141,   452,   453,   454,   619,   489,   621,
   491,    48,   370,   135,   662,   419,   138,   136,   127,   500,
    57,   140,   135,   370,   125,    62,   638,   140,   141,   132,
   649,   535,   133,    70,   135,    72,   517,   678,    75,   854,
   141,   489,   649,   491,   663,   526,   130,    84,   130,   530,
   526,   130,    89,   130,    76,   139,   663,   125,   770,   663,
   139,   130,   139,   775,   101,   133,   121,   135,   926,   517,
   139,   127,   784,   141,   130,   228,   113,   114,   526,   116,
   517,   234,   530,   835,   711,   122,   645,   240,  1021,   526,
   127,   128,   129,   530,   131,   132,   133,   134,   127,   544,
   707,   130,   854,   507,   508,   736,   818,   748,   556,   716,
   736,   114,   130,   127,   826,   152,   130,   136,   136,   122,
   123,   124,   228,   659,   135,   231,   127,   724,   234,   985,
   986,   489,   982,   491,   240,   910,   951,   673,   130,   176,
   676,   988,   989,   740,   741,   127,   994,   995,   114,   984,
   996,   997,   793,   987,   127,   128,   122,   123,   124,   517,
   990,   991,   992,   993,   704,   131,   647,   135,   526,   135,
   517,   177,   530,   179,   180,   181,   130,   143,   144,   526,
   130,   114,   136,   530,   135,   666,   136,   193,   194,   130,
   123,   228,   198,    86,   231,   201,   202,   234,   131,   951,
   132,   130,   135,   240,   708,    98,   981,   136,   767,   114,
   143,   144,   771,   135,   130,   221,   692,   122,   123,   124,
   136,   702,   115,   704,   246,   114,   751,   786,   127,   266,
   135,   130,   130,   122,   123,   124,   141,   489,   136,   491,
   277,   135,   130,   768,   266,   129,   135,   284,   136,   286,
   114,   655,   289,   135,   702,   135,   704,   782,   122,   123,
   124,   891,   284,   135,   128,   702,   114,   704,   130,   306,
   715,   127,   128,   721,   136,   123,   429,   125,   890,   909,
   882,   135,   125,   131,   437,   926,   127,   135,   130,   130,
   133,   297,   135,   130,   136,   143,   144,   130,   141,   136,
   114,   127,   339,   136,   130,   864,   199,   788,   122,   123,
   124,  1023,   135,   130,   130,   129,   875,   131,   763,   136,
   136,   130,   135,   429,   800,   932,   130,   136,   940,   135,
   806,   437,   136,    97,    98,   341,   130,   934,   135,   445,
   788,   877,   136,   135,   702,   238,   704,   127,   131,   135,
   130,  1126,   135,   127,    18,   702,   130,   704,   141,   127,
   143,   144,   130,   135,   976,    99,   978,   146,   998,   999,
  1000,   147,   378,   148,   380,   381,   382,   383,   384,   385,
   386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
   396,   128,   429,   121,  1021,    17,    18,    19,   879,   114,
   437,    93,    94,   296,   452,   453,   454,   114,   445,    86,
    87,     5,     6,   858,  1026,   135,   861,   114,   968,   129,
   130,   134,   428,    22,    23,   129,   871,  1057,   136,   910,
   788,   879,   968,   129,   130,   457,   129,   125,   914,   129,
   477,   917,   129,   480,   129,  1093,   129,   130,   147,   148,
   343,   135,   489,   346,   491,   477,   144,    97,    98,    93,
    94,   128,   910,   500,   129,   130,   359,   155,   128,   506,
   129,   130,   114,   910,   129,   130,   798,   799,   500,   632,
   122,   123,   124,   135,  1125,   135,   379,   114,   127,   131,
  1102,   127,   139,   135,   135,   501,   129,   973,   114,   141,
   981,   143,   144,   120,   132,   114,   136,   123,  1156,   129,
   955,   127,  1048,   145,   139,   131,   961,   136,   142,   135,
   125,   879,   628,   416,   100,  1122,   632,   143,   144,   114,
  1006,  1007,   135,   981,  1010,  1011,   788,  1013,   136,   156,
   133,   129,   134,   134,   981,   134,   130,   130,   129,   139,
   136,   114,   910,   130,   136,   243,   135,   245,    61,   122,
   123,   124,   114,   910,   128,   135,    47,   136,   131,  1119,
   130,   127,   135,   130,   135,   128,   139,   139,    30,   585,
   143,   144,   127,  1119,    45,   135,    41,   145,    81,   136,
   136,   628,   136,   130,   282,   632,   136,   114,   101,   102,
   103,   104,   105,   106,   107,   108,   109,   110,  1084,   139,
   130,  1087,   136,  1089,  1090,   130,   130,   510,   511,   130,
   130,   514,   659,   981,   517,   116,   130,   879,   136,   132,
   136,   136,   129,   142,   981,   136,   673,   659,   136,   676,
   129,   136,   136,   142,    99,  1126,   136,   127,   685,   136,
   803,   673,   128,    46,   676,  1131,   111,   135,   129,   114,
   115,   278,   135,   118,   119,   120,   128,   122,   123,   127,
   136,   127,   678,   128,    82,   129,   131,   134,  1126,   128,
   135,    25,   137,   138,   114,   140,   141,   133,   139,  1126,
   114,   136,   114,   148,   136,   136,   130,   803,   122,   123,
   124,   125,   142,   136,   136,   136,   142,   131,   136,   128,
    48,   135,   135,   128,   139,   332,   136,   129,   127,   143,
   144,   135,    83,   121,   130,   136,   136,   127,   115,   136,
   736,   135,   129,   350,   136,   136,   353,   354,   355,   356,
   357,   358,   748,   128,   361,   136,   136,   136,   136,   129,
    28,   788,   128,   135,    99,   139,   373,    99,   129,   376,
   653,    76,    77,    78,    79,    80,   803,   146,  1126,   457,
    85,    86,    87,   135,    84,   130,    25,   135,   129,  1126,
   397,   130,   129,   129,   136,   135,   129,   793,   127,   477,
   116,   128,   409,   116,   115,   136,   484,   414,   129,   129,
   136,   694,   695,   135,   116,   130,   130,   136,   136,   129,
   128,     0,     0,  1119,   136,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,   136,
   136,   658,  1048,   124,    39,   282,   676,  1095,   277,   527,
   877,   458,   879,    75,    37,    38,    39,    51,   721,   716,
   538,  1021,   169,   711,   240,   430,   382,   628,   445,   547,
   946,    54,  1031,   803,    -1,    -1,    -1,   363,  1122,    62,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    74,   888,    -1,    -1,   891,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    88,    89,    -1,    -1,    -1,
    -1,    -1,    -1,   909,    -1,    -1,    -1,    -1,   525,    -1,
   527,    -1,    -1,    -1,   807,   808,    -1,   810,    -1,   812,
   926,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,    -1,
    -1,   968,   125,    -1,    -1,    -1,    -1,    -1,    -1,   832,
    -1,    -1,    -1,    -1,   137,   138,    -1,    25,    26,    -1,
    -1,    -1,    -1,    -1,   571,    -1,    -1,    -1,    -1,    -1,
    -1,   649,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   659,    -1,    -1,    -1,   663,   982,    -1,   984,   985,
   986,   987,   988,   989,   990,   991,   992,   993,   994,   995,
   996,   997,   998,   999,  1000,    -1,    -1,   890,    -1,    -1,
    -1,   618,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,  1048,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    99,    -1,   916,    -1,    -1,   919,   920,    -1,    -1,
    -1,    -1,    -1,   650,    -1,    -1,   114,   115,    -1,   656,
   118,   119,   120,    -1,   122,   123,    -1,   664,    -1,    -1,
   128,  1057,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
   138,    -1,    25,    26,    -1,    -1,    -1,   145,    -1,    -1,
   148,   149,   689,    -1,   152,   153,    -1,    40,    41,    -1,
    43,    -1,  1119,   976,    -1,    -1,    49,    -1,    -1,    -1,
   983,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
    -1,    -1,    65,    -1,    -1,    -1,    69,   795,  1001,    72,
    73,   728,    75,   730,    -1,   732,   733,    -1,   735,  1125,
    -1,    -1,  1015,    41,    -1,    -1,    -1,   744,    91,    92,
   747,    -1,    -1,  1026,    -1,    -1,  1029,    -1,    -1,   827,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,   131,    -1,
    -1,    -1,   135,    -1,    -1,   138,    -1,    -1,   866,   142,
    -1,    99,   145,    -1,    -1,   148,   149,    -1,    -1,   152,
   153,    -1,    -1,   111,   882,    -1,   114,   115,    -1,    -1,
   118,   119,   120,    -1,   122,   123,    -1,    -1,    -1,    -1,
   128,    -1,    -1,   131,    -1,    -1,    -1,   135,   835,   137,
   138,    -1,   140,   141,    -1,    -1,    -1,    -1,    -1,    -1,
   148,    -1,    -1,    -1,    -1,    -1,    -1,   854,     3,     4,
     5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    -1,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
    -1,    -1,    -1,    -1,    49,    50,    51,    -1,    -1,    54,
    55,    56,    57,    58,    59,    60,    -1,    62,    63,    64,
    65,    -1,    -1,    -1,    69,    -1,    -1,    72,    73,    74,
    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    88,    89,    -1,    91,    92,    -1,    -1,
    -1,    -1,    -1,    -1,   951,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,
   115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
   125,   126,   127,   128,    -1,    -1,   131,    -1,    -1,    -1,
   135,    -1,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,    -1,    -1,   152,   153,     3,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
    24,    25,    26,    27,    -1,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    -1,    -1,    -1,    -1,    49,    50,    51,    -1,    -1,
    54,    55,    56,    57,    58,    59,    60,    -1,    62,    63,
    64,    65,    -1,    -1,    -1,    69,    -1,    -1,    72,    73,
    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    89,    -1,    91,    92,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,    -1,   131,    -1,    -1,
    -1,   135,    -1,   137,   138,    -1,    -1,    -1,    -1,    -1,
    -1,   145,    -1,    -1,   148,   149,    -1,    -1,   152,   153,
     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    -1,
    -1,    24,    25,    26,    27,    -1,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
    43,    44,    -1,    -1,    -1,    -1,    49,    50,    51,    -1,
    -1,    54,    55,    56,    57,    58,    59,    60,    -1,    62,
    63,    64,    65,    -1,    -1,    -1,    69,    -1,    -1,    72,
    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    88,    89,    -1,    91,    92,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   125,   126,   127,   128,    -1,    -1,   131,    -1,
    -1,    -1,   135,    -1,   137,   138,    -1,    -1,    -1,    -1,
    -1,    -1,   145,    -1,    -1,   148,   149,    -1,    -1,   152,
   153,     3,     4,     5,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    -1,    -1,    24,    25,    26,    27,    -1,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
    42,    43,    44,    -1,    -1,    -1,    -1,    49,    50,    51,
    -1,    -1,    54,    55,    56,    57,    58,    59,    60,    -1,
    62,    63,    64,    65,    -1,    -1,    -1,    69,    -1,    -1,
    72,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,    -1,    91,
    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   114,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,   128,    -1,    -1,   131,
    -1,    -1,    -1,   135,    -1,   137,   138,    -1,    -1,    -1,
    -1,    -1,    -1,   145,    -1,    -1,   148,   149,    -1,    -1,
   152,   153,     3,     4,     5,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    -1,    -1,    24,    25,    26,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,    40,
    41,    42,    43,    -1,    -1,    -1,    -1,    -1,    49,    50,
    -1,    -1,    -1,    54,    55,    56,    57,    58,    59,    60,
    -1,    62,    63,    64,    65,    -1,    -1,    -1,    69,    -1,
    -1,    72,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,    -1,
    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,   126,   127,    -1,    -1,    -1,
   131,    -1,    -1,    -1,   135,    -1,   137,   138,    -1,    -1,
    -1,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,    -1,
    -1,   152,   153,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    -1,    -1,    24,    25,    26,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,
    40,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    50,    -1,    -1,    -1,    54,    55,    56,    57,    58,    59,
    60,    -1,    62,    63,    -1,    -1,    -1,    -1,    -1,    69,
    -1,    -1,    72,    73,    74,    75,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,
    -1,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,    -1,    -1,    -1,
    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,    -1,
    -1,    -1,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,
    -1,    -1,   152,   153,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
    -1,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    37,    38,    39,    40,    41,    -1,    43,
    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,
    54,    55,    56,    57,    58,    59,    60,    -1,    62,    63,
    -1,    65,    -1,    -1,    -1,    69,    -1,    -1,    72,    73,
    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    89,    -1,    91,    92,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
   124,   125,   126,    -1,   128,    -1,    -1,   131,    -1,    -1,
    -1,   135,    -1,   137,   138,    -1,    -1,    -1,    -1,    -1,
    -1,   145,    -1,    -1,   148,   149,    -1,    -1,   152,   153,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    -1,    -1,    -1,    25,    26,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
    38,    39,    40,    41,    -1,    43,    -1,    -1,    -1,    -1,
    -1,    49,    -1,    -1,    -1,    -1,    54,    55,    56,    57,
    58,    59,    60,    -1,    62,    63,    -1,    65,    -1,    -1,
    -1,    69,    -1,    -1,    72,    73,    74,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    88,    89,    -1,    91,    92,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,   116,   117,
   118,   119,   120,   121,   122,   123,   124,   125,   126,    -1,
    -1,    -1,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
   138,    -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,    -1,
   148,   149,    -1,    -1,   152,   153,     0,     1,    -1,     3,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    -1,    41,
    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    37,    38,    39,    40,    -1,    42,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    52,    53,
    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,
    64,    -1,    -1,    67,    68,    -1,    70,    71,    -1,    -1,
    74,    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    89,    -1,    -1,    -1,   111,
    -1,    -1,   114,   115,    -1,    -1,   118,   119,   120,    -1,
   122,   123,    -1,    -1,    -1,    -1,   128,    -1,    -1,   131,
   114,    -1,    -1,   135,    -1,   137,   138,   121,   122,   123,
   124,   125,    -1,    -1,    -1,   129,   148,   131,    -1,    -1,
    -1,   135,    -1,   137,   138,    -1,    -1,    -1,    -1,   143,
   144,     0,     1,    -1,     3,     4,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    41,    -1,    24,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,
    39,    40,    -1,    42,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    50,    -1,    52,    53,    54,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    62,    63,    64,    -1,    -1,    67,    68,
    -1,    70,    71,    -1,    -1,    74,    -1,    -1,    -1,    -1,
    -1,    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
    89,    -1,    -1,   111,    -1,    -1,   114,   115,    -1,    -1,
   118,   119,   120,    -1,   122,   123,    -1,    -1,    -1,    -1,
   128,    -1,    -1,   131,    -1,   114,    -1,   135,    -1,   137,
   138,    -1,   121,   122,   123,   124,   125,    -1,    -1,    -1,
   148,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,   138,
    -1,    -1,    -1,    -1,   143,   144,     1,    -1,     3,     4,
     5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    -1,    41,    24,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    37,    38,    39,    40,    -1,    42,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    50,    -1,    52,    53,    54,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,    64,
    -1,    -1,    67,    68,    -1,    70,    71,    -1,    -1,    74,
    -1,    -1,    -1,    -1,    -1,    -1,    99,    -1,    -1,    -1,
    -1,    -1,    -1,    88,    89,    -1,    -1,    -1,    -1,    -1,
    -1,   114,   115,    -1,    -1,   118,   119,   120,    -1,   122,
   123,    -1,    41,    -1,    -1,   128,    -1,    -1,   131,   114,
    -1,    -1,   135,    -1,   137,   138,   121,   122,   123,   124,
   125,    -1,    -1,    -1,   129,   148,   131,    -1,    -1,    -1,
   135,    -1,   137,   138,    -1,    -1,    -1,    -1,   143,   144,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,
    99,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
    38,    39,    -1,    -1,    -1,   114,   115,    -1,    -1,   118,
   119,   120,    -1,   122,   123,    -1,    54,    -1,    -1,   128,
    -1,    -1,   131,    -1,    62,    63,   135,    -1,   137,   138,
    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,   148,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    88,    89,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   111,    -1,    -1,   114,    -1,    -1,    -1,
    -1,    -1,    -1,   121,   122,   123,   124,   125,    -1,   127,
    -1,    -1,    -1,   131,    -1,    -1,    -1,   135,    -1,   137,
   138,    -1,    -1,   141,    -1,   143,   144,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   121,   122,    -1,   124,   125,    -1,   127,    -1,    -1,    -1,
   131,    -1,    -1,    -1,   135,    -1,   137,   138,    -1,    -1,
   141,    -1,   143,   144,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    37,    38,    39,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    89,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   114,    -1,    -1,    -1,    -1,    -1,    -1,   121,   122,   123,
   124,   125,    -1,    -1,    -1,    -1,    -1,   131,    -1,    -1,
    -1,   135,    -1,   137,   138,    -1,    -1,    -1,    -1,   143,
   144,     3,     4,     5,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    37,    38,    39,    40,    -1,
    42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,
    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    62,    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
   122,    -1,   124,   125,    -1,    -1,   128,    -1,    -1,    -1,
   132,    -1,    -1,    -1,    -1,   137,   138,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    -1,    -1,    24,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    37,    38,    39,    40,    -1,    42,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    54,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,    64,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    88,    89,    -1,    -1,    -1,    -1,    -1,     3,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
    24,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,   125,
    -1,    -1,   128,    37,    38,    39,    40,    -1,    -1,    -1,
    -1,   137,   138,    -1,    -1,    -1,    50,    -1,    -1,    -1,
    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    89,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,
   124,   125,    37,    38,    39,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   137,   138,    -1,    -1,    -1,    -1,    54,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    88,    89,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,   114,
    -1,    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,   124,
   125,    -1,   127,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   137,   138,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    37,    38,    39,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,
    -1,    -1,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    89,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,
   124,   125,    -1,    -1,   128,    37,    38,    39,    -1,    -1,
    -1,    -1,    -1,   137,   138,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   111,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
   122,    -1,   124,   125,    -1,   127,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   137,   138,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   121,   122,    -1,   124,   125,    37,    38,    39,   129,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   137,   138,    -1,    -1,
    -1,    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    62,    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    88,    89,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,
   122,    -1,   124,   125,    37,    38,    39,   129,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   137,   138,    -1,    -1,    -1,
    -1,    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,
    63,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    88,    89,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,   111,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,   122,
    -1,   124,   125,    37,    38,    39,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   137,   138,    -1,    -1,    -1,    -1,
    54,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    62,    63,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    88,    89,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   121,   122,    -1,
   124,   125,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   137,   138,    25,    26,    27,    -1,    29,
    30,    31,    32,    33,    34,    35,    36,    -1,    -1,    -1,
    40,    41,    -1,    43,    44,    -1,    -1,    -1,    -1,    49,
    -1,    51,    -1,    -1,    -1,    55,    56,    57,    58,    59,
    60,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    69,
    -1,    -1,    72,    73,    -1,    75,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   114,   115,   116,   117,   118,   119,
   120,    -1,    -1,   123,    -1,    -1,   126,   127,   128,    -1,
    -1,   131,    -1,    -1,    -1,   135,    -1,    -1,   138,    25,
    26,    -1,    -1,    -1,    -1,   145,    32,    -1,   148,   149,
    -1,    -1,   152,   153,    40,    41,    -1,    43,    -1,    -1,
    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,
    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,    65,
    -1,    -1,    -1,    69,    -1,    -1,    72,    73,    -1,    75,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    91,    92,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,
   116,   117,   118,   119,   120,    -1,   122,   123,    -1,    -1,
   126,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,   135,
    -1,    -1,   138,    -1,   140,   141,    25,    26,    -1,   145,
    -1,    -1,   148,   149,    -1,    -1,   152,   153,    -1,    -1,
    -1,    40,    41,    -1,    43,    -1,    -1,    -1,    -1,    -1,
    49,    -1,    -1,    -1,    -1,    -1,    55,    56,    57,    58,
    59,    60,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
    69,    -1,    -1,    72,    73,    -1,    75,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   114,   115,   116,   117,   118,
   119,   120,    -1,   122,   123,    -1,    -1,   126,    -1,   128,
   129,    -1,   131,    -1,    -1,    -1,   135,    -1,    -1,   138,
    -1,   140,   141,    25,    26,    -1,   145,    -1,    -1,   148,
   149,    -1,    -1,   152,   153,    -1,    -1,    -1,    40,    41,
    -1,    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,
    -1,    -1,    -1,    55,    56,    57,    58,    59,    60,    -1,
    -1,    -1,    -1,    65,    -1,    -1,    -1,    69,    -1,    -1,
    72,    73,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,
    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   114,   115,   116,   117,   118,   119,   120,    -1,
   122,   123,    -1,    -1,   126,    -1,   128,   129,    -1,   131,
    -1,    -1,    -1,   135,    -1,    -1,   138,    -1,   140,   141,
    25,    26,    -1,   145,    -1,    -1,   148,   149,    -1,    -1,
   152,   153,    -1,    -1,    -1,    40,    41,    -1,    43,    -1,
    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,
    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,
    65,    -1,    -1,    -1,    69,    -1,    -1,    72,    73,    -1,
    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,
   115,   116,   117,   118,   119,   120,    -1,   122,   123,    -1,
    -1,   126,    -1,   128,   129,    -1,   131,    -1,    -1,    -1,
   135,    -1,    -1,   138,    -1,   140,   141,    25,    26,    -1,
   145,    -1,    -1,   148,   149,    -1,    -1,   152,   153,    -1,
    -1,    -1,    40,    41,    -1,    43,    -1,    -1,    -1,    -1,
    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,    57,
    58,    59,    60,    -1,    -1,    -1,    -1,    65,    -1,    -1,
    -1,    69,    -1,    -1,    72,    73,    -1,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,   116,   117,
   118,   119,   120,    -1,   122,   123,    -1,    -1,   126,    -1,
   128,    -1,    -1,   131,    -1,    -1,    -1,   135,    -1,    -1,
   138,    -1,   140,   141,    25,    26,    -1,   145,    -1,    -1,
   148,   149,    -1,    -1,   152,   153,    -1,    -1,    -1,    40,
    41,    -1,    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,
    -1,    -1,    -1,    -1,    55,    56,    57,    58,    59,    60,
    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    69,    -1,
    -1,    72,    73,    -1,    75,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,   123,    -1,    -1,   126,    -1,   128,    -1,    -1,
   131,    -1,    -1,    -1,   135,    -1,    -1,   138,    25,    26,
    -1,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,    -1,
    -1,   152,   153,    40,    41,    -1,    43,    -1,    -1,    -1,
    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,
    57,    58,    59,    60,    -1,    -1,    -1,    -1,    65,    -1,
    -1,    -1,    69,    -1,    -1,    72,    73,    -1,    75,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,   123,    -1,    -1,   126,
   127,    -1,    -1,    -1,   131,    -1,    -1,    -1,   135,    -1,
    -1,   138,    25,    26,    -1,    -1,    -1,    -1,   145,    -1,
    -1,   148,   149,    -1,    -1,   152,   153,    40,    41,    -1,
    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,
    -1,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
    -1,    -1,    65,    -1,    -1,    -1,    69,    -1,    -1,    72,
    73,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,   131,    -1,
    -1,    -1,   135,   136,    -1,   138,    25,    26,    -1,    -1,
    -1,    -1,   145,    -1,    -1,   148,   149,    -1,    -1,   152,
   153,    40,    41,    -1,    43,    -1,    -1,    -1,    -1,    -1,
    49,    -1,    -1,    -1,    -1,    -1,    55,    56,    57,    58,
    59,    60,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
    69,    -1,    -1,    72,    73,    -1,    75,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,   123,    -1,    -1,   126,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,    -1,    -1,   138,
    25,    26,    -1,   142,    -1,    -1,   145,    -1,    -1,   148,
   149,    -1,    -1,   152,   153,    40,    41,    -1,    43,    -1,
    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,
    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,
    65,    -1,    -1,    -1,    69,    -1,    -1,    72,    73,    -1,
    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,   123,    -1,
    -1,   126,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,
   135,   136,    -1,   138,    25,    26,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,    -1,    -1,   152,   153,    40,
    41,    -1,    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,
    -1,    -1,    -1,    -1,    55,    56,    57,    58,    59,    60,
    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    69,    -1,
    -1,    72,    73,    -1,    75,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,
   131,    -1,    -1,    -1,   135,    -1,    -1,   138,    25,    26,
    -1,   142,    -1,    -1,   145,    -1,    -1,   148,   149,    -1,
    -1,   152,   153,    40,    41,    -1,    43,    -1,    -1,    -1,
    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,
    57,    58,    59,    60,    -1,    -1,    -1,    -1,    65,    -1,
    -1,    -1,    69,    -1,    -1,    72,    73,    -1,    75,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,   123,    -1,    -1,   126,
    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,   135,    -1,
    -1,   138,    25,    26,    -1,   142,    -1,    -1,   145,    -1,
    -1,   148,   149,    -1,    -1,   152,   153,    40,    41,    -1,
    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,
    -1,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
    -1,    -1,    65,    -1,    -1,    -1,    69,    -1,    -1,    72,
    73,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
   123,    -1,    -1,   126,   127,    -1,    -1,    -1,   131,    -1,
    -1,    -1,   135,    -1,    -1,   138,    25,    26,    -1,    -1,
    -1,    -1,   145,    -1,    -1,   148,   149,    -1,    -1,   152,
   153,    40,    41,    -1,    43,    -1,    -1,    -1,    -1,    -1,
    49,    -1,    -1,    -1,    -1,    -1,    55,    56,    57,    58,
    59,    60,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
    69,    -1,    -1,    72,    73,    -1,    75,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,   123,    -1,    -1,   126,   127,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,    -1,    -1,   138,
    25,    26,    -1,    -1,    -1,    -1,   145,    -1,    -1,   148,
   149,    -1,    -1,   152,   153,    40,    41,    -1,    43,    -1,
    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,
    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,
    65,    -1,    -1,    -1,    69,    -1,    -1,    72,    73,    -1,
    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,   123,    -1,
    -1,   126,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,
   135,   136,    -1,   138,    25,    26,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,    -1,    -1,   152,   153,    40,
    41,    -1,    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,
    -1,    -1,    -1,    -1,    55,    56,    57,    58,    59,    60,
    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    69,    -1,
    -1,    72,    73,    -1,    75,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,
   131,    -1,    -1,    -1,   135,   136,    -1,   138,    25,    26,
    -1,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,    -1,
    -1,   152,   153,    40,    41,    -1,    43,    -1,    -1,    -1,
    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,
    57,    58,    59,    60,    -1,    -1,    -1,    -1,    65,    -1,
    -1,    -1,    69,    -1,    -1,    72,    73,    -1,    75,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,   123,    -1,    -1,   126,
   127,    -1,    -1,    -1,   131,    -1,    -1,    -1,   135,    -1,
    -1,   138,    25,    26,    -1,    -1,    -1,    -1,   145,    -1,
    -1,   148,   149,    -1,    -1,   152,   153,    40,    41,    -1,
    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,
    -1,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
    -1,    -1,    65,    -1,    -1,    -1,    69,    -1,    -1,    72,
    73,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,   131,    -1,
    -1,    -1,   135,   136,    -1,   138,    25,    26,    -1,    -1,
    -1,    -1,   145,    -1,    -1,   148,   149,    -1,    -1,   152,
   153,    40,    41,    -1,    43,    -1,    -1,    -1,    -1,    -1,
    49,    -1,    -1,    -1,    -1,    -1,    55,    56,    57,    58,
    59,    60,    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,
    69,    -1,    -1,    72,    73,    -1,    75,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,   123,    -1,    -1,   126,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,   136,    -1,   138,
    25,    26,    -1,    -1,    -1,    -1,   145,    -1,    -1,   148,
   149,    -1,    -1,   152,   153,    40,    41,    -1,    43,    -1,
    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,
    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,
    65,    -1,    -1,    -1,    69,    -1,    -1,    72,    73,    -1,
    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,   123,    -1,
    -1,   126,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,
   135,   136,    -1,   138,    25,    26,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,    -1,    -1,   152,   153,    40,
    41,    -1,    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,
    -1,    -1,    -1,    -1,    55,    56,    57,    58,    59,    60,
    -1,    -1,    -1,    -1,    65,    -1,    -1,    -1,    69,    -1,
    -1,    72,    73,    -1,    75,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   114,   115,   116,   117,   118,   119,   120,
    -1,    -1,   123,    -1,    -1,   126,    -1,    -1,    -1,    -1,
   131,    -1,    -1,    -1,   135,   136,    -1,   138,    25,    26,
    -1,    -1,    -1,    -1,   145,    -1,    -1,   148,   149,    -1,
    -1,   152,   153,    40,    41,    -1,    43,    -1,    -1,    -1,
    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    55,    56,
    57,    58,    59,    60,    -1,    -1,    -1,    -1,    65,    -1,
    -1,    -1,    69,    -1,    -1,    72,    73,    -1,    75,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,   123,    -1,    -1,   126,
    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,   135,    -1,
    -1,   138,    25,    26,    -1,    -1,    -1,    -1,   145,    -1,
    -1,   148,   149,    -1,    -1,   152,   153,    40,    41,    -1,
    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,
    -1,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
    -1,    -1,    65,    -1,    -1,    -1,    69,    -1,    -1,    72,
    73,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   114,   115,   116,   117,   118,   119,   120,    -1,    -1,
   123,    25,    26,   126,    -1,    -1,    -1,    -1,   131,    -1,
    -1,    -1,   135,    -1,    -1,   138,    40,    41,    -1,    -1,
    -1,    -1,   145,    -1,    -1,   148,   149,    -1,    -1,   152,
   153,    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    69,    -1,    -1,    72,    73,
    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   114,   115,   116,   117,   118,   119,   120,    -1,    -1,   123,
    25,    26,   126,    -1,   128,    -1,    -1,   131,    -1,    -1,
    -1,   135,    -1,    -1,   138,    40,    41,    -1,    -1,    -1,
    -1,   145,    -1,    -1,   148,   149,    -1,    -1,   152,   153,
    55,    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    69,    -1,    -1,    72,    73,    -1,
    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    91,    92,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,
   115,   116,   117,   118,   119,   120,    -1,    -1,   123,    25,
    26,   126,    -1,   128,    -1,    -1,   131,    -1,    -1,    -1,
   135,    -1,    -1,   138,    40,    41,    -1,    -1,    -1,    -1,
   145,    -1,    -1,   148,   149,    -1,    -1,   152,   153,    55,
    56,    57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    69,    -1,    -1,    72,    73,    -1,    75,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    91,    92,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,
   116,   117,   118,   119,   120,    -1,    -1,   123,    25,    26,
   126,    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,   135,
    -1,    -1,   138,    40,    41,    -1,    -1,    -1,    -1,   145,
    -1,    -1,   148,   149,    -1,    -1,   152,   153,    55,    56,
    57,    58,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    69,    -1,    -1,    72,    73,    -1,    75,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,   116,
   117,   118,   119,   120,    -1,    -1,   123,    25,    26,   126,
    -1,    -1,    -1,    -1,   131,    -1,    -1,    -1,   135,    -1,
    -1,   138,    40,    41,    -1,    -1,    -1,    -1,   145,    -1,
    -1,   148,   149,    -1,    -1,   152,   153,    55,    56,    57,
    58,    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    69,    -1,    -1,    72,    73,    -1,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   114,   115,   116,   117,
   118,   119,   120,    -1,    -1,   123,    25,    26,   126,    -1,
    -1,    -1,    -1,   131,    -1,    -1,    -1,   135,    -1,    -1,
   138,    40,    41,    -1,    -1,    -1,    -1,   145,    -1,    -1,
   148,   149,    -1,    -1,   152,   153,    55,    56,    57,    58,
    59,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    69,    -1,    -1,    72,    73,    -1,    75,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    91,    92,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   114,   115,   116,   117,   118,
   119,   120,    -1,    -1,   123,    -1,    -1,   126,    -1,    -1,
    -1,    -1,   131,    -1,    -1,    -1,   135,    -1,    -1,   138,
    -1,    -1,    -1,    -1,    -1,    -1,   145,    -1,    -1,   148,
   149,    -1,    -1,   152,   153
};
#define YYPURE 1

#line 1 "cycbison.simple"
/* This is a (simple) skeleton parser engine for Cyclone, adapted from
 * GNU bison's bison.simple parser engine.  The copyright information for
 * GNU bison is below.
 */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

/* JGM: I've cut out the stuff that allows for re-entrant parsers because
 * we need to do things slightly differently.  For example, yylex() should
 * return a tuple of the token code, the yylval, and the yylloc instead of
 * mutating global variables...
 */

/* Dan: Do not define YYERROR_VERBOSE -- it has not been ported */

datatype exn {Yystack_overflow(int)}; // thrown if the parsing stack overflows
datatype exn.Yystack_overflow Yystack_overflow_val = Yystack_overflow(0);

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		throw(Yyerror) 
#define YYFAIL		throw(Yyerror)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


extern void yyerror(const char ?,int state,int token);

/* The user can define YYLEX_PARAM_ARG for the prototype to yylex 
 * and YYLEX_ARG for the actual argument to yylex -- typically
 * this will be some part of YYPARSE_PARAM_ARG.
 */
#ifndef YYLEX_PARAM_ARG
#define YYLEX_PARAM_ARG
#define YYLEX_ARG
#endif
extern int yylex(YYLEX_PARAM_ARG);


#ifndef YYPURE
/*  the lookahead symbol */
static int yychar = '\000';       
/* semantic value of lookahead symbol */
union YYSTYPE yylval = {.YYINITIALSVAL = 0};
/*  number of parse errors so far */
static int yynerrs = 0;
#endif

#if YYDEBUG
 bool yydebug = true;	/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/*  sanity check */

#if YYINITDEPTH > YYMAXDEPTH
#undef YYINITDEPTH
#define YYINITDEPTH YYMAXDEPTH
#endif

/* The user can define YYPARSE_PARAM as a set of arguments to be passed
   into yyparse.  Grammar actions can access the variables.
 */
#ifndef YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_ARG 
#endif

#ifndef YYSTYPEVARS
#define YYSTYPEVARS
#endif

struct Yystacktype YYSTYPEVARS {
  union YYSTYPE YYSTYPEVARS v;
#ifdef YYLSP_NEEDED
  YYLTYPE       l;
#endif
};

/* If type variables (e.g., regions) are used with YYSTYPE this
   will already be set.
*/
int yyparse(YYPARSE_PARAM_ARG)
{
  // the arrays are allocated in this region
region yyregion; {
  int yystate;
  int yyn=0;
  int yyerrstatus;//  number of tokens to shift before error messages enabled 
  int yychar1 = 0;//  lookahead token as an internal (translated) token number 
#ifdef YYPURE
  int yychar;
  union YYSTYPE YYSTYPEVARS yylval = {.YYINITIALSVAL = 0};
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  int yyssp_offset;
  /*  the state stack     */
  short ?yyss = rcalloc(yyregion, YYINITDEPTH, sizeof(short));
  /*  the semantic value stack */
  int yyvsp_offset;
#ifdef YYLSP_NEEDED
  struct Yystacktype ? yyvs = 
    rnew(yyregion) {for i < YYINITDEPTH : Yystacktype(yylval,yynewloc())}; 
#else
  struct Yystacktype ? yyvs = 
    rnew(yyregion) {for i < YYINITDEPTH : Yystacktype(yylval)}; 
#endif
  struct Yystacktype @{YYMAXRULELENGTH }yyyvsp;
#define YYPOPSTACK   (yyvsp_offset--, yyssp_offset--)

  int yystacksize = YYINITDEPTH;

  union YYSTYPE yyval = yylval;/* the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug) 
    fprintf(stderr,"Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp_offset = -1;
  yyvsp_offset = 0;

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  yyss[++yyssp_offset] = (short)yystate;

  if (yyssp_offset >= (yystacksize-1) - YYMAXRULELENGTH) { 
    // grow the stacks
    if (yystacksize >= YYMAXDEPTH) {
      yyerror("parser stack overflow",yystate,yychar);
      throw &Yystack_overflow_val;
    }
    yystacksize *= 2;
    if (yystacksize > YYMAXDEPTH)
      yystacksize = YYMAXDEPTH;
    short ?yyss1 = rnew(yyregion) {for i < yystacksize : 
				   (i <= yyssp_offset ? yyss[i] : 0)};
#ifdef YYLSP_NEEDED
    struct Yystacktype ? yyvs1 = 
      rnew(yyregion) {for i < yystacksize :
		      (i <= yyssp_offset ? yyvs[i] : yyvs[0])};
#else
    struct Yystacktype ? yyvs1 = 
      rnew(yyregion) {for i < yystacksize : 
		      (i <= yyssp_offset ? yyvs[i] : yyvs[0])};
#endif
    yyss = yyss1;
    yyvs = yyvs1;
  }
    
#if YYDEBUG != 0
  if (yydebug) {
    fprintf(stderr,"Entering state %d\n",yystate);
  }
#endif

  goto yybackup;

yybackup:

  //#ifdef YYLSP_NEEDED
  //  yylloc = yycopyloc(yylloc);
  //#endif

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG) goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */
  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr,"Reading a token: ");
#endif
      yychar = yylex(YYLEX_ARG);
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */
  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr,"Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf(stderr,"Next token is %d (%s",yychar,yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */

#ifdef YYPRINT
	  YYPRINT (yychar, yylval);
#endif
	  fprintf(stderr,")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1) goto yydefault;

  yyn = yytable[yyn];
  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */
  if (yyn < 0)
    {
      if (yyn == YYFLAG) goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0) goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr,"Shifting token %d (%s), ",yychar,yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

#ifdef YYLSP_NEEDED
  yyvs[++yyvsp_offset] = Yystacktype(yylval,yylloc);
#else  
  yyvs[++yyvsp_offset] = Yystacktype(yylval);
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus != 0) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0) goto yyerrlab;
  // fallthru to yyreduce

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:

  yylen = yyr2[yyn];
  yyyvsp=(_@{YYMAXRULELENGTH})(yyvs + (yyvsp_offset + 1 - yylen));
  if (yylen > 0)
    yyval = yyyvsp[0].v; /* implement default value of the action */
#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf(stderr,"Reducing via rule %d (line %d), ",yyn,yyrline[yyn]);
      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf(stderr,"%s ",yytname[yyrhs[i]]);
      fprintf(stderr," -> %s\n",yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 1:
#line 1190 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = (yyyvsp[0].v);
      parse_result =  yyget_YY16(&yyyvsp[0].v);
    
break;
case 2:
#line 1196 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY16(List::imp_append( yyget_YY16(&yyyvsp[0].v), yyget_YY16(&yyyvsp[1].v))); 
break;
case 3:
#line 1200 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY16(new List(new Decl(new Using_d( yyget_QualId_tok(&yyyvsp[0].v), yyget_YY16(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[2].l)),NULL));
      Lex::leave_using();
    
break;
case 4:
#line 1204 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY16(new List(new Decl(new Using_d( yyget_QualId_tok(&yyyvsp[0].v), yyget_YY16(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[3].l)), yyget_YY16(&yyyvsp[4].v))); 
break;
case 5:
#line 1207 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY16(new List(new Decl(new Namespace_d(new  yyget_String_tok(&yyyvsp[0].v), yyget_YY16(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[2].l)),NULL));
      Lex::leave_namespace();
    
break;
case 6:
#line 1211 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY16(new List(new Decl(new Namespace_d(new  yyget_String_tok(&yyyvsp[0].v), yyget_YY16(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[3].l)), yyget_YY16(&yyyvsp[4].v))); 
break;
case 7:
#line 1213 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let is_c_include =  yyget_YY31(&yyyvsp[0].v);
      list_t<decl_t> cycdecls =  yyget_YY16(&yyyvsp[4].v);
      let &$(exs, wc) =  yyget_YY53(&yyyvsp[5].v);
      let hides =  yyget_YY54(&yyyvsp[6].v);
      if(exs != NULL && hides != NULL) {
	Warn::err(LOC(yyyvsp[0].l,yyyvsp[1].l), "hide list can only be used with export { * }, or no export block");
      }
      if(hides && !wc) {
	wc = SLOC(yyyvsp[6].l);
      }
      if (!is_c_include) {
	if (exs != NULL || cycdecls != NULL) {
	  Warn::err(LOC(yyyvsp[0].l,yyyvsp[1].l),"expecting \"C include\"");
	  yyval=YY16(new List(new Decl(new ExternCinclude_d( yyget_YY16(&yyyvsp[2].v),cycdecls,exs,new $(wc, hides)),LOC(yyyvsp[0].l,yyyvsp[5].l)), yyget_YY16(&yyyvsp[7].v)));
	}
	else {
	  yyval=YY16(new List(new Decl(new ExternC_d( yyget_YY16(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[5].l)), yyget_YY16(&yyyvsp[7].v)));
	}
      }
      else {
        yyval=YY16(new List(new Decl(new ExternCinclude_d( yyget_YY16(&yyyvsp[2].v),cycdecls,exs,new $(wc, hides)),LOC(yyyvsp[0].l,yyyvsp[5].l)), yyget_YY16(&yyyvsp[7].v)));
      }
    
break;
case 8:
#line 1237 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY16(new List(new Decl(&Porton_d_val,SLOC(yyyvsp[0].l)), yyget_YY16(&yyyvsp[2].v))); 
break;
case 9:
#line 1239 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY16(new List(new Decl(&Portoff_d_val,SLOC(yyyvsp[0].l)), yyget_YY16(&yyyvsp[2].v))); 
break;
case 10:
#line 1241 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY16(new List(new Decl(&Tempeston_d_val,SLOC(yyyvsp[0].l)), yyget_YY16(&yyyvsp[2].v))); 
break;
case 11:
#line 1243 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY16(new List(new Decl(&Tempestoff_d_val,SLOC(yyyvsp[0].l)), yyget_YY16(&yyyvsp[2].v))); 
break;
case 12:
#line 1244 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY16(NULL); 
break;
case 13:
#line 1249 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 parsing_tempest = true; 
break;
case 14:
#line 1254 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 parsing_tempest = false; 
break;
case 15:
#line 1259 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let two =  yyget_String_tok(&yyyvsp[1].v);
  Lex::enter_extern_c();
  if (strcmp(two,"C") == 0) 
    yyval = YY31(false);
  else if (strcmp(two,"C include") == 0)
    yyval = YY31(true);
  else {
    Warn::err(LOC(yyyvsp[0].l,yyyvsp[1].l),"expecting \"C\" or \"C include\"");
    yyval = YY31(true);
  }

break;
case 16:
#line 1273 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 Lex::leave_extern_c(); 
break;
case 17:
#line 1277 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval = YY54(NULL); 
break;
case 18:
#line 1278 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval = (yyyvsp[2].v);
break;
case 19:
#line 1282 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY54(new List( yyget_QualId_tok(&yyyvsp[0].v),NULL)); 
break;
case 20:
#line 1283 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY54(new List( yyget_QualId_tok(&yyyvsp[0].v),NULL)); 
break;
case 21:
#line 1285 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY54(new List( yyget_QualId_tok(&yyyvsp[0].v), yyget_YY54(&yyyvsp[2].v)));
break;
case 22:
#line 1289 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY53(new $(NULL, 0)); 
break;
case 23:
#line 1290 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = (yyyvsp[0].v); 
break;
case 24:
#line 1294 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval= YY53(new $( yyget_YY52(&yyyvsp[2].v), 0)); 
break;
case 25:
#line 1295 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY53(new $(NULL, 0)); 
break;
case 26:
#line 1296 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY53(new $(NULL, SLOC(yyyvsp[0].l))); 
break;
case 27:
#line 1300 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY52(new List(new $(SLOC(yyyvsp[0].l), yyget_QualId_tok(&yyyvsp[0].v),false),NULL)); 
break;
case 28:
#line 1301 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY52(new List(new $(SLOC(yyyvsp[0].l), yyget_QualId_tok(&yyyvsp[0].v),false),NULL)); 
break;
case 29:
#line 1303 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY52(new List(new $(SLOC(yyyvsp[0].l), yyget_QualId_tok(&yyyvsp[0].v),false), yyget_YY52(&yyyvsp[2].v)));
break;
case 30:
#line 1307 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY16(NULL); 
break;
case 31:
#line 1308 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = (yyyvsp[2].v); 
break;
case 32:
#line 1312 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval=YY16(new List(new_decl(new Fn_d( yyget_YY15(&yyyvsp[0].v)),SLOC(yyyvsp[0].l)),NULL));
break;
case 33:
#line 1313 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval=(yyyvsp[0].v);
break;
case 34:
#line 1314 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval=YY16(NULL);
break;
case 37:
#line 1323 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY15(make_function(yyr,NULL, yyget_YY27(&yyyvsp[0].v),NULL, yyget_Stmt_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 38:
#line 1325 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let d =  yyget_YY17(&yyyvsp[0].v);
      yyval=YY15(make_function(yyr,&d, yyget_YY27(&yyyvsp[1].v),NULL, yyget_Stmt_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 39:
#line 1338 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY15(make_function(yyr,NULL, yyget_YY27(&yyyvsp[0].v), yyget_YY16(&yyyvsp[1].v), yyget_Stmt_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 40:
#line 1340 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let d =  yyget_YY17(&yyyvsp[0].v);
      yyval=YY15(make_function(yyr,&d, yyget_YY27(&yyyvsp[1].v), yyget_YY16(&yyyvsp[2].v), yyget_Stmt_tok(&yyyvsp[3].v),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 41:
#line 1348 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let d =  yyget_YY17(&yyyvsp[0].v);
      yyval=YY15(make_function(yyr,&d, yyget_YY27(&yyyvsp[1].v),NULL, yyget_Stmt_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 42:
#line 1351 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let d =  yyget_YY17(&yyyvsp[0].v);
      yyval=YY15(make_function(yyr,&d, yyget_YY27(&yyyvsp[1].v), yyget_YY16(&yyyvsp[2].v), yyget_Stmt_tok(&yyyvsp[3].v),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 43:
#line 1356 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 Lex::enter_using( yyget_QualId_tok(&yyyvsp[1].v)); yyval=(yyyvsp[1].v); 
break;
case 44:
#line 1359 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 Lex::leave_using(); 
break;
case 45:
#line 1362 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 Lex::enter_namespace(new  yyget_String_tok(&yyyvsp[1].v)); yyval=(yyyvsp[1].v); 
break;
case 46:
#line 1365 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 Lex::leave_namespace(); 
break;
case 47:
#line 1371 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let location=SLOC(yyyvsp[0].l);
      yyval=YY16(make_declarations( yyget_YY17(&yyyvsp[0].v),NULL,location,location)); 
break;
case 48:
#line 1374 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let location = LOC(yyyvsp[0].l,yyyvsp[2].l);
  yyval=YY16(make_declarations( yyget_YY17(&yyyvsp[0].v), yyget_YY19(&yyyvsp[1].v),SLOC(yyyvsp[0].l),location)); 
break;
case 49:
#line 1378 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY16(new List(let_decl( yyget_YY9(&yyyvsp[1].v), yyget_Exp_tok(&yyyvsp[3].v),LOC(yyyvsp[0].l,yyyvsp[4].l)),NULL)); 
break;
case 50:
#line 1380 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let vds = NULL;
      for (let ids =  yyget_YY36(&yyyvsp[1].v); ids != NULL; ids = ids->tl) {
        let id = ids->hd;
        qvar_t qv = new $(Rel_n(NULL), id);
        let vd = new_vardecl(0,qv,wildtyp(NULL),NULL);
        vds = new List(vd,vds);
      }
      vds = List::imp_rev(vds);
      yyval=YY16(new List(letv_decl(vds,LOC(yyyvsp[0].l,yyyvsp[2].l)),NULL));
    
break;
case 51:
#line 1393 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let three =  yyget_String_tok(&yyyvsp[2].v);
    // FIX: need to check for `RC as well?  Should factor these out?
    if (zstrcmp(three,"`H") == 0)
      Warn::err(SLOC(yyyvsp[2].l),"bad occurrence of heap region");
    if (zstrcmp(three,"`U") == 0)
      Warn::err(SLOC(yyyvsp[2].l),"bad occurrence of unique region");
    tvar_t tv = new Tvar(new three,-1,Tcutil::kind_to_bound(&Tcutil::rk));
    type_t t  = var_type(tv);
    vardecl_t vd = new_vardecl(SLOC(yyyvsp[4].l), new $(Loc_n,new  yyget_String_tok(&yyyvsp[4].v)),rgn_handle_type(t),NULL);
    yyval = YY16(new List(region_decl(tv,vd,NULL,LOC(yyyvsp[0].l,yyyvsp[5].l)),NULL));
  
break;
case 52:
#line 1406 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let two =  yyget_String_tok(&yyyvsp[1].v);
    if (zstrcmp(two,"H") == 0)
      Warn::err(SLOC(yyyvsp[1].l),"bad occurrence of heap region `H");
    if (zstrcmp(two,"U") == 0)
      Warn::err(SLOC(yyyvsp[1].l),"bad occurrence of unique region `U");
    tvar_t tv = new Tvar(new (string_t)aprintf("`%s",two), -1,
			 Tcutil::kind_to_bound(&Tcutil::rk));
    type_t t = var_type(tv);
    vardecl_t vd = new_vardecl(SLOC(yyyvsp[1].l), new $(Loc_n,new two),rgn_handle_type(t),NULL);
    yyval = YY16(new List(region_decl(tv,vd,NULL,LOC(yyyvsp[0].l,yyvs[yyvsp_offset+1].l)),NULL));
  
break;
case 53:
#line 1419 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let two =  yyget_String_tok(&yyyvsp[1].v);
    let four =  yyget_String_tok(&yyyvsp[3].v);
    let six =  yyget_Exp_tok(&yyyvsp[5].v);
    if (strcmp(four,"open") != 0) Warn::err(SLOC(yyyvsp[3].l),"expecting `open'");
    tvar_t tv = new Tvar(new (string_t)aprintf("`%s",two), -1,
			 Tcutil::kind_to_bound(&Tcutil::rk));
    type_t t = var_type(tv);
    vardecl_t vd = new_vardecl(SLOC(yyyvsp[2].l),new $(Loc_n,new two),rgn_handle_type(t),NULL);
    yyval = YY16(new List(region_decl(tv,vd,six,LOC(yyyvsp[0].l,yyyvsp[7].l)),NULL));
  
break;
case 54:
#line 1433 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 55:
#line 1435 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY16(List::imp_append( yyget_YY16(&yyyvsp[0].v), yyget_YY16(&yyyvsp[1].v))); 
break;
case 56:
#line 1441 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY17(Declaration_spec( yyget_YY20(&yyyvsp[0].v),empty_tqual(SLOC(yyyvsp[0].l)),
                             empty_spec(0),false,NULL)); 
break;
case 57:
#line 1444 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let two =  yyget_YY17(&yyyvsp[1].v);
      if (two.sc != NULL)
        Warn::warn(LOC(yyyvsp[0].l,yyyvsp[1].l),
                     "Only one storage class is allowed in a declaration (missing ';' or ','?)");
      yyval=YY17(Declaration_spec( yyget_YY20(&yyyvsp[0].v),two.tq,two.type_specs,
                             two.is_inline,
                             two.attributes));
    
break;
case 58:
#line 1453 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 Warn::warn(LOC(yyyvsp[0].l,yyyvsp[0].l), "__extension__ keyword ignored in declaration");
      yyval=(yyyvsp[1].v); 
    
break;
case 59:
#line 1457 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY17(Declaration_spec(NULL,empty_tqual(SLOC(yyyvsp[0].l)),
                              yyget_YY21(&yyyvsp[0].v),false,NULL)); 
break;
case 60:
#line 1460 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let two =  yyget_YY17(&yyyvsp[1].v);
    yyval=YY17(Declaration_spec(two.sc,two.tq,
                           combine_specifiers(SLOC(yyyvsp[0].l),two.type_specs, yyget_YY21(&yyyvsp[0].v)),
                           two.is_inline,
                           two.attributes));
    
break;
case 61:
#line 1467 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY17(Declaration_spec(NULL, yyget_YY23(&yyyvsp[0].v),empty_spec(0),false,NULL)); 
break;
case 62:
#line 1469 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let two =  yyget_YY17(&yyyvsp[1].v);
      yyval=YY17(Declaration_spec(two.sc,combine_tqual( yyget_YY23(&yyyvsp[0].v),two.tq),
                             two.type_specs, two.is_inline,
                             two.attributes));
    
break;
case 63:
#line 1475 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY17(Declaration_spec(NULL,empty_tqual(SLOC(yyyvsp[0].l)),
                             empty_spec(0),true,NULL)); 
break;
case 64:
#line 1478 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let two =  yyget_YY17(&yyyvsp[1].v);
      yyval=YY17(Declaration_spec(two.sc,two.tq,two.type_specs,true,
                             two.attributes));
    
break;
case 65:
#line 1483 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY17(Declaration_spec(NULL,empty_tqual(SLOC(yyyvsp[0].l)),
                             empty_spec(0),false, yyget_YY45(&yyyvsp[0].v))); 
break;
case 66:
#line 1486 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let two =  yyget_YY17(&yyyvsp[1].v);
      yyval=YY17(Declaration_spec(two.sc,two.tq,
                             two.type_specs, two.is_inline,
                             List::imp_append( yyget_YY45(&yyyvsp[0].v),two.attributes))); 
break;
case 67:
#line 1493 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 static storage_class_t auto_sc = Auto_sc;
              yyval=YY20(&auto_sc); 
break;
case 68:
#line 1495 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 static storage_class_t register_sc = Register_sc;
              yyval=YY20(&register_sc); 
break;
case 69:
#line 1497 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 static storage_class_t static_sc = Static_sc;
              yyval=YY20(&static_sc); 
break;
case 70:
#line 1499 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 static storage_class_t extern_sc = Extern_sc;
              yyval=YY20(&extern_sc); 
break;
case 71:
#line 1502 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 static storage_class_t externC_sc = ExternC_sc;
    if (strcmp( yyget_String_tok(&yyyvsp[1].v),"C") != 0)
      Warn::err(LOC(yyyvsp[0].l,yyyvsp[1].l),"only extern or extern \"C\" is allowed");
    yyval = YY20(&externC_sc);
  
break;
case 72:
#line 1507 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 static storage_class_t typedef_sc = Typedef_sc;
              yyval=YY20(&typedef_sc); 
break;
case 73:
#line 1510 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 static storage_class_t abstract_sc = Abstract_sc;
              yyval=YY20(&abstract_sc); 
break;
case 74:
#line 1516 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY45(NULL); 
break;
case 75:
#line 1517 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 76:
#line 1522 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[3].v); 
break;
case 77:
#line 1526 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY45(new List( yyget_YY46(&yyyvsp[0].v),NULL)); 
break;
case 78:
#line 1527 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY45(new List( yyget_YY46(&yyyvsp[0].v), yyget_YY45(&yyyvsp[2].v))); 
break;
case 79:
#line 1531 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY46(parse_nullary_att(SLOC(yyyvsp[0].l), yyget_String_tok(&yyyvsp[0].v))); 
break;
case 80:
#line 1532 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY46(&Const_att_val); 
break;
case 81:
#line 1534 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY46(parse_unary_att(SLOC(yyyvsp[0].l),  yyget_String_tok(&yyyvsp[0].v), SLOC(yyyvsp[2].l),  yyget_Exp_tok(&yyyvsp[2].v))); 
break;
case 82:
#line 1536 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY46(parse_format_att(LOC(yyyvsp[0].l,yyyvsp[7].l), SLOC(yyyvsp[2].l),  yyget_String_tok(&yyyvsp[0].v),  yyget_String_tok(&yyyvsp[2].v),
					      cnst2uint(SLOC(yyyvsp[4].l), yyget_Int_tok(&yyyvsp[4].v)),
					      cnst2uint(SLOC(yyyvsp[6].l), yyget_Int_tok(&yyyvsp[6].v)))); 
break;
case 83:
#line 1616 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = (yyyvsp[0].v); 
break;
case 84:
#line 1618 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(typedef_type( yyget_QualId_tok(&yyyvsp[0].v), yyget_YY40(&yyyvsp[1].v),NULL,NULL),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 85:
#line 1622 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(void_type,SLOC(yyyvsp[0].l))); 
break;
case 86:
#line 1623 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(char_type,SLOC(yyyvsp[0].l))); 
break;
case 87:
#line 1624 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(short_spec(SLOC(yyyvsp[0].l))); 
break;
case 88:
#line 1625 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(sint_type,SLOC(yyyvsp[0].l))); 
break;
case 89:
#line 1626 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(long_spec(SLOC(yyyvsp[0].l))); 
break;
case 90:
#line 1627 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(float_type,SLOC(yyyvsp[0].l))); 
break;
case 91:
#line 1628 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(double_type,SLOC(yyyvsp[0].l))); 
break;
case 92:
#line 1629 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(signed_spec(SLOC(yyyvsp[0].l))); 
break;
case 93:
#line 1630 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(unsigned_spec(SLOC(yyyvsp[0].l))); 
break;
case 94:
#line 1631 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 95:
#line 1632 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 96:
#line 1635 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(typeof_type( yyget_Exp_tok(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 97:
#line 1637 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(builtin_type("__builtin_va_list",&Tcutil::bk),SLOC(yyyvsp[0].l))); 
break;
case 98:
#line 1639 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 99:
#line 1641 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec( yyget_YY44(&yyyvsp[0].v), SLOC(yyyvsp[0].l))); 
break;
case 100:
#line 1643 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(new_evar(NULL,NULL),SLOC(yyyvsp[0].l))); 
break;
case 101:
#line 1645 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(new_evar(Tcutil::kind_to_opt( yyget_YY43(&yyyvsp[2].v)),NULL),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 102:
#line 1647 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(new TupleType(List::map_c(get_tqual_typ,
                                                SLOC(yyyvsp[2].l),List::imp_rev( yyget_YY38(&yyyvsp[2].v)))),
                      LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 103:
#line 1651 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(rgn_handle_type( yyget_YY44(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 104:
#line 1653 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(rgn_handle_type(new_evar(&Tcutil::rko, NULL)),
                      SLOC(yyyvsp[0].l))); 
break;
case 105:
#line 1656 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(tag_type( yyget_YY44(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 106:
#line 1658 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(tag_type(new_evar(&Tcutil::iko, NULL)),SLOC(yyyvsp[0].l))); 
break;
case 107:
#line 1660 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(valueof_type( yyget_Exp_tok(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 108:
#line 1666 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY43(id_to_kind( yyget_String_tok(&yyyvsp[0].v),SLOC(yyyvsp[0].l))); 
break;
case 109:
#line 1670 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 seg_t loc = (Absyn::porting_c_code) ? SLOC(yyyvsp[0].l) : 0; 
             yyval=YY23(Tqual(true,false,false,true,loc)); 
break;
case 110:
#line 1672 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY23(Tqual(false,true,false,false,0)); 
break;
case 111:
#line 1673 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY23(Tqual(false,false,true,false,0)); 
break;
case 112:
#line 1679 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let ed = new TypeDecl{new Enum_td(new Enumdecl(Public, yyget_QualId_tok(&yyyvsp[1].v),new Opt( yyget_YY48(&yyyvsp[3].v)))),
                           LOC(yyyvsp[0].l,yyyvsp[4].l)};
    yyval=YY21(type_spec(new TypeDeclType(ed,NULL),LOC(yyyvsp[0].l,yyyvsp[4].l)));
  
break;
case 113:
#line 1684 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(enum_type( yyget_QualId_tok(&yyyvsp[1].v),NULL),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 114:
#line 1686 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(anon_enum_type( yyget_YY48(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 115:
#line 1692 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY47(new Enumfield( yyget_QualId_tok(&yyyvsp[0].v),NULL,SLOC(yyyvsp[0].l))); 
break;
case 116:
#line 1694 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY47(new Enumfield( yyget_QualId_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 117:
#line 1698 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY48(new List( yyget_YY47(&yyyvsp[0].v),NULL)); 
break;
case 118:
#line 1699 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY48(new List( yyget_YY47(&yyyvsp[0].v),NULL)); 
break;
case 119:
#line 1700 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY48(new List( yyget_YY47(&yyyvsp[0].v), yyget_YY48(&yyyvsp[2].v))); 
break;
case 120:
#line 1706 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(new AnonAggrType( yyget_YY22(&yyyvsp[0].v), yyget_YY24(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 121:
#line 1711 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 
      let ts = List::map_c(typ2tvar,SLOC(yyyvsp[3].l), yyget_YY40(&yyyvsp[3].v));
      let exist_ts = List::map_c(typ2tvar,SLOC(yyyvsp[5].l), yyget_YY40(&yyyvsp[5].v));
      let td = aggr_tdecl( yyget_YY22(&yyyvsp[1].v), Public,  yyget_QualId_tok(&yyyvsp[2].v), ts, 
                          aggrdecl_impl(exist_ts, yyget_YY50(&yyyvsp[6].v), yyget_YY24(&yyyvsp[7].v),true), NULL,
                          LOC(yyyvsp[0].l,yyyvsp[8].l));
      yyval = YY21(type_spec(new TypeDeclType(td,NULL), LOC(yyyvsp[0].l,yyyvsp[8].l)));
    
break;
case 122:
#line 1722 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 
      let ts = List::map_c(typ2tvar,SLOC(yyyvsp[2].l), yyget_YY40(&yyyvsp[2].v));
      let exist_ts = List::map_c(typ2tvar,SLOC(yyyvsp[4].l), yyget_YY40(&yyyvsp[4].v));
      let td = aggr_tdecl( yyget_YY22(&yyyvsp[0].v), Public,  yyget_QualId_tok(&yyyvsp[1].v), ts, 
                          aggrdecl_impl(exist_ts, yyget_YY50(&yyyvsp[5].v), yyget_YY24(&yyyvsp[6].v),false), NULL,
                          LOC(yyyvsp[0].l,yyyvsp[7].l));
      yyval = YY21(type_spec(new TypeDeclType(td,NULL), LOC(yyyvsp[0].l,yyyvsp[7].l)));
    
break;
case 123:
#line 1731 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(aggr_type(UnknownAggr( yyget_YY22(&yyyvsp[1].v), yyget_QualId_tok(&yyyvsp[2].v),new Opt(true)), yyget_YY40(&yyyvsp[3].v)),
                      LOC(yyyvsp[0].l,yyyvsp[3].l)));
    
break;
case 124:
#line 1735 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY21(type_spec(aggr_type(UnknownAggr( yyget_YY22(&yyyvsp[0].v), yyget_QualId_tok(&yyyvsp[1].v),NULL), yyget_YY40(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 125:
#line 1740 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY40(NULL); 
break;
case 126:
#line 1742 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY40(List::imp_rev( yyget_YY40(&yyyvsp[1].v))); 
break;
case 127:
#line 1746 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY22(StructA); 
break;
case 128:
#line 1747 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY22(UnionA); 
break;
case 129:
#line 1752 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY24(NULL); 
break;
case 130:
#line 1754 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 list_t<aggrfield_t> decls = NULL;
    for (let x =  yyget_YY25(&yyyvsp[0].v); x != NULL; x = x->tl) 
      decls = List::imp_append(x->hd,decls);
    //let decls = List::flatten(List::imp_rev($1));
    let tags = get_aggrfield_tags(decls);
    if (tags != NULL)
      List::iter_c(substitute_aggrfield_tags,tags,decls);
    yyval=YY24(decls);
  
break;
case 131:
#line 1768 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY25(new List( yyget_YY24(&yyyvsp[0].v),NULL)); 
break;
case 132:
#line 1770 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY25(new List( yyget_YY24(&yyyvsp[1].v), yyget_YY25(&yyyvsp[0].v))); 
break;
case 133:
#line 1774 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY19(flat_imp_rev( yyget_YY19(&yyyvsp[0].v))); 
break;
case 134:
#line 1780 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY19(rnew(yyr) FlatList(NULL, yyget_YY18(&yyyvsp[0].v))); 
break;
case 135:
#line 1782 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY19(rnew(yyr) FlatList( yyget_YY19(&yyyvsp[0].v), yyget_YY18(&yyyvsp[2].v))); 
break;
case 136:
#line 1787 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY18($( yyget_YY27(&yyyvsp[0].v),NULL)); 
break;
case 137:
#line 1789 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY18($( yyget_YY27(&yyyvsp[0].v),(exp_opt_t) yyget_Exp_tok(&yyyvsp[2].v))); 
break;
case 138:
#line 1794 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"

      region temp; 
      let $(tq,tspecs,atts) =  yyget_YY35(&yyyvsp[0].v);
      if (tq.loc == 0) tq.loc = SLOC(yyyvsp[0].l);
      declarators_t<`temp> decls = NULL;
      list_t<$(exp_opt_t,exp_opt_t)@`temp,`temp> widths_and_reqs = NULL;
      for (let x =  yyget_YY29(&yyyvsp[1].v); x != NULL; x = x->tl) {
	let &$(d,wd,wh) = x->hd;
	decls = rnew(temp) FlatList(decls,d);
	widths_and_reqs = 
	  rnew(temp) List(rnew(temp) $(wd,wh),widths_and_reqs);
      }
      decls = flat_imp_rev(decls);
      widths_and_reqs = imp_rev(widths_and_reqs);
      let t = speclist2typ(tspecs, SLOC(yyyvsp[0].l));
      let info = List::rzip(temp,temp,
			    apply_tmss(temp,tq,t,decls,atts),
			    widths_and_reqs);
      yyval=YY24(List::map_c(make_aggr_field,LOC(yyyvsp[0].l,yyyvsp[1].l),info));
   
break;
case 139:
#line 1822 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY35($(empty_tqual(SLOC(yyyvsp[0].l)),  yyget_YY21(&yyyvsp[0].v), NULL)); 
break;
case 140:
#line 1824 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let two= yyget_YY35(&yyyvsp[1].v); yyval=YY35($(two[0], combine_specifiers(SLOC(yyyvsp[0].l), yyget_YY21(&yyyvsp[0].v),two[1]), two[2]));
break;
case 141:
#line 1826 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY35($( yyget_YY23(&yyyvsp[0].v),empty_spec(0),NULL)); 
break;
case 142:
#line 1828 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let two= yyget_YY35(&yyyvsp[1].v); 
      yyval=YY35($(combine_tqual( yyget_YY23(&yyyvsp[0].v),two[0]), two[1], two[2])); 
break;
case 143:
#line 1831 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY35($(empty_tqual(SLOC(yyyvsp[0].l)),empty_spec(0),  yyget_YY45(&yyyvsp[0].v))); 
break;
case 144:
#line 1833 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let two= yyget_YY35(&yyyvsp[1].v); yyval=YY35($(two[0], two[1], append( yyget_YY45(&yyyvsp[0].v),two[2]))); 
break;
case 145:
#line 1839 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY35($(empty_tqual(SLOC(yyyvsp[0].l)),  yyget_YY21(&yyyvsp[0].v), NULL)); 
break;
case 146:
#line 1841 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let two= yyget_YY35(&yyyvsp[1].v); yyval=YY35($(two[0], combine_specifiers(SLOC(yyyvsp[0].l), yyget_YY21(&yyyvsp[0].v),two[1]), two[2]));
break;
case 147:
#line 1843 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY35($( yyget_YY23(&yyyvsp[0].v),empty_spec(0),NULL)); 
break;
case 148:
#line 1845 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let two= yyget_YY35(&yyyvsp[1].v); 
      yyval=YY35($(combine_tqual( yyget_YY23(&yyyvsp[0].v),two[0]), two[1], two[2])); 
break;
case 149:
#line 1848 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY35($(empty_tqual(SLOC(yyyvsp[0].l)), empty_spec(0),  yyget_YY45(&yyyvsp[0].v))); 
break;
case 150:
#line 1850 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let two= yyget_YY35(&yyyvsp[1].v); yyval=YY35($(two[0], two[1], append( yyget_YY45(&yyyvsp[0].v),two[2]))); 
break;
case 151:
#line 1854 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY29(List::imp_rev( yyget_YY29(&yyyvsp[0].v))); 
break;
case 152:
#line 1860 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY29(rnew(yyr) List( yyget_YY28(&yyyvsp[0].v),NULL)); 
break;
case 153:
#line 1862 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY29(rnew(yyr) List( yyget_YY28(&yyyvsp[2].v), yyget_YY29(&yyyvsp[0].v))); 
break;
case 154:
#line 1867 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY28(rnew (yyr) $( yyget_YY27(&yyyvsp[0].v),NULL, yyget_YY57(&yyyvsp[1].v))); 
break;
case 155:
#line 1869 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 // HACK: give the field an empty name -- see elsewhere in the
      // compiler where we use this invariant
      yyval=YY28(rnew (yyr) $((Declarator(new $(Rel_n(NULL),new ""), 0, NULL)),(exp_opt_t) yyget_Exp_tok(&yyyvsp[1].v),NULL));
    
break;
case 156:
#line 1874 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 // HACK: give the field an empty name -- see elsewhere in the
      // compiler where we use this invariant
      yyval=YY28(rnew (yyr) $((Declarator(new $(Rel_n(NULL),new ""),0, NULL)),NULL,NULL));
    
break;
case 157:
#line 1879 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY28(rnew (yyr) $( yyget_YY27(&yyyvsp[0].v),(exp_opt_t) yyget_Exp_tok(&yyyvsp[2].v),NULL)); 
break;
case 158:
#line 1883 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY57((exp_opt_t) yyget_Exp_tok(&yyyvsp[2].v)); 
break;
case 159:
#line 1884 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY57(NULL); 
break;
case 160:
#line 1890 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"

    yyval=YY64(new List(join_eff( yyget_YY40(&yyyvsp[1].v)),NULL));

break;
case 161:
#line 1895 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"

  yyval=YY64(new List(join_eff( yyget_YY40(&yyyvsp[3].v)), yyget_YY64(&yyyvsp[0].v)));

break;
case 162:
#line 1902 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"

		 yyval=YY49(join_eff( yyget_YY64(&yyyvsp[2].v)));
	 
break;
case 163:
#line 1905 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY49(NULL); 
break;
case 164:
#line 1910 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"

		 yyval=YY49(join_eff( yyget_YY64(&yyyvsp[2].v)));
	 
break;
case 165:
#line 1913 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY49(NULL); 
break;
case 166:
#line 1918 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY57((exp_opt_t) yyget_Exp_tok(&yyyvsp[2].v)); 
break;
case 167:
#line 1919 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY57(NULL); 
break;
case 168:
#line 1925 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let is_extensible =  yyget_YY31(&yyyvsp[0].v);
      let ts = List::map_c(typ2tvar,SLOC(yyyvsp[2].l), yyget_YY40(&yyyvsp[2].v));
      let dd = datatype_tdecl(Public, yyget_QualId_tok(&yyyvsp[1].v),ts,new Opt( yyget_YY34(&yyyvsp[4].v)), 
                              is_extensible,LOC(yyyvsp[0].l,yyyvsp[5].l));
      yyval = YY21(type_spec(new TypeDeclType(dd,NULL),LOC(yyyvsp[0].l,yyyvsp[5].l)));
    
break;
case 169:
#line 1932 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let is_extensible =  yyget_YY31(&yyyvsp[0].v);
      yyval=YY21(type_spec(datatype_type(UnknownDatatype(UnknownDatatypeInfo( yyget_QualId_tok(&yyyvsp[1].v),is_extensible)),  yyget_YY40(&yyyvsp[2].v)), LOC(yyyvsp[0].l,yyyvsp[2].l)));
    
break;
case 170:
#line 1936 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
  let is_extensible =  yyget_YY31(&yyyvsp[0].v);
      yyval=YY21(type_spec(datatype_field_type(UnknownDatatypefield(UnknownDatatypeFieldInfo( yyget_QualId_tok(&yyyvsp[1].v), yyget_QualId_tok(&yyyvsp[3].v),is_extensible)), yyget_YY40(&yyyvsp[4].v)),LOC(yyyvsp[0].l,yyyvsp[4].l)));
    
break;
case 171:
#line 1942 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY31(false); 
break;
case 172:
#line 1943 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY31(true); 
break;
case 173:
#line 1947 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY34(new List( yyget_YY33(&yyyvsp[0].v),NULL)); 
break;
case 174:
#line 1948 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY34(new List( yyget_YY33(&yyyvsp[0].v),NULL)); 
break;
case 175:
#line 1949 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY34(new List( yyget_YY33(&yyyvsp[0].v), yyget_YY34(&yyyvsp[2].v))); 
break;
case 176:
#line 1950 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY34(new List( yyget_YY33(&yyyvsp[0].v), yyget_YY34(&yyyvsp[2].v))); 
break;
case 177:
#line 1954 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY32(Public);
break;
case 178:
#line 1955 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY32(Extern);
break;
case 179:
#line 1956 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY32(Static);
break;
case 180:
#line 1960 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY33(new Datatypefield( yyget_QualId_tok(&yyyvsp[1].v),NULL,LOC(yyyvsp[0].l,yyyvsp[1].l), yyget_YY32(&yyyvsp[0].v))); 
break;
case 181:
#line 1962 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let typs = List::map_c(get_tqual_typ,SLOC(yyyvsp[3].l),List::imp_rev( yyget_YY38(&yyyvsp[3].v)));
      yyval=YY33(new Datatypefield( yyget_QualId_tok(&yyyvsp[1].v),typs,LOC(yyyvsp[0].l,yyyvsp[4].l), yyget_YY32(&yyyvsp[0].v))); 
break;
case 182:
#line 1968 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 183:
#line 1970 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let two =  yyget_YY27(&yyyvsp[1].v);
      yyval=YY27(Declarator(two.id, two.varloc, List::imp_append( yyget_YY26(&yyyvsp[0].v),two.tms))); 
break;
case 184:
#line 1977 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 185:
#line 1979 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let two =  yyget_YY27(&yyyvsp[1].v);
      yyval=YY27(Declarator(two.id, two.varloc, List::imp_append( yyget_YY26(&yyyvsp[0].v),two.tms))); 
break;
case 186:
#line 1985 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY27(Declarator( yyget_QualId_tok(&yyyvsp[0].v), SLOC(yyyvsp[0].l),NULL)); 
break;
case 187:
#line 1987 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[1].v); 
break;
case 188:
#line 1991 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let d =  yyget_YY27(&yyyvsp[2].v);
      d.tms = rnew(yyr) List(rnew(yyr) Attributes_mod(SLOC(yyyvsp[1].l), yyget_YY45(&yyyvsp[1].v)),d.tms);
      yyval=(yyyvsp[2].v);
    
break;
case 189:
#line 1996 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY27(Declarator( yyget_YY27(&yyyvsp[0].v).id,  yyget_YY27(&yyyvsp[0].v).varloc, rnew(yyr) List(rnew(yyr) Carray_mod( yyget_YY51(&yyyvsp[3].v),SLOC(yyyvsp[3].l)), yyget_YY27(&yyyvsp[0].v).tms)));
break;
case 190:
#line 1998 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY27(Declarator( yyget_YY27(&yyyvsp[0].v).id,  yyget_YY27(&yyyvsp[0].v).varloc,
                       rnew(yyr) List(rnew(yyr) ConstArray_mod( yyget_Exp_tok(&yyyvsp[2].v), yyget_YY51(&yyyvsp[4].v),SLOC(yyyvsp[4].l)), yyget_YY27(&yyyvsp[0].v).tms)));
break;
case 191:
#line 2001 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let &$(lis,b,c,eff,po) =  yyget_YY39(&yyyvsp[2].v);
      let req =  yyget_YY57(&yyyvsp[4].v);
      let ens =  yyget_YY57(&yyyvsp[5].v);
		let ieff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[6].v));
		let oeff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[7].v));
      yyval=YY27(Declarator( yyget_YY27(&yyyvsp[0].v).id,  yyget_YY27(&yyyvsp[0].v).varloc,rnew(yyr) List(rnew(yyr) Function_mod(rnew(yyr) WithTypes(lis,b,c,eff,po,req,ens,ieff,oeff)), yyget_YY27(&yyyvsp[0].v).tms)));
    
break;
case 192:
#line 2010 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"

		let ieff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[7].v));
		let oeff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[8].v));
		 yyval=YY27(Declarator( yyget_YY27(&yyyvsp[0].v).id,  yyget_YY27(&yyyvsp[0].v).varloc,
                       rnew(yyr) List(rnew(yyr) Function_mod(rnew(yyr) WithTypes(NULL,
                                                               false,NULL,
                                                                yyget_YY49(&yyyvsp[2].v), yyget_YY50(&yyyvsp[3].v), yyget_YY57(&yyyvsp[5].v), yyget_YY57(&yyyvsp[6].v),ieff,oeff)),
                                 yyget_YY27(&yyyvsp[0].v).tms)));
    
break;
case 193:
#line 2020 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY27(Declarator( yyget_YY27(&yyyvsp[0].v).id,  yyget_YY27(&yyyvsp[0].v).varloc, rnew(yyr) List(rnew(yyr) Function_mod(rnew(yyr) NoTypes( yyget_YY36(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[3].l))), yyget_YY27(&yyyvsp[0].v).tms))); 
break;
case 194:
#line 2023 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let ts = List::map_c(typ2tvar,LOC(yyyvsp[1].l,yyyvsp[3].l),List::imp_rev( yyget_YY40(&yyyvsp[2].v)));
      yyval=YY27(Declarator( yyget_YY27(&yyyvsp[0].v).id,  yyget_YY27(&yyyvsp[0].v).varloc, rnew(yyr) List(rnew(yyr) TypeParams_mod(ts,LOC(yyyvsp[0].l,yyyvsp[3].l),false), yyget_YY27(&yyyvsp[0].v).tms)));
    
break;
case 195:
#line 2027 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY27(Declarator( yyget_YY27(&yyyvsp[0].v).id,  yyget_YY27(&yyyvsp[0].v).varloc, rnew(yyr) List(rnew(yyr) Attributes_mod(SLOC(yyyvsp[1].l), yyget_YY45(&yyyvsp[1].v)),
                                          yyget_YY27(&yyyvsp[0].v).tms)));
  
break;
case 196:
#line 2035 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY27(Declarator( yyget_QualId_tok(&yyyvsp[0].v), SLOC(yyyvsp[0].l), NULL)); 
break;
case 197:
#line 2037 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY27(Declarator( yyget_QualId_tok(&yyyvsp[0].v), SLOC(yyyvsp[0].l),NULL)); 
break;
case 198:
#line 2039 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[1].v); 
break;
case 199:
#line 2043 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let d =  yyget_YY27(&yyyvsp[2].v);
      d.tms = rnew(yyr) List(rnew(yyr) Attributes_mod(SLOC(yyyvsp[1].l), yyget_YY45(&yyyvsp[1].v)),d.tms);
      yyval=(yyyvsp[2].v);
    
break;
case 200:
#line 2048 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let one= yyget_YY27(&yyyvsp[0].v);
    yyval=YY27(Declarator(one.id, one.varloc,
                       rnew(yyr) List(rnew(yyr) Carray_mod( yyget_YY51(&yyyvsp[3].v),SLOC(yyyvsp[3].l)),one.tms)));
break;
case 201:
#line 2052 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let one= yyget_YY27(&yyyvsp[0].v);
    yyval=YY27(Declarator(one.id, one.varloc,
                       rnew(yyr) List(rnew(yyr) ConstArray_mod( yyget_Exp_tok(&yyyvsp[2].v), yyget_YY51(&yyyvsp[4].v),SLOC(yyyvsp[4].l)),
                                one.tms)));
break;
case 202:
#line 2058 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let &$(lis,b,c,eff,po) =  yyget_YY39(&yyyvsp[2].v);
      let req =  yyget_YY57(&yyyvsp[4].v);
      let ens =  yyget_YY57(&yyyvsp[5].v);
      let one= yyget_YY27(&yyyvsp[0].v);
		let ieff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[6].v));
		let oeff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[7].v));
      yyval=YY27(Declarator(one.id, one.varloc, rnew(yyr) List(rnew(yyr) Function_mod(rnew(yyr) WithTypes(lis,b,c,eff,po,req,ens,ieff,oeff)),one.tms)));
    
break;
case 203:
#line 2068 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let one= yyget_YY27(&yyyvsp[0].v);
		let ieff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[7].v));
		let oeff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[8].v));

    yyval=YY27(Declarator(one.id, one.varloc,
                       rnew(yyr) List(rnew(yyr) Function_mod(rnew(yyr) WithTypes(NULL,
                                                               false,NULL,
                                                                yyget_YY49(&yyyvsp[2].v), yyget_YY50(&yyyvsp[3].v), yyget_YY57(&yyyvsp[5].v), yyget_YY57(&yyyvsp[6].v),ieff,oeff)),
                                one.tms)));
    
break;
case 204:
#line 2079 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let one= yyget_YY27(&yyyvsp[0].v);
      yyval=YY27(Declarator(one.id,one.varloc, rnew(yyr) List(rnew(yyr) Function_mod(rnew(yyr) NoTypes( yyget_YY36(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[3].l))),one.tms))); 
break;
case 205:
#line 2083 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let ts = List::map_c(typ2tvar,LOC(yyyvsp[1].l,yyyvsp[3].l),List::imp_rev( yyget_YY40(&yyyvsp[2].v)));
      let one= yyget_YY27(&yyyvsp[0].v);
      yyval=YY27(Declarator(one.id,one.varloc, rnew(yyr) List(rnew(yyr) TypeParams_mod(ts,LOC(yyyvsp[0].l,yyyvsp[3].l),false),one.tms)));
    
break;
case 206:
#line 2088 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let one= yyget_YY27(&yyyvsp[0].v);
    yyval=YY27(Declarator(one.id, one.varloc, rnew(yyr) List(rnew(yyr) Attributes_mod(SLOC(yyyvsp[1].l), yyget_YY45(&yyyvsp[1].v)),one.tms)));
  
break;
case 207:
#line 2095 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = (yyyvsp[0].v); 
break;
case 208:
#line 2096 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY26(imp_append( yyget_YY26(&yyyvsp[0].v), yyget_YY26(&yyyvsp[1].v))); 
break;
case 209:
#line 2100 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 list_t<type_modifier_t<`yy>,`yy> ans = NULL;
    if( yyget_YY45(&yyyvsp[3].v) != NULL)
      ans = rnew(yyr) List(rnew(yyr) Attributes_mod(SLOC(yyyvsp[3].l), yyget_YY45(&yyyvsp[3].v)), ans);
    // don't put location info on every pointer -- too expensive
    ptrloc_t ptrloc = NULL;
    let $(ploc,nullable,bound) = * yyget_YY1(&yyyvsp[0].v);
    if (Absyn::porting_c_code)
      ptrloc = new PtrLoc{.ptr_loc=ploc,.rgn_loc=SLOC(yyyvsp[2].l),
                          .zt_loc=SLOC(yyyvsp[1].l)};
    let $(nullable,bound,zeroterm,rgn_opt) = collapse_pointer_quals(ploc,nullable,bound, yyget_YY44(&yyyvsp[2].v), yyget_YY56(&yyyvsp[1].v));
    ans = rnew(yyr) List(rnew(yyr) Pointer_mod(PtrAtts(rgn_opt,nullable,bound,zeroterm,ptrloc), yyget_YY23(&yyyvsp[4].v)), ans);
    yyval = YY26(ans);
  
break;
case 210:
#line 2115 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY56(NULL); 
break;
case 211:
#line 2116 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY56(rnew(yyr) List( yyget_YY55(&yyyvsp[0].v), yyget_YY56(&yyyvsp[1].v))); 
break;
case 212:
#line 2121 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY55(rnew(yyr) Numelts_ptrqual( yyget_Exp_tok(&yyyvsp[2].v))); 
break;
case 213:
#line 2123 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY55(rnew(yyr) Region_ptrqual( yyget_YY44(&yyyvsp[2].v))); 
break;
case 214:
#line 2125 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY55(rnew(yyr) Thin_ptrqual); 
break;
case 215:
#line 2127 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY55(rnew(yyr) Fat_ptrqual); 
break;
case 216:
#line 2129 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY55(rnew(yyr) Zeroterm_ptrqual); 
break;
case 217:
#line 2131 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY55(rnew(yyr) Nozeroterm_ptrqual); 
break;
case 218:
#line 2133 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY55(rnew(yyr) Notnull_ptrqual); 
break;
case 219:
#line 2135 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY55(rnew(yyr) Nullable_ptrqual); 
break;
case 220:
#line 2140 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 // avoid putting location info on here when not porting C code
     seg_t loc = SLOC(yyyvsp[0].l);
     if (!parsing_tempest)
       yyval=YY1(new $(loc,true_type,  yyget_YY2(&yyyvsp[1].v))); 
     else 
       yyval=YY1(new $(loc,true_type, fat_bound_type)); 
   
break;
case 221:
#line 2148 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
  seg_t loc = SLOC(yyyvsp[0].l);
     yyval=YY1(new $(loc, false_type,  yyget_YY2(&yyyvsp[1].v))); 
  
break;
case 222:
#line 2152 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 seg_t loc = SLOC(yyyvsp[0].l);
    yyval=YY1(new $(loc, true_type,  fat_bound_type));  
  
break;
case 223:
#line 2157 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY2(bounds_one()); 
break;
case 224:
#line 2158 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY2(thin_bounds_exp( yyget_Exp_tok(&yyyvsp[1].v))); 
break;
case 225:
#line 2161 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY51(Tcutil::any_bool(NULL)); 
break;
case 226:
#line 2162 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY51(true_type);    
break;
case 227:
#line 2163 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY51(false_type);   
break;
case 228:
#line 2168 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY44(new_evar(&Tcutil::trko,NULL)); 
break;
case 229:
#line 2169 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 set_vartyp_kind( yyget_YY44(&yyyvsp[0].v),&Tcutil::trk,true); yyval = (yyyvsp[0].v); 
break;
case 230:
#line 2170 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY44(new_evar(&Tcutil::trko,NULL)); 
break;
case 231:
#line 2174 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY23(empty_tqual(SLOC(yyvs[yyvsp_offset+1].l))); 
break;
case 232:
#line 2175 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY23(combine_tqual( yyget_YY23(&yyyvsp[0].v), yyget_YY23(&yyyvsp[1].v))); 
break;
case 233:
#line 2180 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY39(new $(List::imp_rev( yyget_YY38(&yyyvsp[0].v)),false,NULL, yyget_YY49(&yyyvsp[1].v), yyget_YY50(&yyyvsp[2].v))); 
break;
case 234:
#line 2182 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY39(new $(List::imp_rev( yyget_YY38(&yyyvsp[0].v)),true,NULL, yyget_YY49(&yyyvsp[3].v), yyget_YY50(&yyyvsp[4].v))); 
break;
case 235:
#line 2185 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let &$(n,tq,t) =  yyget_YY37(&yyyvsp[2].v);
  let v = new VarargInfo {.name = n,.tq = tq,.type = t,.inject =  yyget_YY31(&yyyvsp[1].v)};
  yyval=YY39(new $(NULL,false,v, yyget_YY49(&yyyvsp[3].v), yyget_YY50(&yyyvsp[4].v))); 

break;
case 236:
#line 2191 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let &$(n,tq,t) =  yyget_YY37(&yyyvsp[4].v);
  let v = new VarargInfo {.name = n,.tq = tq,.type = t,.inject =  yyget_YY31(&yyyvsp[3].v)};
  yyval=YY39(new $(List::imp_rev( yyget_YY38(&yyyvsp[0].v)),false,v, yyget_YY49(&yyyvsp[5].v), yyget_YY50(&yyyvsp[6].v))); 

break;
case 237:
#line 2199 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY44(id2type( yyget_String_tok(&yyyvsp[0].v),new Unknown_kb(NULL))); 
break;
case 238:
#line 2200 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY44(id2type( yyget_String_tok(&yyyvsp[0].v),Tcutil::kind_to_bound( yyget_YY43(&yyyvsp[2].v)))); 
break;
case 239:
#line 2203 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY49(NULL); 
break;
case 240:
#line 2204 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY49(join_eff( yyget_YY40(&yyyvsp[1].v))); 
break;
case 241:
#line 2208 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY50(NULL); 
break;
case 242:
#line 2209 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = (yyyvsp[1].v); 
break;
case 243:
#line 2214 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 // FIX: if we replace the following with:
    // $$ = ^$(new List(new $(join_eff($1),id2type(id,new Less_kb(NULL,TopRgnKind))), NULL));
    // then we get a core-dump.  I think it must be the gcc bug...
    let kb = new Less_kb(NULL,&Tcutil::trk);
    let id =  yyget_String_tok(&yyyvsp[2].v);
    let t = id2type(id,kb);
    yyval = YY50(new List(new $(join_eff( yyget_YY40(&yyyvsp[0].v)),t), NULL));
  
break;
case 244:
#line 2223 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 
    let kb = new Less_kb(NULL,&Tcutil::trk);
    let id =  yyget_String_tok(&yyyvsp[2].v);
    let t = id2type(id,kb);
    yyval = YY50(new List(new $(join_eff( yyget_YY40(&yyyvsp[0].v)),t), yyget_YY50(&yyyvsp[4].v))); 
  
break;
case 245:
#line 2233 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval = YY31(false);
break;
case 246:
#line 2235 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 if (zstrcmp( yyget_String_tok(&yyyvsp[0].v),"inject") != 0) 
         Warn::err(SLOC(yyyvsp[0].l),"missing type in function declaration");
       yyval = YY31(true);
     
break;
case 247:
#line 2242 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 248:
#line 2243 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY40(List::imp_append( yyget_YY40(&yyyvsp[0].v), yyget_YY40(&yyyvsp[2].v))); 
break;
case 249:
#line 2247 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY40(NULL); 
break;
case 250:
#line 2248 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[1].v); 
break;
case 251:
#line 2250 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY40(new List(regionsof_eff( yyget_YY44(&yyyvsp[2].v)), NULL)); 
break;
case 252:
#line 2252 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 set_vartyp_kind( yyget_YY44(&yyyvsp[0].v),&Tcutil::ek,false);
    yyval = YY40(new List( yyget_YY44(&yyyvsp[0].v),NULL)); 
  
break;
case 253:
#line 2272 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY40(new List(access_eff(type_name_to_type( yyget_YY37(&yyyvsp[0].v),SLOC(yyyvsp[0].l))),NULL)); 
break;
case 254:
#line 2274 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY40(new List(access_eff(type_name_to_type( yyget_YY37(&yyyvsp[0].v),SLOC(yyyvsp[0].l))), yyget_YY40(&yyyvsp[2].v))); 
break;
case 255:
#line 2280 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY38(new List( yyget_YY37(&yyyvsp[0].v),NULL)); 
break;
case 256:
#line 2282 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY38(new List( yyget_YY37(&yyyvsp[2].v), yyget_YY38(&yyyvsp[0].v))); 
break;
case 257:
#line 2288 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let $(tq,tspecs,atts) =  yyget_YY35(&yyyvsp[0].v); 
      if (tq.loc == 0) tq.loc = SLOC(yyyvsp[0].l);
      let Declarator(qv,varloc,tms) =  yyget_YY27(&yyyvsp[1].v);
      let t = speclist2typ(tspecs, SLOC(yyyvsp[0].l));
      let $(tq2,t2,tvs,atts2) = apply_tms(tq,t,atts,tms);
      if (tvs != NULL)
        Warn::err(SLOC(yyyvsp[1].l),"parameter with bad type params");
      if(is_qvar_qualified(qv))
        Warn::err(SLOC(yyyvsp[0].l),"parameter cannot be qualified with a namespace");
      var_opt_t idopt = (*qv)[1];
      if (atts2 != NULL)
        Warn::warn(LOC(yyyvsp[0].l,yyyvsp[1].l),"extra attributes on parameter, ignoring");
      yyval=YY37(new $(idopt,tq2,t2));
    
break;
case 258:
#line 2303 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let $(tq,tspecs,atts) =  yyget_YY35(&yyyvsp[0].v); 
      if (tq.loc == 0) tq.loc = SLOC(yyyvsp[0].l);
      let t = speclist2typ(tspecs, SLOC(yyyvsp[0].l));
      if (atts != NULL)
        Warn::warn(SLOC(yyyvsp[0].l),"bad attributes on parameter, ignoring");
      yyval=YY37(new $(NULL,tq,t));
    
break;
case 259:
#line 2311 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let $(tq,tspecs,atts) =  yyget_YY35(&yyyvsp[0].v); 
      if (tq.loc == 0) tq.loc = SLOC(yyyvsp[0].l);
      let t = speclist2typ(tspecs, SLOC(yyyvsp[0].l));
      let tms =  yyget_YY30(&yyyvsp[1].v).tms;
      let $(tq2,t2,tvs,atts2) = apply_tms(tq,t,atts,tms);
      if (tvs != NULL) // Ex: int (@)<`a>
        Warn::warn(LOC(yyyvsp[0].l,yyyvsp[1].l),
                     "bad type parameters on formal argument, ignoring");
      if (atts2 != NULL)
        Warn::warn(LOC(yyyvsp[0].l,yyyvsp[1].l),"bad attributes on parameter, ignoring");
      yyval=YY37(new $(NULL,tq2,t2));
    
break;
case 260:
#line 2327 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY36(List::imp_rev( yyget_YY36(&yyyvsp[0].v))); 
break;
case 261:
#line 2331 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY36(new List(new  yyget_String_tok(&yyyvsp[0].v),NULL)); 
break;
case 262:
#line 2333 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY36(new List(new  yyget_String_tok(&yyyvsp[2].v), yyget_YY36(&yyyvsp[0].v))); 
break;
case 263:
#line 2337 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 264:
#line 2338 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 265:
#line 2343 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(new_exp(new UnresolvedMem_e(NULL,NULL),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 266:
#line 2345 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(new_exp(new UnresolvedMem_e(NULL,List::imp_rev( yyget_YY5(&yyyvsp[1].v))),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 267:
#line 2347 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(new_exp(new UnresolvedMem_e(NULL,List::imp_rev( yyget_YY5(&yyyvsp[1].v))),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 268:
#line 2349 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let vd = new_vardecl(SLOC(yyyvsp[2].l),new $(Loc_n,new  yyget_String_tok(&yyyvsp[2].v)), uint_type,
                           uint_exp(0,SLOC(yyyvsp[2].l)));
      // make the index variable const
      vd->tq.real_const = true;
      yyval=Exp_tok(new_exp(new Comprehension_e(vd,  yyget_Exp_tok(&yyyvsp[4].v),  yyget_Exp_tok(&yyyvsp[6].v), false),LOC(yyyvsp[0].l,yyyvsp[7].l)));
    
break;
case 269:
#line 2356 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 // DJG: notice the parser drops the IDENTIFIER on the floor.
      let t = type_name_to_type( yyget_YY37(&yyyvsp[6].v),SLOC(yyyvsp[6].l));
      yyval=Exp_tok(new_exp(new ComprehensionNoinit_e( yyget_Exp_tok(&yyyvsp[4].v), t, false),LOC(yyyvsp[0].l,yyyvsp[7].l)));
    
break;
case 270:
#line 2365 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY5(new List(new $(NULL, yyget_Exp_tok(&yyyvsp[0].v)),NULL)); 
break;
case 271:
#line 2367 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY5(new List(new $( yyget_YY41(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[1].v)),NULL)); 
break;
case 272:
#line 2369 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY5(new List(new $(NULL, yyget_Exp_tok(&yyyvsp[2].v)), yyget_YY5(&yyyvsp[0].v))); 
break;
case 273:
#line 2371 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY5(new List(new $( yyget_YY41(&yyyvsp[2].v), yyget_Exp_tok(&yyyvsp[3].v)), yyget_YY5(&yyyvsp[0].v))); 
break;
case 274:
#line 2375 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY41(List::imp_rev( yyget_YY41(&yyyvsp[0].v))); 
break;
case 275:
#line 2376 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY41(new List(new FieldName(new  yyget_String_tok(&yyyvsp[0].v)),NULL)); 
break;
case 276:
#line 2381 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY41(new List( yyget_YY42(&yyyvsp[0].v),NULL)); 
break;
case 277:
#line 2382 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY41(new List( yyget_YY42(&yyyvsp[1].v), yyget_YY41(&yyyvsp[0].v)));   
break;
case 278:
#line 2386 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval = YY42(new ArrayElement( yyget_Exp_tok(&yyyvsp[1].v)));
break;
case 279:
#line 2387 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval = YY42(new FieldName(new  yyget_String_tok(&yyyvsp[1].v)));
break;
case 280:
#line 2392 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let $(tq,tss,atts) =  yyget_YY35(&yyyvsp[0].v);
      let t = speclist2typ(tss, SLOC(yyyvsp[0].l));
      if (atts != NULL)
        Warn::warn(SLOC(yyyvsp[0].l),"ignoring attributes in type");
      yyval=YY37(new $(NULL,tq,t));
    
break;
case 281:
#line 2399 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let $(tq,tss,atts) =  yyget_YY35(&yyyvsp[0].v);
      let t = speclist2typ(tss, SLOC(yyyvsp[0].l));
      let tms =  yyget_YY30(&yyyvsp[1].v).tms;
      let t_info = apply_tms(tq,t,atts,tms);
      if (t_info[2] != NULL)
        // Ex: int (@)<`a>
        Warn::warn(SLOC(yyyvsp[1].l),"bad type params, ignoring");
      if (t_info[3] != NULL)
        Warn::warn(SLOC(yyyvsp[1].l),"bad specifiers, ignoring");
      yyval=YY37(new $(NULL,t_info[0],t_info[1]));
    
break;
case 282:
#line 2413 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY44(type_name_to_type( yyget_YY37(&yyyvsp[0].v),SLOC(yyyvsp[0].l))); 
break;
case 283:
#line 2414 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY44(join_eff(NULL)); 
break;
case 284:
#line 2415 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY44(join_eff( yyget_YY40(&yyyvsp[1].v))); 
break;
case 285:
#line 2416 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY44(regionsof_eff( yyget_YY44(&yyyvsp[2].v))); 
break;
case 286:
#line 2417 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY44(join_eff(new List( yyget_YY44(&yyyvsp[0].v), yyget_YY40(&yyyvsp[2].v)))); 
break;
case 287:
#line 2423 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY40(new List( yyget_YY44(&yyyvsp[0].v),NULL)); 
break;
case 288:
#line 2424 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval=YY40(new List( yyget_YY44(&yyyvsp[2].v), yyget_YY40(&yyyvsp[0].v))); 
break;
case 289:
#line 2429 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY30(Abstractdeclarator( yyget_YY26(&yyyvsp[0].v))); 
break;
case 290:
#line 2431 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 291:
#line 2433 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY30(Abstractdeclarator(List::imp_append( yyget_YY26(&yyyvsp[0].v), yyget_YY30(&yyyvsp[1].v).tms))); 
break;
case 292:
#line 2438 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[1].v); 
break;
case 293:
#line 2440 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) Carray_mod( yyget_YY51(&yyyvsp[2].v),SLOC(yyyvsp[2].l)),NULL))); 
break;
case 294:
#line 2442 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) Carray_mod( yyget_YY51(&yyyvsp[3].v),SLOC(yyyvsp[3].l)), yyget_YY30(&yyyvsp[0].v).tms)));
break;
case 295:
#line 2444 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) ConstArray_mod( yyget_Exp_tok(&yyyvsp[1].v), yyget_YY51(&yyyvsp[3].v),SLOC(yyyvsp[3].l)),NULL)));
break;
case 296:
#line 2446 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) ConstArray_mod( yyget_Exp_tok(&yyyvsp[2].v), yyget_YY51(&yyyvsp[4].v),SLOC(yyyvsp[4].l)),
                                             yyget_YY30(&yyyvsp[0].v).tms)));
    
break;
case 297:
#line 2451 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"

		let ieff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[6].v));
		let oeff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[7].v));

		 yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) Function_mod(rnew(yyr) WithTypes(NULL,false,NULL, yyget_YY49(&yyyvsp[1].v), yyget_YY50(&yyyvsp[2].v), yyget_YY57(&yyyvsp[4].v), yyget_YY57(&yyyvsp[5].v),ieff,oeff)),NULL)));
    
break;
case 298:
#line 2459 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let &$(lis,b,c,eff,po) =  yyget_YY39(&yyyvsp[1].v);
		let ieff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[5].v));
		let oeff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[6].v));

      yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) Function_mod(rnew(yyr) WithTypes(lis,b,c,eff,po, yyget_YY57(&yyyvsp[3].v), yyget_YY57(&yyyvsp[4].v),ieff,oeff)),NULL)));
    
break;
case 299:
#line 2467 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"

		let ieff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[7].v));
		let oeff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[8].v));

		 yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) Function_mod(rnew(yyr) WithTypes(NULL,false,NULL, yyget_YY49(&yyyvsp[2].v), yyget_YY50(&yyyvsp[3].v), yyget_YY57(&yyyvsp[5].v), yyget_YY57(&yyyvsp[6].v),ieff,oeff)),
				       yyget_YY30(&yyyvsp[0].v).tms)));
    
break;
case 300:
#line 2476 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let &$(lis,b,c,eff,po) =  yyget_YY39(&yyyvsp[2].v);
		let ieff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[6].v));
		let oeff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[7].v));

      yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) Function_mod(rnew(yyr) WithTypes(lis,
                                                                           b,c,eff,po, yyget_YY57(&yyyvsp[4].v), yyget_YY57(&yyyvsp[5].v),ieff,oeff)), yyget_YY30(&yyyvsp[0].v).tms)));
    
break;
case 301:
#line 2485 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let ts = List::map_c(typ2tvar,LOC(yyyvsp[1].l,yyyvsp[3].l),List::imp_rev( yyget_YY40(&yyyvsp[2].v)));
      yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) TypeParams_mod(ts,LOC(yyyvsp[1].l,yyyvsp[3].l),false),
                                       yyget_YY30(&yyyvsp[0].v).tms)));
    
break;
case 302:
#line 2490 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) Attributes_mod(SLOC(yyyvsp[1].l), yyget_YY45(&yyyvsp[1].v)), yyget_YY30(&yyyvsp[0].v).tms)));
    
break;
case 303:
#line 2496 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 304:
#line 2497 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 305:
#line 2498 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 306:
#line 2499 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 307:
#line 2500 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 308:
#line 2501 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 309:
#line 2507 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(new_stmt(new Label_s(new  yyget_String_tok(&yyyvsp[0].v), yyget_Stmt_tok(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 310:
#line 2511 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(skip_stmt(SLOC(yyyvsp[0].l))); 
break;
case 311:
#line 2512 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(exp_stmt( yyget_Exp_tok(&yyyvsp[0].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 312:
#line 2517 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(skip_stmt(LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 313:
#line 2518 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[1].v); 
break;
case 314:
#line 2523 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(flatten_declarations( yyget_YY16(&yyyvsp[0].v),skip_stmt(SLOC(yyyvsp[0].l)))); 
break;
case 315:
#line 2524 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(flatten_declarations( yyget_YY16(&yyyvsp[0].v), yyget_Stmt_tok(&yyyvsp[1].v))); 
break;
case 316:
#line 2525 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(new_stmt(new Label_s(new  yyget_String_tok(&yyyvsp[0].v),flatten_declarations( yyget_YY16(&yyyvsp[2].v),skip_stmt(DUMMYLOC))),SLOC(yyyvsp[0].l))
					      ); 
break;
case 317:
#line 2527 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(new_stmt(new Label_s(new  yyget_String_tok(&yyyvsp[0].v),flatten_declarations( yyget_YY16(&yyyvsp[2].v), yyget_Stmt_tok(&yyyvsp[3].v))),SLOC(yyyvsp[0].l))
						     ); 
break;
case 318:
#line 2529 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 319:
#line 2530 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(seq_stmt( yyget_Stmt_tok(&yyyvsp[0].v), yyget_Stmt_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 320:
#line 2531 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(flatten_decl(new_decl(new Fn_d( yyget_YY15(&yyyvsp[0].v)),SLOC(yyyvsp[0].l)),
					    skip_stmt(DUMMYLOC))); 
break;
case 321:
#line 2534 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(flatten_decl(new_decl(new Fn_d( yyget_YY15(&yyyvsp[0].v)),SLOC(yyyvsp[0].l)),  yyget_Stmt_tok(&yyyvsp[1].v))); 
break;
case 322:
#line 2539 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(ifthenelse_stmt( yyget_Exp_tok(&yyyvsp[2].v), yyget_Stmt_tok(&yyyvsp[4].v),skip_stmt(DUMMYLOC),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 323:
#line 2541 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(ifthenelse_stmt( yyget_Exp_tok(&yyyvsp[2].v), yyget_Stmt_tok(&yyyvsp[4].v), yyget_Stmt_tok(&yyyvsp[6].v),LOC(yyyvsp[0].l,yyyvsp[6].l))); 
break;
case 324:
#line 2547 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(switch_stmt( yyget_Exp_tok(&yyyvsp[2].v), yyget_YY8(&yyyvsp[5].v),LOC(yyyvsp[0].l,yyyvsp[6].l))); 
break;
case 325:
#line 2550 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let e = unknownid_exp( yyget_QualId_tok(&yyyvsp[1].v),SLOC(yyyvsp[1].l));
      yyval=Stmt_tok(switch_stmt(e, yyget_YY8(&yyyvsp[3].v),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 326:
#line 2554 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let e = tuple_exp( yyget_YY4(&yyyvsp[3].v),LOC(yyyvsp[1].l,yyyvsp[4].l));
      yyval=Stmt_tok(switch_stmt(e, yyget_YY8(&yyyvsp[6].v),LOC(yyyvsp[0].l,yyyvsp[7].l))); 
    
break;
case 327:
#line 2560 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(trycatch_stmt( yyget_Stmt_tok(&yyyvsp[1].v), yyget_YY8(&yyyvsp[4].v),LOC(yyyvsp[0].l,yyyvsp[5].l))); 
break;
case 328:
#line 2574 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY8(NULL); 
break;
case 329:
#line 2576 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 // JGM: some linux code has defaults coming before other
      // cases.
      yyval=YY8(new List(new Switch_clause(new_pat(&Wild_p_val,SLOC(yyyvsp[0].l)),NULL,
                                       NULL, yyget_Stmt_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)),
		      yyget_YY8(&yyyvsp[3].v)));
break;
case 330:
#line 2582 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY8(new List(new Switch_clause( yyget_YY9(&yyyvsp[1].v),NULL,NULL,
                                       fallthru_stmt(NULL,SLOC(yyyvsp[2].l)),
                                       LOC(yyyvsp[0].l,yyyvsp[3].l)), yyget_YY8(&yyyvsp[3].v))); 
break;
case 331:
#line 2586 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY8(new List(new Switch_clause( yyget_YY9(&yyyvsp[1].v),NULL,NULL, yyget_Stmt_tok(&yyyvsp[3].v),LOC(yyyvsp[0].l,yyyvsp[3].l)), yyget_YY8(&yyyvsp[4].v))); 
break;
case 332:
#line 2588 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY8(new List(new Switch_clause( yyget_YY9(&yyyvsp[1].v),NULL, yyget_Exp_tok(&yyyvsp[3].v),
                                       fallthru_stmt(NULL,SLOC(yyyvsp[4].l)),
                                       LOC(yyyvsp[0].l,yyyvsp[5].l)), yyget_YY8(&yyyvsp[5].v))); 
break;
case 333:
#line 2592 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY8(new List(new Switch_clause( yyget_YY9(&yyyvsp[1].v),NULL, yyget_Exp_tok(&yyyvsp[3].v), yyget_Stmt_tok(&yyyvsp[5].v),LOC(yyyvsp[0].l,yyyvsp[6].l)), yyget_YY8(&yyyvsp[6].v))); 
break;
case 334:
#line 2599 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(while_stmt( yyget_Exp_tok(&yyyvsp[2].v), yyget_Stmt_tok(&yyyvsp[4].v),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 335:
#line 2603 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(do_stmt( yyget_Stmt_tok(&yyyvsp[1].v), yyget_Exp_tok(&yyyvsp[4].v),LOC(yyyvsp[0].l,yyyvsp[6].l))); 
break;
case 336:
#line 2607 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(for_stmt(false_exp(DUMMYLOC),true_exp(DUMMYLOC),false_exp(DUMMYLOC),
		      yyget_Stmt_tok(&yyyvsp[5].v),LOC(yyyvsp[0].l,yyyvsp[5].l))); 
break;
case 337:
#line 2610 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(for_stmt(false_exp(DUMMYLOC),true_exp(DUMMYLOC), yyget_Exp_tok(&yyyvsp[4].v),
		      yyget_Stmt_tok(&yyyvsp[6].v),LOC(yyyvsp[0].l,yyyvsp[6].l))); 
break;
case 338:
#line 2613 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(for_stmt(false_exp(DUMMYLOC), yyget_Exp_tok(&yyyvsp[3].v),false_exp(DUMMYLOC),
		      yyget_Stmt_tok(&yyyvsp[6].v),LOC(yyyvsp[0].l,yyyvsp[6].l)));
break;
case 339:
#line 2616 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(for_stmt(false_exp(DUMMYLOC), yyget_Exp_tok(&yyyvsp[3].v), yyget_Exp_tok(&yyyvsp[5].v),
		      yyget_Stmt_tok(&yyyvsp[7].v),LOC(yyyvsp[0].l,yyyvsp[6].l))); 
break;
case 340:
#line 2619 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(for_stmt( yyget_Exp_tok(&yyyvsp[2].v),true_exp(DUMMYLOC),false_exp(DUMMYLOC),
		      yyget_Stmt_tok(&yyyvsp[6].v),LOC(yyyvsp[0].l,yyyvsp[6].l))); 
break;
case 341:
#line 2622 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(for_stmt( yyget_Exp_tok(&yyyvsp[2].v),true_exp(DUMMYLOC), yyget_Exp_tok(&yyyvsp[5].v),
		      yyget_Stmt_tok(&yyyvsp[7].v),LOC(yyyvsp[0].l,yyyvsp[7].l))); 
break;
case 342:
#line 2625 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(for_stmt( yyget_Exp_tok(&yyyvsp[2].v), yyget_Exp_tok(&yyyvsp[4].v),false_exp(DUMMYLOC),
		      yyget_Stmt_tok(&yyyvsp[7].v),LOC(yyyvsp[0].l,yyyvsp[7].l))); 
break;
case 343:
#line 2628 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(for_stmt( yyget_Exp_tok(&yyyvsp[2].v), yyget_Exp_tok(&yyyvsp[4].v), yyget_Exp_tok(&yyyvsp[6].v),
		      yyget_Stmt_tok(&yyyvsp[8].v),LOC(yyyvsp[0].l,yyyvsp[8].l))); 
break;
case 344:
#line 2631 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let decls =  yyget_YY16(&yyyvsp[2].v);
      let s = for_stmt(false_exp(DUMMYLOC),true_exp(DUMMYLOC),false_exp(DUMMYLOC),
		      yyget_Stmt_tok(&yyyvsp[5].v),LOC(yyyvsp[0].l,yyyvsp[5].l));
      yyval=Stmt_tok(flatten_declarations(decls,s));
    
break;
case 345:
#line 2637 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let decls =  yyget_YY16(&yyyvsp[2].v);
      let s     = for_stmt(false_exp(DUMMYLOC), yyget_Exp_tok(&yyyvsp[3].v),false_exp(DUMMYLOC),
                            yyget_Stmt_tok(&yyyvsp[6].v),LOC(yyyvsp[0].l,yyyvsp[6].l));
      yyval=Stmt_tok(flatten_declarations(decls,s));
    
break;
case 346:
#line 2643 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let decls =  yyget_YY16(&yyyvsp[2].v);
      let s     = for_stmt(false_exp(DUMMYLOC),true_exp(DUMMYLOC), yyget_Exp_tok(&yyyvsp[4].v),
                            yyget_Stmt_tok(&yyyvsp[6].v),LOC(yyyvsp[0].l,yyyvsp[6].l));
      yyval=Stmt_tok(flatten_declarations(decls,s));
    
break;
case 347:
#line 2649 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let decls =  yyget_YY16(&yyyvsp[2].v);
      let s     = for_stmt(false_exp(DUMMYLOC), yyget_Exp_tok(&yyyvsp[3].v), yyget_Exp_tok(&yyyvsp[5].v),
                            yyget_Stmt_tok(&yyyvsp[7].v),LOC(yyyvsp[0].l,yyyvsp[7].l));
      yyval=Stmt_tok(flatten_declarations(decls,s));
    
break;
case 348:
#line 2659 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(goto_stmt(new  yyget_String_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 349:
#line 2660 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(continue_stmt(SLOC(yyyvsp[0].l)));
break;
case 350:
#line 2661 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(break_stmt(SLOC(yyyvsp[0].l)));
break;
case 351:
#line 2662 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(return_stmt(NULL,SLOC(yyyvsp[0].l)));
break;
case 352:
#line 2663 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(return_stmt( yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l)));
break;
case 353:
#line 2665 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(fallthru_stmt(NULL,SLOC(yyyvsp[0].l)));
break;
case 354:
#line 2666 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(fallthru_stmt(NULL,SLOC(yyyvsp[0].l)));
break;
case 355:
#line 2668 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Stmt_tok(fallthru_stmt( yyget_YY4(&yyyvsp[2].v),SLOC(yyyvsp[0].l)));
break;
case 356:
#line 2677 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 357:
#line 2680 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 358:
#line 2682 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(exp_pat(conditional_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v), yyget_Exp_tok(&yyyvsp[4].v),LOC(yyyvsp[0].l,yyyvsp[4].l)))); 
break;
case 359:
#line 2685 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval=(yyyvsp[0].v); 
break;
case 360:
#line 2687 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(exp_pat(or_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 361:
#line 2690 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 362:
#line 2692 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(exp_pat(and_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 363:
#line 2695 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 364:
#line 2697 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(exp_pat(prim2_exp(Bitor,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 365:
#line 2700 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 366:
#line 2702 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(exp_pat(prim2_exp(Bitxor,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 367:
#line 2705 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 368:
#line 2707 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(exp_pat(prim2_exp(Bitand,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 369:
#line 2710 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 370:
#line 2712 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(exp_pat(eq_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 371:
#line 2714 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(exp_pat(neq_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 372:
#line 2717 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 373:
#line 2719 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(exp_pat(lt_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 374:
#line 2721 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(exp_pat(gt_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 375:
#line 2723 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(exp_pat(lte_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 376:
#line 2725 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(exp_pat(gte_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 377:
#line 2728 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 378:
#line 2730 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval=YY9(exp_pat(prim2_exp(Bitlshift,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 379:
#line 2732 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval=YY9(exp_pat(prim2_exp(Bitlrshift,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))));
break;
case 380:
#line 2735 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 381:
#line 2737 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval=YY9(exp_pat(prim2_exp(Plus,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))));
break;
case 382:
#line 2739 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval=YY9(exp_pat(prim2_exp(Minus,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))));
break;
case 383:
#line 2742 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 384:
#line 2744 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval=YY9(exp_pat(prim2_exp(Times,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))));
break;
case 385:
#line 2746 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval=YY9(exp_pat(prim2_exp(Div,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))));
break;
case 386:
#line 2748 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval=YY9(exp_pat(prim2_exp(Mod,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))));
break;
case 387:
#line 2751 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 388:
#line 2753 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
  let t = type_name_to_type( yyget_YY37(&yyyvsp[1].v),SLOC(yyyvsp[1].l));
   yyval=YY9(exp_pat(cast_exp(t, yyget_Exp_tok(&yyyvsp[3].v),true,Unknown_coercion,LOC(yyyvsp[0].l,yyyvsp[3].l)))); 

break;
case 389:
#line 2759 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 390:
#line 2762 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(exp_pat( yyget_Exp_tok(&yyyvsp[1].v))); 
break;
case 391:
#line 2764 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(exp_pat(prim1_exp( yyget_YY6(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l)))); 
break;
case 392:
#line 2766 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let t = type_name_to_type( yyget_YY37(&yyyvsp[2].v),SLOC(yyyvsp[2].l)); 
    yyval=YY9(exp_pat(sizeoftype_exp(t,LOC(yyyvsp[0].l,yyyvsp[3].l)))); 
  
break;
case 393:
#line 2770 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(exp_pat(sizeofexp_exp( yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l)))); 
break;
case 394:
#line 2772 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(exp_pat(offsetof_exp((* yyget_YY37(&yyyvsp[2].v))[2],List::imp_rev( yyget_YY3(&yyyvsp[4].v)),LOC(yyyvsp[0].l,yyyvsp[5].l)))); 
break;
case 395:
#line 2777 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 396:
#line 2785 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v);
break;
case 397:
#line 2790 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(new_pat(&Wild_p_val,SLOC(yyyvsp[0].l)));
break;
case 398:
#line 2792 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(exp_pat( yyget_Exp_tok(&yyyvsp[1].v))); 
break;
case 399:
#line 2794 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 exp_t e =  yyget_Exp_tok(&yyyvsp[0].v);
    switch (e->r) {
    /* FIX: need patterns for wchar_t */
    case &Const_e({.Char_c = $(s,i)}): 
      yyval=YY9(new_pat(new Char_p(i),e->loc)); break;
    case &Const_e({.Short_c = $(s,i)}):
      yyval=YY9(new_pat(new Int_p(s,i),e->loc)); break;
    case &Const_e({.Int_c = $(s,i)}):
      yyval=YY9(new_pat(new Int_p(s,i),e->loc)); break;
    case &Const_e({.Float_c = $(s,i)}):
      yyval=YY9(new_pat(new Float_p(s,i),e->loc)); break;
    case &Const_e({.Null_c = _}):
      yyval=YY9(new_pat(&Null_p_val,e->loc)); break;
    case &Const_e({.String_c = _}): 
      Warn::err(SLOC(yyyvsp[0].l),"strings cannot occur within patterns"); break;
    case &Const_e({.Wstring_c = _}): 
      Warn::err(SLOC(yyyvsp[0].l),"strings cannot occur within patterns"); break;
    case &Const_e({.LongLong_c = _}): 
      Warn::err(SLOC(yyyvsp[0].l),"long long's in patterns not yet implemented"); break;
    default: 
      Warn::err(SLOC(yyyvsp[0].l),"bad constant in case");
    }
  
break;
case 400:
#line 2818 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(new_pat(new UnknownId_p( yyget_QualId_tok(&yyyvsp[0].v)),SLOC(yyyvsp[0].l))); 
break;
case 401:
#line 2820 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 if (strcmp( yyget_String_tok(&yyyvsp[1].v),"as") != 0) 
        Warn::err(SLOC(yyyvsp[1].l),"expecting `as'");
      yyval=YY9(new_pat(new Var_p(new_vardecl(SLOC(yyyvsp[0].l),new $(Loc_n, new  yyget_String_tok(&yyyvsp[0].v)),void_type,NULL),
                               yyget_YY9(&yyyvsp[2].v)),SLOC(yyyvsp[0].l))); 
    
break;
case 402:
#line 2826 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 if (strcmp( yyget_String_tok(&yyyvsp[0].v),"alias") != 0) 
        Warn::err(SLOC(yyyvsp[1].l),"expecting `alias'");
      let location = LOC(yyyvsp[0].l,yyyvsp[5].l);
      tvar_t tv = new Tvar(new  yyget_String_tok(&yyyvsp[2].v),-1,new Eq_kb(&Tcutil::rk));
      vardecl_t vd = new_vardecl(SLOC(yyyvsp[0].l),new $(Loc_n, new  yyget_String_tok(&yyyvsp[5].v)),
				 type_name_to_type( yyget_YY37(&yyyvsp[4].v),SLOC(yyyvsp[4].l)),NULL);
      yyval = YY9(new_pat(new AliasVar_p(tv,vd),location));
    
break;
case 403:
#line 2835 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 if (strcmp( yyget_String_tok(&yyyvsp[0].v),"alias") != 0) 
        Warn::err(SLOC(yyyvsp[1].l),"expecting `alias'");
      let location = LOC(yyyvsp[0].l,yyyvsp[5].l);
      tvar_t tv = new Tvar(new  yyget_String_tok(&yyyvsp[2].v),-1,new Eq_kb(&Tcutil::rk));
      vardecl_t vd = new_vardecl(SLOC(yyyvsp[0].l),new $(Loc_n, new  yyget_String_tok(&yyyvsp[5].v)),
				 type_name_to_type( yyget_YY37(&yyyvsp[4].v),SLOC(yyyvsp[4].l)),NULL);
      yyval = YY9(new_pat(new AliasVar_p(tv,vd),location));
    
break;
case 404:
#line 2844 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let $(ps, dots) = *( yyget_YY10(&yyyvsp[2].v));
      yyval=YY9(new_pat(new Tuple_p(ps,dots),LOC(yyyvsp[0].l,yyyvsp[3].l)));
    
break;
case 405:
#line 2848 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let $(ps, dots) = *( yyget_YY10(&yyyvsp[2].v));
      yyval=YY9(new_pat(new UnknownCall_p( yyget_QualId_tok(&yyyvsp[0].v),ps,dots),LOC(yyyvsp[0].l,yyyvsp[3].l)));
    
break;
case 406:
#line 2852 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"

	  let $(fps, dots) = *( yyget_YY14(&yyyvsp[3].v)); 
      let exist_ts =  List::map_c(typ2tvar,SLOC(yyyvsp[2].l), yyget_YY40(&yyyvsp[2].v));
      yyval=YY9(new_pat(new Aggr_p(new UnknownAggr(StructA, yyget_QualId_tok(&yyyvsp[0].v),NULL),
			       exist_ts,fps,dots),LOC(yyyvsp[0].l,yyyvsp[4].l)));
   
break;
case 407:
#line 2859 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
  
		let $(fps, dots) = *( yyget_YY14(&yyyvsp[2].v)); 
      let exist_ts = List::map_c(typ2tvar,SLOC(yyyvsp[1].l), yyget_YY40(&yyyvsp[1].v));
      yyval=YY9(new_pat(new Aggr_p(NULL,exist_ts,fps,dots),LOC(yyyvsp[0].l,yyyvsp[3].l)));
   
break;
case 408:
#line 2865 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(new_pat(new Pointer_p( yyget_YY9(&yyyvsp[1].v)),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 409:
#line 2867 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(new_pat(new Pointer_p(new_pat(new Pointer_p( yyget_YY9(&yyyvsp[1].v)),LOC(yyyvsp[0].l,yyyvsp[1].l))),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 410:
#line 2869 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY9(new_pat(new Reference_p(new_vardecl(SLOC(yyyvsp[0].l), new $(Loc_n, new  yyget_String_tok(&yyyvsp[1].v)),
						void_type,NULL),
                                    new_pat(&Wild_p_val,SLOC(yyyvsp[1].l))),
		    LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 411:
#line 2874 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 if (strcmp( yyget_String_tok(&yyyvsp[2].v),"as") != 0)
        Warn::err(SLOC(yyyvsp[2].l),"expecting `as'");
      yyval=YY9(new_pat(new Reference_p(new_vardecl(SLOC(yyyvsp[0].l),new $(Loc_n, new  yyget_String_tok(&yyyvsp[1].v)),
						void_type,NULL),
                                     yyget_YY9(&yyyvsp[3].v)),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
    
break;
case 412:
#line 2881 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let tag = id2type( yyget_String_tok(&yyyvsp[2].v),Tcutil::kind_to_bound(&Tcutil::ik));
     yyval=YY9(new_pat(new TagInt_p(typ2tvar(SLOC(yyyvsp[2].l),tag),
				new_vardecl(SLOC(yyyvsp[0].l),new $(Loc_n,new  yyget_String_tok(&yyyvsp[0].v)),
					    tag_type(tag),NULL)),
		   LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 413:
#line 2887 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let tv = Tcutil::new_tvar(Tcutil::kind_to_bound(&Tcutil::ik));
     yyval=YY9(new_pat(new TagInt_p(tv,
				new_vardecl(SLOC(yyyvsp[0].l), new $(Loc_n,new  yyget_String_tok(&yyyvsp[0].v)),
					    tag_type(var_type(tv)),NULL)),
		   LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 414:
#line 2895 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY10(new $(List::rev( yyget_YY11(&yyyvsp[0].v)), false)); 
break;
case 415:
#line 2896 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY10(new $(List::rev( yyget_YY11(&yyyvsp[0].v)), true)); 
break;
case 416:
#line 2897 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY10(new $(NULL, true)); 
break;
case 417:
#line 2902 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval=YY11(new List( yyget_YY9(&yyyvsp[0].v),NULL));
break;
case 418:
#line 2904 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval=YY11(new List( yyget_YY9(&yyyvsp[2].v), yyget_YY11(&yyyvsp[0].v)));
break;
case 419:
#line 2909 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval=YY12(new $(NULL, yyget_YY9(&yyyvsp[0].v)));
break;
case 420:
#line 2911 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval=YY12(new $( yyget_YY41(&yyyvsp[0].v), yyget_YY9(&yyyvsp[1].v)));
break;
case 421:
#line 2914 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY14(new $(List::rev( yyget_YY13(&yyyvsp[0].v)), false)); 
break;
case 422:
#line 2915 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY14(new $(List::rev( yyget_YY13(&yyyvsp[0].v)), true)); 
break;
case 423:
#line 2916 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY14(new $(NULL, true)); 
break;
case 424:
#line 2921 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY13(new List( yyget_YY12(&yyyvsp[0].v),NULL));
break;
case 425:
#line 2923 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval=YY13(new List( yyget_YY12(&yyyvsp[2].v), yyget_YY13(&yyyvsp[0].v))); 
break;
case 426:
#line 2929 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 427:
#line 2931 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(seq_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 428:
#line 2936 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 429:
#line 2938 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(assignop_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_YY7(&yyyvsp[1].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 430:
#line 2940 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(swap_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 431:
#line 2944 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY7(NULL); 
break;
case 432:
#line 2945 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY7(new Opt(Times)); 
break;
case 433:
#line 2946 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY7(new Opt(Div)); 
break;
case 434:
#line 2947 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY7(new Opt(Mod)); 
break;
case 435:
#line 2948 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY7(new Opt(Plus)); 
break;
case 436:
#line 2949 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY7(new Opt(Minus)); 
break;
case 437:
#line 2950 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY7(new Opt(Bitlshift)); 
break;
case 438:
#line 2951 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY7(new Opt(Bitlrshift)); 
break;
case 439:
#line 2952 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY7(new Opt(Bitand)); 
break;
case 440:
#line 2953 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY7(new Opt(Bitxor)); 
break;
case 441:
#line 2954 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY7(new Opt(Bitor)); 
break;
case 442:
#line 2959 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 443:
#line 2961 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(conditional_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v), yyget_Exp_tok(&yyyvsp[4].v),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 444:
#line 2964 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(throw_exp( yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 445:
#line 2967 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(New_exp(NULL, yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 446:
#line 2969 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(New_exp(NULL, yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 447:
#line 2971 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(New_exp( yyget_Exp_tok(&yyyvsp[2].v), yyget_Exp_tok(&yyyvsp[4].v),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 448:
#line 2973 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(New_exp( yyget_Exp_tok(&yyyvsp[2].v), yyget_Exp_tok(&yyyvsp[4].v),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 449:
#line 2977 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 450:
#line 2981 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 451:
#line 2983 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(or_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 452:
#line 2987 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 453:
#line 2989 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(and_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 454:
#line 2993 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 455:
#line 2995 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(prim2_exp(Bitor, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 456:
#line 2999 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 457:
#line 3001 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(prim2_exp(Bitxor, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 458:
#line 3005 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 459:
#line 3007 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(prim2_exp(Bitand, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 460:
#line 3011 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 461:
#line 3013 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(eq_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 462:
#line 3015 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(neq_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 463:
#line 3019 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 464:
#line 3021 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(lt_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 465:
#line 3023 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(gt_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 466:
#line 3025 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(lte_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 467:
#line 3027 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(gte_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 468:
#line 3031 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 469:
#line 3033 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(prim2_exp(Bitlshift, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 470:
#line 3035 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(prim2_exp(Bitlrshift, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 471:
#line 3039 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 472:
#line 3041 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(prim2_exp(Plus, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 473:
#line 3043 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(prim2_exp(Minus, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 474:
#line 3047 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 475:
#line 3049 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(prim2_exp(Times, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 476:
#line 3051 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(prim2_exp(Div, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 477:
#line 3053 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(prim2_exp(Mod, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 478:
#line 3057 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 479:
#line 3059 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let t = type_name_to_type( yyget_YY37(&yyyvsp[1].v),SLOC(yyyvsp[1].l));
      yyval=Exp_tok(cast_exp(t, yyget_Exp_tok(&yyyvsp[3].v),true,Unknown_coercion,LOC(yyyvsp[0].l,yyyvsp[3].l))); 
    
break;
case 480:
#line 3065 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 481:
#line 3066 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(increment_exp( yyget_Exp_tok(&yyyvsp[1].v),PreInc,LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 482:
#line 3067 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(increment_exp( yyget_Exp_tok(&yyyvsp[1].v),PreDec,LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 483:
#line 3068 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(address_exp( yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 484:
#line 3069 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(deref_exp  ( yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 485:
#line 3070 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(prim1_exp(Plus, yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 486:
#line 3071 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(prim1_exp( yyget_YY6(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 487:
#line 3073 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let t = type_name_to_type( yyget_YY37(&yyyvsp[2].v),SLOC(yyyvsp[2].l));
    yyval=Exp_tok(sizeoftype_exp(t,LOC(yyyvsp[0].l,yyyvsp[3].l))); 
  
break;
case 488:
#line 3076 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(sizeofexp_exp( yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 489:
#line 3078 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let t = type_name_to_type( yyget_YY37(&yyyvsp[2].v),SLOC(yyyvsp[2].l));
     yyval=Exp_tok(offsetof_exp(t,List::imp_rev( yyget_YY3(&yyyvsp[4].v)),LOC(yyyvsp[0].l,yyyvsp[5].l))); 
   
break;
case 490:
#line 3083 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(new_exp(new Spawn_e( yyget_Exp_tok(&yyyvsp[2].v), yyget_Exp_tok(&yyyvsp[4].v)),LOC(yyyvsp[0].l,yyyvsp[5].l))); 
break;
case 491:
#line 3086 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(new_exp(new Malloc_e(MallocInfo{false,NULL,NULL, yyget_Exp_tok(&yyyvsp[2].v),false,false}),
                   LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 492:
#line 3089 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(new_exp(new Malloc_e(MallocInfo{false, yyget_Exp_tok(&yyyvsp[2].v),NULL, yyget_Exp_tok(&yyyvsp[4].v),false,false}),
                   LOC(yyyvsp[0].l,yyyvsp[5].l))); 
break;
case 493:
#line 3092 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(new_exp(new Malloc_e(MallocInfo{false, yyget_Exp_tok(&yyyvsp[2].v),NULL, yyget_Exp_tok(&yyyvsp[4].v),false,true}),
                   LOC(yyyvsp[0].l,yyyvsp[5].l))); 
break;
case 494:
#line 3095 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let t = type_name_to_type( yyget_YY37(&yyyvsp[6].v),SLOC(yyyvsp[6].l));
     yyval=Exp_tok(new_exp(new Malloc_e(MallocInfo{true,NULL,new(t), yyget_Exp_tok(&yyyvsp[2].v),false,false}),
                   LOC(yyyvsp[0].l,yyyvsp[8].l))); 
break;
case 495:
#line 3100 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let t = type_name_to_type( yyget_YY37(&yyyvsp[8].v),SLOC(yyyvsp[8].l));
     yyval=Exp_tok(new_exp(new Malloc_e(MallocInfo{true, yyget_Exp_tok(&yyyvsp[2].v),new(t), yyget_Exp_tok(&yyyvsp[4].v),false,false}),
                   LOC(yyyvsp[0].l,yyyvsp[10].l))); 
break;
case 496:
#line 3104 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(primop_exp(Numelts, list( yyget_Exp_tok(&yyyvsp[2].v)), LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 497:
#line 3106 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(new_exp(new Tagcheck_e( yyget_Exp_tok(&yyyvsp[2].v),new  yyget_String_tok(&yyyvsp[4].v)),LOC(yyyvsp[0].l,yyyvsp[5].l))); 
break;
case 498:
#line 3108 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(new_exp(new Tagcheck_e(deref_exp( yyget_Exp_tok(&yyyvsp[2].v),SLOC(yyyvsp[2].l)),new  yyget_String_tok(&yyyvsp[4].v)),LOC(yyyvsp[0].l,yyyvsp[5].l))); 
break;
case 499:
#line 3110 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let t = type_name_to_type( yyget_YY37(&yyyvsp[2].v),SLOC(yyyvsp[2].l));
     yyval=Exp_tok(valueof_exp(t, LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 500:
#line 3113 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(new_exp( yyget_YY58(&yyyvsp[1].v), SLOC(yyyvsp[0].l))); 
break;
case 501:
#line 3114 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(extension_exp( yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyvs[yyvsp_offset+1].l))); 
break;
case 502:
#line 3119 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
    let &$(outlist, inlist, clobbers) =  yyget_YY59(&yyyvsp[3].v);
 yyval = YY58(new Asm_e( yyget_YY31(&yyyvsp[0].v),  yyget_String_tok(&yyyvsp[2].v), outlist, inlist, clobbers)); 
break;
case 503:
#line 3124 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY31(false); 
break;
case 504:
#line 3125 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY31(true); 
break;
case 505:
#line 3129 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval = YY59(new $(NULL, NULL, NULL));
break;
case 506:
#line 3131 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
  let &$(inlist, clobbers) =  yyget_YY60(&yyyvsp[1].v);
 yyval = YY59(new $(NULL, inlist, clobbers)); 
break;
case 507:
#line 3134 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
  let &$(inlist, clobbers) =  yyget_YY60(&yyyvsp[2].v);
   yyval = YY59(new $(List::imp_rev( yyget_YY62(&yyyvsp[1].v)), inlist, clobbers));
break;
case 508:
#line 3139 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY62(new List( yyget_YY63(&yyyvsp[0].v), NULL)); 
break;
case 509:
#line 3140 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval = YY62(new List( yyget_YY63(&yyyvsp[2].v),  yyget_YY62(&yyyvsp[0].v))); 
break;
case 510:
#line 3144 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval = YY60(new $(NULL, NULL));
break;
case 511:
#line 3146 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
  yyval = YY60(new $(NULL,  yyget_YY61(&yyyvsp[1].v))); 
break;
case 512:
#line 3148 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY60(new $(List::imp_rev( yyget_YY62(&yyyvsp[1].v)),  yyget_YY61(&yyyvsp[2].v))); 
break;
case 513:
#line 3152 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval = YY62(new List( yyget_YY63(&yyyvsp[0].v), NULL)); 
break;
case 514:
#line 3153 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval = YY62(new List( yyget_YY63(&yyyvsp[2].v),  yyget_YY62(&yyyvsp[0].v)));
break;
case 515:
#line 3158 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 let pf_exp =  yyget_Exp_tok(&yyyvsp[2].v);
 yyval = YY63(new $( yyget_String_tok(&yyyvsp[0].v),  yyget_Exp_tok(&yyyvsp[2].v))); 
break;
case 516:
#line 3164 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval = YY61(NULL);
break;
case 517:
#line 3165 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval = YY61(NULL);
break;
case 518:
#line 3166 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
yyval = YY61(List::imp_rev( yyget_YY61(&yyyvsp[1].v)));
break;
case 519:
#line 3170 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
  yyval = YY61(new List(new  yyget_String_tok(&yyyvsp[0].v), NULL)); 
break;
case 520:
#line 3171 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY61(new List(new  yyget_String_tok(&yyyvsp[2].v),  yyget_YY61(&yyyvsp[0].v))); 
break;
case 521:
#line 3175 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY6(Bitnot); 
break;
case 522:
#line 3176 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY6(Not); 
break;
case 523:
#line 3177 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY6(Minus); 
break;
case 524:
#line 3182 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval= (yyyvsp[0].v); 
break;
case 525:
#line 3184 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(subscript_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 526:
#line 3186 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(unknowncall_exp( yyget_Exp_tok(&yyyvsp[0].v),NULL,LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 527:
#line 3188 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(unknowncall_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_YY4(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 528:
#line 3190 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(aggrmember_exp( yyget_Exp_tok(&yyyvsp[0].v),new  yyget_String_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 529:
#line 3192 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(aggrarrow_exp( yyget_Exp_tok(&yyyvsp[0].v),new  yyget_String_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 530:
#line 3194 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(increment_exp( yyget_Exp_tok(&yyyvsp[0].v),PostInc,LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 531:
#line 3196 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(increment_exp( yyget_Exp_tok(&yyyvsp[0].v),PostDec,LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 532:
#line 3198 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(new_exp(new CompoundLit_e( yyget_YY37(&yyyvsp[1].v),NULL),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 533:
#line 3200 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(new_exp(new CompoundLit_e( yyget_YY37(&yyyvsp[1].v),List::imp_rev( yyget_YY5(&yyyvsp[4].v))),LOC(yyyvsp[0].l,yyyvsp[5].l))); 
break;
case 534:
#line 3202 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(new_exp(new CompoundLit_e( yyget_YY37(&yyyvsp[1].v),List::imp_rev( yyget_YY5(&yyyvsp[4].v))),LOC(yyyvsp[0].l,yyyvsp[6].l))); 
break;
case 535:
#line 3207 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY3(new List::List(new StructField(new  yyget_String_tok(&yyyvsp[0].v)),NULL)); 
break;
case 536:
#line 3210 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY3(new List(new TupleIndex(cnst2uint(SLOC(yyyvsp[0].l), yyget_Int_tok(&yyyvsp[0].v))),NULL)); 
break;
case 537:
#line 3212 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY3(new List(new StructField(new  yyget_String_tok(&yyyvsp[2].v)), yyget_YY3(&yyyvsp[0].v))); 
break;
case 538:
#line 3215 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval = YY3(new List(new TupleIndex(cnst2uint(SLOC(yyyvsp[2].l), yyget_Int_tok(&yyyvsp[2].v))), yyget_YY3(&yyyvsp[0].v))); 
break;
case 539:
#line 3221 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(unknownid_exp( yyget_QualId_tok(&yyyvsp[0].v),SLOC(yyyvsp[0].l))); 
break;
case 540:
#line 3223 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(pragma_exp( yyget_String_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 541:
#line 3225 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval= (yyyvsp[0].v); 
break;
case 542:
#line 3227 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(string_exp( yyget_String_tok(&yyyvsp[0].v),SLOC(yyyvsp[0].l))); 
break;
case 543:
#line 3229 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(wstring_exp( yyget_String_tok(&yyyvsp[0].v),SLOC(yyyvsp[0].l))); 
break;
case 544:
#line 3231 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval= (yyyvsp[1].v); 
break;
case 545:
#line 3236 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(noinstantiate_exp( yyget_Exp_tok(&yyyvsp[0].v), LOC(yyyvsp[0].l,yyyvsp[1].l)));
break;
case 546:
#line 3238 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(instantiate_exp( yyget_Exp_tok(&yyyvsp[0].v), List::imp_rev( yyget_YY40(&yyyvsp[3].v)),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 547:
#line 3241 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(tuple_exp( yyget_YY4(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 548:
#line 3244 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(new_exp(new Aggregate_e( yyget_QualId_tok(&yyyvsp[0].v), yyget_YY40(&yyyvsp[2].v),List::imp_rev( yyget_YY5(&yyyvsp[3].v)),NULL),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 549:
#line 3247 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(stmt_exp( yyget_Stmt_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 550:
#line 3251 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY4(List::imp_rev( yyget_YY4(&yyyvsp[0].v))); 
break;
case 551:
#line 3257 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY4(new List( yyget_Exp_tok(&yyyvsp[0].v),NULL)); 
break;
case 552:
#line 3259 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=YY4(new List( yyget_Exp_tok(&yyyvsp[2].v), yyget_YY4(&yyyvsp[0].v))); 
break;
case 553:
#line 3265 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(const_exp( yyget_Int_tok(&yyyvsp[0].v), SLOC(yyyvsp[0].l))); 
break;
case 554:
#line 3266 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(char_exp( yyget_Char_tok(&yyyvsp[0].v), SLOC(yyyvsp[0].l))); 
break;
case 555:
#line 3267 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(wchar_exp( yyget_String_tok(&yyyvsp[0].v), SLOC(yyyvsp[0].l))); 
break;
case 556:
#line 3268 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"

     let f =  yyget_String_tok(&yyyvsp[0].v);
     int l = strlen(f);
     int i = 1; // indicates double
     if (l>0) {
       char c = f[l-1];
       if (c=='f' || c=='F') i = 0;      // float
       else if (c=='l' || c=='L') i = 2; // long double
     }
     yyval=Exp_tok(float_exp(f, i, SLOC(yyyvsp[0].l)));
   
break;
case 557:
#line 3280 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=Exp_tok(null_exp(SLOC(yyyvsp[0].l)));
break;
case 558:
#line 3284 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=QualId_tok(new $(Rel_n(NULL), new  yyget_String_tok(&yyyvsp[0].v))); 
break;
case 559:
#line 3285 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 560:
#line 3288 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=QualId_tok(new $(Rel_n(NULL), new  yyget_String_tok(&yyyvsp[0].v))); 
break;
case 561:
#line 3289 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 562:
#line 3294 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 563:
#line 3295 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 564:
#line 3298 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 565:
#line 3299 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 566:
#line 3303 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"

break;
case 567:
#line 3304 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"
 yylex_buf->lex_curr_pos -= 1; 
break;

    /* the action file gets copied in place of this dollarsign */
 default: break;
  }

#line 375 "cycbison.simple"
  yyvsp_offset -= yylen;
  yyssp_offset -= yylen;

#if YYDEBUG != 0
  if (yydebug)
    {
      int ssp1 = -1;
      fprintf(stderr,"state stack now");
      while (ssp1 != yyssp_offset)
	fprintf(stderr," %d",yyss[++ssp1]);
      fprintf(stderr,"\n");
    }
#endif

  yyvs[++yyvsp_offset].v = yyval;

#ifdef YYLSP_NEEDED
  if (yylen == 0) {
    _ @{2} p = (_ @{2})(yyvs + (yyvsp_offset - 1));
    p[1].l.first_line   = yylloc.first_line;
    p[1].l.first_column = yylloc.first_column;
    p[1].l.last_line    = p[0].l.last_line; 
    p[1].l.last_column  = p[0].l.last_column;  
  } else {
    yyvs[yyvsp_offset].l.last_line   =yyvs[yyvsp_offset+yylen-1].l.last_line; 
    yyvs[yyvsp_offset].l.last_column =yyvs[yyvsp_offset+yylen-1].l.last_column;
  }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + yyss[yyssp_offset];
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == yyss[yyssp_offset])
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (yyerrstatus == 0)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int sze = 0;
	  mstring_t msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (numelts(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      sze += strlen(yytname[x]) + 15, count++;
	  msg = rnew(yyregion) {for i < sze + 15 : '\000'};
	  strcpy(msg, "parse error");

	  if (count < 5)
	    {
	      count = 0;
	      for (x = (yyn < 0 ? -yyn : 0);
		   x < (numelts(yytname) / sizeof(char *)); x++)
		if (yycheck[x + yyn] == x)
		  { /* JGM: NB -- casts are needed here.  Sigh. */
		    strcat(msg, count == 0 ? 
                                 ((string_t)", expecting `") : 
			          (string_t)(" or `"));
		    strcat(msg, yytname[x]);
		    strcat(msg, "'");
		    count++;
		  }
	    }
	  yyerror(msg,yystate,yychar);
	}
      else 
#endif /* YYERROR_VERBOSE */
	yyerror("parse error",yystate,yychar);
    }
  goto yyerrlab1;

yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug) 
	fprintf(stderr,"Discarding token %d (%s).\n",
		yychar,yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif
  // fallthru to yyerrpop

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp_offset == 0) YYABORT;
  yyvsp_offset--;
  yystate = yyss[--yyssp_offset];

#if YYDEBUG != 0
  if (yydebug)
    {
      short ssp1_offset = -1;
      fprintf(stderr,"Error: state stack now");
      while (ssp1_offset != yyssp_offset)
	fprintf(stderr," %d",yyss[++ssp1_offset]);
      fprintf(stderr,"\n");
    }
#endif
  // falthru to yyerrhandle

yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG) goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR) goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG) goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0) goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr,"Shifting error token, ");
#endif

#ifdef YYLSP_NEEDED
  yyvs[++yyvsp_offset] = Yystacktype(yylval,yylloc);
#else
  yyvs[++yyvsp_offset] = Yystacktype(yylval);
#endif

  goto yynewstate;
} /* end of region yyregion */
}
#line 3305 "/home/pgerakios/reglock/branches/cyclone/0.8.3/src/parse.y"


void yyprint(int i, union YYSTYPE<`yy> v) {
  switch (v) {
  case {.Int_tok = c}:    fprintf(stderr,"%s",Absynpp::cnst2string(c)); break;
  case {.Char_tok = c}:   fprintf(stderr,"%c",c); break;
  case {.String_tok = s}: fprintf(stderr,"\"%s\"",s); break;
  case {.QualId_tok = q}: fprintf(stderr,"%s",Absynpp::qvar2string(q)); break;
  case {.Exp_tok = e}:    fprintf(stderr,"%s",Absynpp::exp2string(e)); break;
  case {.Stmt_tok = s}:   fprintf(stderr,"%s",Absynpp::stmt2string(s)); break;
  default: fprintf(stderr,"?"); break;
  }
}

string_t token2string(int token) {
  if (token <= 0)
    return "end-of-file";
  if (token == IDENTIFIER)
    return Lex::token_string;
  else if (token == QUAL_IDENTIFIER)
    return Absynpp::qvar2string(Lex::token_qvar);
  int z = YYTRANSLATE(token);
  if ((unsigned)z < numelts(yytname))
    return yytname[z];
  else return NULL;
}

namespace Parse{

string_t<`H> filename  = NULL;

void die()
 {
	 fprintf(stderr,"\nBefore die! File name : %s Line : %d\n", filename, yylloc.first_line);
 }


list_t<decl_t> parse_file(FILE @`H f, string_t<`H> name ) {
  parse_result = NULL;
  region yyr;
  filename = name;
  //beforedie = die;
  yyparse(yyr,Lexing::from_file(f));
  return parse_result;
}
}
