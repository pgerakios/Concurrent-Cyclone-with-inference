/* The Computer Language Benchmarks Game
   http://shootout.alioth.debian.org/
   Contributed by Dmitry Vyukov

   Kernel thread is created for each chameneous.
   Atomic compare-and-swap primitive is used
   for meeting place state manipulation.
*/

#include "cyc_include.h"

typedef unsigned int size_t;
typedef unsigned int @`r uint_ptr<`r>;

typedef enum color_t { color_blue = 0, color_red = 1, color_yellow = 2 } color;
static char const @ color_names[] = {"blue", "red", "yellow"};

color color_complement(color c1, color c2)
  @re_entrant
{
  switch (c1)
    {
    case color_blue:
      switch (c2)
        {
        case color_blue:      return color_blue;
        case color_red:       return color_yellow;
        case color_yellow:    return color_red;
        default: break;
        }
      break;
    case color_red:
      switch (c2)
        {
        case color_blue:      return color_yellow;
        case color_red:       return color_red;
        case color_yellow:    return color_blue;
        default: break;
        }
      break;
    case color_yellow:
      switch (c2)
        {
        case color_blue:      return color_red;
        case color_red:       return color_blue;
        case color_yellow:    return color_yellow;
        default: break;
        }
      break;
    default: break;
    }
  return 0;
}

void print_colors()
{
  color c1, c2, c3;

  for (c1 = color_blue; c1 <= color_yellow; c1++) {
    for (c2 = color_blue; c2 <= color_yellow; c2++) {
      c3 = color_complement(c1, c2);
      try {
        printf("%s + %s -> %s\n",
               color_names[c1], color_names[c2], color_names[c3]);
      }
      catch {
      default:
        break;
      }
    }
  }
  printf("\n");
}

char const @ spell_number(size_t n)
  @throws(Array_bounds)
{
  static char                 buf [128] @zeroterm;
  static char const @         numbers [] = {
    " zero", " one", " two",   " three", " four",
    " five", " six", " seven", " eight", " nine"};
  size_t                      tokens [32];
  size_t                      token_count;

  token_count = 0;
  do {
    tokens[token_count] = n % 10;
    token_count += 1;
    n /= 10;
  } while (n);

  char *@notnull @fat pos = buf;
  char const *@notnull @fat tok;
  while (token_count) {
    token_count -= 1;
	 let z = tokens[token_count];
    tok = numbers[z];
  	  while (tok[0])
      pos++[0] = tok++[0];
  }
  pos[0] = 0;
  return buf;
}

#define CHAMENEOS_IDX_MASK      0xFF
#define MEET_COUNT_SHIFT        8

typedef volatile unsigned int mp_t;

typedef struct chameneos_t {
  color volatile       color;
  size_t volatile      meet_count;
  size_t volatile      meet_same_count;
  int volatile         meeting_completed;
} ch_t;

void chameneos_func(region_t<`m> hm, mp_t @`m mp,
                    region_t<`r> hr, tag_t<`n> n, ch_t @{valueof(`n)} `r c,
		    int id)
/*
                    const tag_t<`j> id)
  @requires(valueof(`j) < valueof(`n) && 0 < valueof(`j))
*/
  @ieffect( {`r,`bar1,`nat0,`H}, {`m,`bar1,`nat0,`H} )
  @nothrow
  @re_entrant
{
  if (id < n) // great?
  for (;;) {

    // play with the state of the meeting room

    xlinc(hm);
    unsigned int state = *mp;
    let peer <`k> = state & CHAMENEOS_IDX_MASK;
    if (peer)
      state -= peer + (1 << MEET_COUNT_SHIFT);
    else if (state > 0)
      state |= id + 1;
    else {
      xldec(hm);
      break;
    }
    *mp = state;
    xldec(hm);

    // play with the array of creatures

    xlinc(hr);
    if (peer-- > 0 && peer < n) {
      int is_same = (peer == id);
      color new_color = color_complement(c[id].color, c[peer].color);
      c[peer].color = new_color;
      c[peer].meet_count += 1;
      c[peer].meet_same_count += is_same;
      c[peer].meeting_completed = 1;
      c[id].color = new_color;
      c[id].meet_count += 1;
      c[id].meet_same_count += is_same;
    }
    else {
      while (c[id].meeting_completed == 0) {
        xldec(hr);
        sched_yield();
        xlinc(hr);
      }
      c[id].meeting_completed = 0;
    }
    xldec(hr);
  }

  xdec(hm);
  xdec(hr);
}

ch_t @{valueof(`n)} `r init_and_start(region_t<`m> hm, region_t<`r> hr, 
				      tag_t<`n> n, color initial_colors[n],
				      unsigned int meet_count)
  @ieffect( {`r,`bar1,`nat0,`H}, {`m,`bar1,`nat0,`H} )
  @oeffect( {`r,`bar1,`nat0,`H}, {`m,`bar1,`nat0,`H}  )
  @throws(Bad_alloc)
  @re_entrant
{
  int i;
  mp_t @ `m mp = rnew(hm) (meet_count << MEET_COUNT_SHIFT);
  ch_t @{valueof(`n)} `r c =
    rnew(hr) { for i < n : chameneos_t{initial_colors[i], 0, 0, 0} };
  for (i=0; i<n; i++) {
    xinc(hm); xinc(hr);
    spawn(0U) chameneos_func(hm, mp, hr, n, c, i);
  }
  return c;
}

void output(region_t<`r> hr,
	    tag_t<`n> n, color initial_colors[n],
	    ch_t @{valueof(`n)} `r c)
  @ieffect( {`r,`bar1,`nat1} )
  @oeffect( {`r,`bar1,`nat1} )
  @throws(Array_bounds)
{
  static char buff[128] @zeroterm;
  unsigned int i;

  for (i = 0; i < n; i++) {
    let tmp = initial_colors[i];
    if (tmp < numelts(color_names))
      printf(" %s", color_names[tmp]);
  }
  printf("\n");

  unsigned int total_meet_count = 0;
  for (i = 0; i < n; i++) {
    total_meet_count += c[i].meet_count;
    printf("%d%s\n", c[i].meet_count, spell_number(c[i].meet_same_count));
  }
  printf("%s\n\n", spell_number(total_meet_count));
}

int main(int argc, char*@fat *@fat argv)
  @throwsany
{
  color initial_colors1 [] =
    {color_blue, color_red, color_yellow};
  color initial_colors2 [] =
    {color_blue, color_red, color_yellow, color_red, color_yellow,
     color_blue, color_red, color_yellow, color_red, color_blue};
  unsigned int meet_count = 6000000;

  if (argc > 1 && atoi(argv[1]) > 0)
    meet_count = atoi(argv[1]);

  print_colors();

  region h1 @ heap_region;  xldec(h1);
  region h2 @ heap_region;  xldec(h2);
  region m1 @ heap_region;  xldec(m1);
  region m2 @ heap_region;  xldec(m2);
  
  let num1 = numelts(initial_colors1);
  let num2 = numelts(initial_colors2);

  try {
    let c1 = init_and_start(m1, h1, num1, initial_colors1, meet_count);
    let c2 = init_and_start(m2, h2, num2, initial_colors2, meet_count);

    main_join();

    xlinc(h1); xlinc(h2);
    output(h1, num1, initial_colors1, c1);
    output(h2, num2, initial_colors2, c2);
    xldec(h1); xldec(h2);
  }
  catch {
  case &Bad_alloc:
    break;
  case &Array_bounds:
    xldec(h1);
    xldec(h2);
    break;
  }

  xdec(m1);
  xdec(m2);
  xdec(h1);
  xdec(h2);

  return 0;
}
