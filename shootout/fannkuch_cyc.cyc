/*
 * The Computer Language Benchmarks Game
 * http://shootout.alioth.debian.org/
 *
 * Contributed by Eckehard Berns
 * Based on code by Heiner Marxen
 * and the ATS version by Hongwei Xi
 */

//#include "cyc_include.h" 
#define xinc(x)  cap (x,1,0,0) 
#define xdec(x)  cap (x,-1,0,0) 
#define xlinc(x) cap (x,0,1,0)  
#define xldec(x) cap (x,0,-1,0) 

#include <stdio.h>
#include <core.h>
extern "C" exit(int); 
extern "C" int atoi(const char @);
namespace Core {
  int tid() @nothrow @re_entrant;
  void flush() @nothrow @re_entrant;
  void main_join() @nothrow; // not re-entrant because it 
									  // should be used from the main thread
									  // only.
  extern "C include" {
    `a::A ? Cyc_Core_xmkfat(__nn_cyclone_internal_array_t<`a,`i,`r::X> arr,
                            sizeof_t<`a> s,
                            __cyclone_internal_singleton<`i> n) {
      struct _fat_ptr res;
      res.curr = arr;
      res.base = arr;
      res.last_plus_one = arr + s*n;
      return res;
    }
    `a::A @ Cyc_Core_safecast( `a::A *p ){
      if( p == 0 ) exit(-1);
      return p;
    }

  } export { Cyc_Core_xmkfat , Cyc_Core_safecast}
  extern `a?`r::X xmkfat(__nn_cyclone_internal_array_t<`a,`i,`r::X> arr,
                      sizeof_t<`a> s, __cyclone_internal_singleton<`i> n)
							 @nothrow @re_entrant;
}


static void fannkuch_worker(region_t<`r::X> h,
                            tag_t<`j> args_i, 
                            tag_t<`n> n,
                            volatile unsigned int @`r ret
                            )
  @requires(valueof(`n) > valueof(`j) && valueof(`n) > 0 )
  @xrgn
//  @ieffect( {`r,`bar1,`nat0,`H} )
  @nothrow
  @re_entrant
{
  int maxflips, flips, i, r, j, k, tmp;
  maxflips = 0;
  region lh @ Core::heap_region;
  int @{valueof(`n)} perm1;
  int @{valueof(`n)} perm;
  int @{valueof(`n)} count;

  try {
    perm1 = rnew(lh) {for i < n : i }; 
    perm = rnew(lh) {for i < n : 0 };
    count = rnew(lh) {for i < n : 0 };
  }
  catch {
  default:
    xdec(h);
    xdec(lh);
    return;
  }

  perm1[args_i] = n-1;

  let tmp1 <`j> = n-1;
  if (tmp1 >= n) goto done;  // great, isn't it?
  perm1[tmp1] = args_i;
   
  r = n;

  for (;;) {
    for (; r > 1 ; r--){
      let tmp2 = r-1;
      if (tmp2 < n)   // great, isn't it?
        count[tmp2] = r;
    }
    if (perm1[0] != 0 &&  perm1[tmp1] != n-1) {
      for (i = 0; i < n; i++)
        perm[i] = perm1[i];
      flips = 0;
      k = perm[0];
      do {
        i = 1, j = k-1;
        if (j >= n) exit(1);
        for (i = 1, j = k - 1; i < j ; i++, j--) {
          if (i >= n || j >= n) break;   // great, isn't it?
          tmp = perm[i];
          perm[i] = perm[j];
          perm[j] = tmp;
        }
        flips++;
        if (k >= n) continue;   // great, isn't it?
        tmp = perm[k];
        perm[k] = k;
        k = tmp;
      } while (k);
      if (maxflips < flips)
        maxflips = flips;
    } 
    for (;;) {
      if (r >= n-1)
        goto done; 
      {
        int p0 = perm1[0];
        for (i = 0; i < r; i++) {
          let tmp3 = i+1;
          if (i >= n || tmp3 >= n) break;   // great, isn't it?
          perm1[i] = perm1[tmp3];
        }
				
        if (i >= n) break;   // great, isn't it?
        perm1[i] = p0;
      }
      if (--count[r] > 0)
        break;
      r++;
    }
  }
 done:
  xlinc(h);
  *ret = maxflips;
  xldec(h);
  xdec(lh);
  xdec(h);
  return;
}

static int fannkuch(tag_t<`n0> n)
  @requires( valueof(`n0) > 0 )
{
  int showmax = 30;
  unsigned int *perm1, *count, i, r, maxflips, flips;

  region h @ Core::heap_region;
		
  volatile unsigned int @{valueof(`n0)} ret;
  try {
    ret = rnew(h) {for i < n : 0 };
  }
  catch {
  default:
    xdec(h);
    return 1;
  }

  let n_minus_one <`n1> = n-1;
  let ft = Core::xmkfat(ret,sizeof(unsigned int),n_minus_one);
  xldec(h);
  for (i = 0; i < n_minus_one; i++) {
    let z <`z> = i;
    if (z < n && n > 0) {
      try {
        xinc(h);
        spawn($(h,1,0,0)) fannkuch_worker(h,z,n,ft+i);
      }
      catch {
      default:
        xdec(h);
        break;
      }
    }
  }
	
  region h1 @ Core::heap_region;
  unsigned int @{valueof(`n0)} perm1;
  unsigned int @{valueof(`n0)} count;
  try {
    perm1 = rnew(h1) {for i < n : i };
    count = rnew(h1) {for i < n : 0 };
  }
  catch {
  default:
    xdec(h1);
    xdec(h);
    return 1;
  }

  r = n;
  for (;;) {
    if (showmax) {
      for (i = 0; i < n; i++)
        printf("%d", perm1[i] + 1);
      printf("\n");
      showmax--;
    }
    else
      goto cleanup;
			
    for (; r > 1; r--) {
      let tmp1 = r-1;
      if (tmp1 >= n) break;   // great, isn't it?
      count[tmp1] = r;
    }
    
    for (;;) {
      if (r == n)
        goto cleanup;
      {
        if (0 >= n) exit(1);   // great, isn't it?
        int p0 = perm1[0];
        for (i = 0; i < r; i++) {
          let tmp2 = i+1;
          if (i >= n || tmp2 >= n) break;   // great, isn't it?
          perm1[i] = perm1[tmp2];
        }
        if (i >= n) break;   // great, isn't it?
        perm1[i] = p0;
      }
      if (--count[r] > 0)
        break;
      r++;
    }

  }
	
 cleanup:
  xdec(h1);
  maxflips = 0;
  Core::main_join();
  xlinc(h);
  for (i = 0; i < n_minus_one ; i++) {
    if (i >= n) break;   // great, isn't it?
    if (maxflips < ret[i])
      maxflips = ret[i];
  }
  xdec(h);	
  return maxflips;
}


int main(int ac, char *@fat *@fat av)
  @throwsany
{
  int n0 = ac > 1 ? atoi(av[1]) : 0;
  let n <`n> = n0;
  if (n < 1) {
    printf("Wrong argument.\n");
    return 1;
  }
  printf("Pfannkuchen(%d) = %d\n", n, fannkuch(n));
  return 0;
}
