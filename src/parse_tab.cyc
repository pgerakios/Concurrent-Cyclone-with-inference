
/*  A Bison parser, made from src/parse.y
 by  GNU Bison version 1.25
  */

void (*beforedie)(void) = NULL;
#define YYBISON 1  /* Identify Bison output.  */

#define YYLSP_NEEDED

#define	AUTO	258
#define	REGISTER	259
#define	STATIC	260
#define	EXTERN	261
#define	TYPEDEF	262
#define	VOID	263
#define	CHAR	264
#define	SHORT	265
#define	INT	266
#define	LONG	267
#define	FLOAT	268
#define	DOUBLE	269
#define	SIGNED	270
#define	UNSIGNED	271
#define	CONST	272
#define	VOLATILE	273
#define	RESTRICT	274
#define	STRUCT	275
#define	UNION	276
#define	CASE	277
#define	DEFAULT	278
#define	INLINE	279
#define	SIZEOF	280
#define	OFFSETOF	281
#define	IF	282
#define	ELSE	283
#define	SWITCH	284
#define	WHILE	285
#define	DO	286
#define	FOR	287
#define	GOTO	288
#define	CONTINUE	289
#define	BREAK	290
#define	RETURN	291
#define	ENUM	292
#define	TYPEOF	293
#define	BUILTIN_VA_LIST	294
#define	EXTENSION	295
#define	NULL_kw	296
#define	LET	297
#define	THROW	298
#define	TRY	299
#define	CATCH	300
#define	EXPORT	301
#define	OVERRIDE	302
#define	HIDE	303
#define	NEW	304
#define	ABSTRACT	305
#define	FALLTHRU	306
#define	CAP	307
#define	USING	308
#define	NAMESPACE	309
#define	DATATYPE	310
#define	SPAWN	311
#define	MALLOC	312
#define	RMALLOC	313
#define	RMALLOC_INLINE	314
#define	CALLOC	315
#define	RCALLOC	316
#define	SWAP	317
#define	REGION_T	318
#define	TAG_T	319
#define	REGION	320
#define	RNEW	321
#define	REGIONS	322
#define	PORTON	323
#define	PORTOFF	324
#define	PRAGMA	325
#define	TEMPESTON	326
#define	TEMPESTOFF	327
#define	NUMELTS	328
#define	VALUEOF	329
#define	VALUEOF_T	330
#define	TAGCHECK	331
#define	NUMELTS_QUAL	332
#define	THIN_QUAL	333
#define	FAT_QUAL	334
#define	NOTNULL_QUAL	335
#define	NULLABLE_QUAL	336
#define	REQUIRES_QUAL	337
#define	ENSURES_QUAL	338
#define	IEFFECT_QUAL	339
#define	OEFFECT_QUAL	340
#define	THROWS_QUAL	341
#define	NOTHROW_QUAL	342
#define	THROWSANY_QUAL	343
#define	REENTRANT_QUAL	344
#define	XRGN_QUAL	345
#define	REGION_QUAL	346
#define	NOZEROTERM_QUAL	347
#define	ZEROTERM_QUAL	348
#define	TAGGED_QUAL	349
#define	EXTENSIBLE_QUAL	350
#define	PTR_OP	351
#define	INC_OP	352
#define	DEC_OP	353
#define	LEFT_OP	354
#define	RIGHT_OP	355
#define	LE_OP	356
#define	GE_OP	357
#define	EQ_OP	358
#define	NE_OP	359
#define	AND_OP	360
#define	OR_OP	361
#define	MUL_ASSIGN	362
#define	DIV_ASSIGN	363
#define	MOD_ASSIGN	364
#define	ADD_ASSIGN	365
#define	SUB_ASSIGN	366
#define	LEFT_ASSIGN	367
#define	RIGHT_ASSIGN	368
#define	AND_ASSIGN	369
#define	XOR_ASSIGN	370
#define	OR_ASSIGN	371
#define	ELLIPSIS	372
#define	LEFT_RIGHT	373
#define	COLON_COLON	374
#define	IDENTIFIER	375
#define	INTEGER_CONSTANT	376
#define	STRING	377
#define	WSTRING	378
#define	CHARACTER_CONSTANT	379
#define	WCHARACTER_CONSTANT	380
#define	FLOATING_CONSTANT	381
#define	TYPE_VAR	382
#define	TYPEDEF_NAME	383
#define	QUAL_IDENTIFIER	384
#define	QUAL_TYPEDEF_NAME	385
#define	ATTRIBUTE	386
#define	ASM_TOK	387

#line 46 "src/parse.y"

#define YYDEBUG 0 // 1 to debug, 0 otherwise
#define YYPRINT yyprint
#define YYERROR_VERBOSE

#if YYDEBUG==1
extern @tagged union YYSTYPE<`yy::R>;
extern void yyprint(int i, union YYSTYPE<`yy> v);
#endif

#include <lexing.h>
#include <string.h>
#include "warn.h"
#include "tcutil.h"
#include "absynpp.h"
using Core;
using List;
using Absyn;
 extern void (*beforedie)(void);

// Typedef processing must be split between the parser and lexer.
// These functions are called by the parser to communicate typedefs
// to the lexer, so the lexer can distinguish typedefs from identifiers.
namespace Lex {
  extern void register_typedef(qvar_t s);
  extern void enter_namespace(var_t);
  extern void leave_namespace();
  extern void enter_using(qvar_t);
  extern void leave_using();
  extern void enter_extern_c();
  extern void leave_extern_c();
  extern qvar_t token_qvar;
  extern string_t token_string;
}

// State that we thread through the lexer and parser.
#define YYLEX_PARAM_ARG Lexing::Lexbuf<Lexing::Function_lexbuf_state<FILE@>>,union YYSTYPE<`yy> @yylval_ptr, YYLTYPE @yylloc
#define YYLEX_ARG yylex_buf,&yylval,&yylloc
#define YYPARSE_PARAM_ARG region_t<`yy> yyr, Lexing::Lexbuf<Lexing::Function_lexbuf_state<FILE@>> yylex_buf

#define LOC(s,e) ({ yylloc.first_line = s.first_line;  (s.first_line); })
#define SLOC(s) (s.first_line)
#define ELOC(s) (s.last_line)
#define DUMMYLOC 0


namespace Parse {
  // Flag that's turned on when processing tempest code instead of cyclone.
  // We interpreter "*" as a fat pointer there and intend for regions to
  // default to the heap (along with some other trickery).
  bool parsing_tempest = false;

  // flattened lists
  struct FlatList<`a::A,`r::R> { struct FlatList<`a,`r> *`r tl; `a hd; };
  typedef struct FlatList<`a,`r> *`r flat_list_t<`a,`r>;
  // imperatively reverse a flattened list
  flat_list_t<`a,`r> flat_imp_rev(flat_list_t<`a,`r> x) {
    if (x == NULL) return x;
    else {
      flat_list_t<`a,`r> first  = x;
      flat_list_t<`a,`r> second = x->tl;
      x->tl = NULL;
      while (second != NULL) {
        flat_list_t<`a,`r> temp = second->tl;
        second->tl = first;
        first = second;
        second = temp;
      } 
      return first;
    }
  }

  // if true, parse register storage class as public
bool no_register = false;

datatype exn {Exit};

////////////////////// Type definitions needed only during parsing ///////////
struct Type_specifier {
  bool Signed_spec      : 1;
  bool Unsigned_spec    : 1;
  bool Short_spec       : 1;
  bool Long_spec        : 1;
  bool Long_Long_spec   : 1;
  bool Valid_type_spec  : 1;
  type_t Type_spec;
  seg_t loc;
};
typedef struct Type_specifier type_specifier_t;

enum Storage_class {
 Typedef_sc, Extern_sc, ExternC_sc, Static_sc, Auto_sc, Register_sc, Abstract_sc
};
typedef enum Storage_class storage_class_t;

struct Declaration_spec {
  storage_class_t*         sc;
  tqual_t                  tq;
  type_specifier_t         type_specs;
  bool                     is_inline;
  list_t<attribute_t>      attributes;
};
typedef struct Declaration_spec decl_spec_t;

struct Declarator<`yy::R> {
  qvar_t                  id;
  seg_t                   varloc;
  list_t<type_modifier_t<`yy>,`yy> tms;
};
typedef struct Declarator<`yy> declarator_t<`yy>;
typedef flat_list_t<declarator_t<`yy>,`r> declarators_t<`r,`yy>;
typedef flat_list_t<$(declarator_t<`yy>,exp_opt_t),`yy> declarator_list_t<`yy>;

datatype Pointer_qual {
  Numelts_ptrqual(exp_t);
  Region_ptrqual(types_t);
  Thin_ptrqual;
  Fat_ptrqual;
  Zeroterm_ptrqual;
  Nozeroterm_ptrqual;
  Notnull_ptrqual;
  Nullable_ptrqual;
};
typedef datatype Pointer_qual @`r pointer_qual_t<`r>;
typedef list_t<pointer_qual_t<`r>,`r> pointer_quals_t<`r>;

static void
  decl_split(region_t<`r> r,declarator_list_t<`yy> ds,
             declarators_t<`r,`yy>@ decls,
             list_t<exp_opt_t,`r>@ es) {
  declarators_t<`r,`yy> declarators = NULL;
  list_t<exp_opt_t,`r>  exprs       = NULL;
  for (; ds != NULL; ds = ds->tl) {
    let $(d,e) = ds->hd;
    declarators = rnew(r) FlatList{declarators,d};
    exprs = rnew(r) List(e,exprs);
  }
  *es    = imp_rev(exprs);
  *decls = flat_imp_rev(declarators);
}

struct Abstractdeclarator<`yy::R> {
  list_t<type_modifier_t<`yy>,`yy> tms;
};
typedef struct Abstractdeclarator<`yy> abstractdeclarator_t<`yy>;

////////////////////////// forward references //////////////////////
static type_t collapse_type_specifiers(type_specifier_t ts, seg_t loc);
static $(tqual_t,type_t,list_t<tvar_t>,list_t<attribute_t>)
  apply_tms(tqual_t,type_t,list_t<attribute_t,`H>,list_t<type_modifier_t>);

////////////////// global state (we're not re-entrant) ////////////////
  //opt_t<Lexing::Lexbuf<Lexing::Function_lexbuf_state<FILE@>>> lbuf = NULL;
static list_t<decl_t> parse_result = NULL;

static `a parse_abort(seg_t loc, string_t fmt, ... inject parg_t<`r2> ap) 
  __attribute__((format(printf,2,3), noreturn)) {
  Warn::verr(loc,fmt,ap);
  throw new Exit;
}

static type_t type_name_to_type($(var_opt_t,tqual_t,type_t)@ tqt,
                                seg_t loc) {
  let &$(_,tq,t) = tqt;
  if (tq.print_const || tq.q_volatile || tq.q_restrict) {
    if (tq.loc != 0) loc = tq.loc;
    Warn::warn(loc,"qualifier on type is ignored");
  }
  return t;
}
////////////////// Collapsing pointer qualifiers ///////////////////////////
/*
static $(booltype_t nullable,ptrbound_t bound,
         booltype_t zeroterm,rgntype_t rgn) 
  collapse_pointer_quals(seg_t loc, booltype_t nullable, 
                         ptrbound_t bound, rgntype_t rgn, 
                         pointer_quals_t pqs) {
  // for now, the last qualifier wins and overrides previous ones
  booltype_t zeroterm = Tcutil::any_bool(NULL);
  for (; pqs != NULL; pqs = pqs->tl)
    switch (pqs->hd) {
    case &Zeroterm_ptrqual:   zeroterm = true_type;            break;
    case &Nozeroterm_ptrqual: zeroterm = false_type;           break;
    case &Nullable_ptrqual:   nullable = true_type;            break;
    case &Notnull_ptrqual:    nullable = false_type;           break;
    case &Fat_ptrqual:           bound = fat_bound_type;       break;
    case &Thin_ptrqual:          bound = bounds_one();         break;
    case &Numelts_ptrqual(e):    bound = thin_bounds_exp(e);   break;
    case &Region_ptrqual(t):       rgn = t;                    break;
    }
  return $(nullable,bound,zeroterm,rgn);
}
*/

static type_modifier_t<`r>
make_pointer_mod(region_t<`r> r, ptrloc_t loc,
		 booltype_t nullable, ptrbound_t bound, type_t eff,
		 pointer_quals_t pqs, tqual_t tqs) 
{
  // for now, the last qualifier wins and overrides previous ones
  booltype_t zeroterm = Tcutil::any_bool(NULL);
  for (; pqs != NULL; pqs = pqs->tl)
    switch (pqs->hd) 
	 {
   	 case &Zeroterm_ptrqual:     zeroterm = true_type;            break;
	    case &Nozeroterm_ptrqual:   zeroterm = false_type;           break;
	    case &Nullable_ptrqual:     nullable = true_type;            break;
	    case &Notnull_ptrqual:      nullable = false_type;           break;
   	 case &Fat_ptrqual:             bound = fat_bound_type;       break;
	    case &Thin_ptrqual:            bound = bounds_one();         break;
   	 case &Numelts_ptrqual(e):      bound = thin_bounds_exp(e);   break;
	    case &Region_ptrqual(ts):      eff = join_eff(ts);           break;
    }
  	 return rnew(r) Pointer_mod(PtrAtts(eff,nullable,bound,zeroterm,
				    					 loc) ,tqs);
}



////////////////// Functions for creating abstract syntax //////////////////

// FIX:  need to guarantee this won't conflict with a user name
qvar_t gensym_enum() {
  // a way to gensym an enum name
  static int enum_counter = 0;
  return new $(Rel_n(NULL), 
	       new (string_t)aprintf("__anonymous_enum_%d__", enum_counter++));
}

static aggrfield_t
make_aggr_field(seg_t loc,
		$($(seg_t,qvar_t,tqual_t,type_t,list_t<tvar_t>,
		    list_t<attribute_t,`H>)@,$(exp_opt_t,exp_opt_t)@)@ 
                field_info) {
  let &$(&$(varloc,qid,tq,t,tvs,atts),&$(widthopt,reqopt)) = field_info;
  if (tvs != NULL)
    Warn::err(loc,"bad type params in struct field");
  if(is_qvar_qualified(qid))
    Warn::err(loc,"struct or union field cannot be qualified with a namespace");
  return new Aggrfield{.name = (*qid)[1], .tq = tq, .type = t,
		       .width = widthopt, .attributes = atts,
                       .requires_clause = reqopt};
}

static type_specifier_t empty_spec(seg_t loc) {
  return Type_specifier{.Signed_spec = false,
                        .Unsigned_spec = false,
                        .Short_spec = false,
                        .Long_spec = false,
                        .Long_Long_spec = false,
                        .Valid_type_spec = false,
                        .Type_spec = sint_type,
                        .loc = loc};
}

static type_specifier_t type_spec(type_t t,seg_t loc) {
  let s = empty_spec(loc);
  s.Type_spec = t;
  s.Valid_type_spec = true;
  return s;
}
static type_specifier_t signed_spec(seg_t loc) {
  let s = empty_spec(loc);
  s.Signed_spec = true;
  return s;
}
static type_specifier_t unsigned_spec(seg_t loc) {
  let s = empty_spec(loc);
  s.Unsigned_spec = true;
  return s;
}
static type_specifier_t short_spec(seg_t loc) {
  let s = empty_spec(loc);
  s.Short_spec = true;
  return s;
}
static type_specifier_t long_spec(seg_t loc) {
  let s = empty_spec(loc);
  s.Long_spec = true;
  return s;
}

// convert any array types to pointer types
static type_t array2ptr(type_t t, bool argposn) {
    // FIX: don't lose zero-term location
  return Tcutil::is_array_type(t) ? 
    Tcutil::promote_array(t, argposn ? new_evar(&Tcutil::rko, NULL) : heap_rgn_type, false) : t;
}

// The next few functions are used when we have a function (or aggregate)
// where the type of one parameter appears to depend on the value of
// another.  Specifically, when we have:
//    void foo(tag_t<`i> x, int arr[x])
// we want to rewrite it to:
//    void foo(tag_t<`i> x, int arr[valueof(`i)])

// given a list of arguments, pull out those that have names and
// are given tag_t's
static list_t<$(var_t,type_t)@> get_arg_tags(list_t<$(var_opt_t,tqual_t,type_t) @>x) {
  let res = NULL;
  for (; x != NULL; x = x->tl) {
    switch (x->hd) {
    case &$(v,_,&AppType(&TagCon,&List{i,NULL})) && v != NULL: 
      switch (i) {
      case &Evar(_,*z,_,_):
        // using an evar here will mess things up since the evar will be
        // duplicated.  So, we pin the evar down to a type variable instead.
        stringptr_t nm = new ((string_t)aprintf("`%s",*((var_t)v)));
        *z = var_type(new Tvar{nm,-1,new Eq_kb(&Tcutil::ik)});
        break;
      default: break;
      }
      res = new List(new $((var_t)v,i),res); break;
      // while we're at it, give any anonymous regions_t's a name that
      // corresponds to the variable.
    case &$(&v,_,&AppType(&RgnHandleCon,&List{&Evar(_,*z,_,_),NULL})):
      stringptr_t nm = new ((string_t)aprintf("`%s",v));
      *z = var_type(new Tvar{nm,-1,new Eq_kb(&Tcutil::rk)});
      break;
    default: break;
    }
  }
  return res;
}

// same as above, but for a list of aggregate fields
static list_t<$(var_t,type_t)@> get_aggrfield_tags(list_t<aggrfield_t> x) {
  let res = NULL;
  for (; x != NULL; x = x->tl) {
    switch (x->hd->type) {
    case &AppType(&TagCon,&List{i,NULL}):
      res = new List(new $(x->hd->name,i), res); break;
    default: break;
    }
  }
  return res;
}

// given a mapping of variables to tags (x->`i), replace the variable x with `i
static exp_t substitute_tags_exp(list_t<$(var_t,type_t)@> tags, exp_t e) {
  switch (e->r) {
  case &Var_e(&Unresolved_b(&$({.Rel_n = NULL},y))): 
    for (let ts = tags; ts != NULL; ts = ts->tl) {
      let &$(x,i) = ts->hd;
      if (strptrcmp(x,y) == 0) 
        return new_exp(new Valueof_e(Tcutil::copy_type(i)),e->loc);
    }
    break;
  default: break;
  }
  return e;
}

// we have a variable x in scope with type tag_t<`i> -- look for
// array or pointer bounds involving x and replace with valueof(`i).
static type_t substitute_tags(list_t<$(var_t,type_t)@> tags, type_t t) {
  switch (t) {
  case &ArrayType(ArrayInfo{et,tq,nelts,zt,ztloc}):
    exp_opt_t nelts2 = nelts;
    if (nelts != 0) {
      nelts2 = substitute_tags_exp(tags,nelts);
    }
    let et2 = substitute_tags(tags,et);
    if (nelts != nelts2 || et != et2)
      return array_type(et2,tq,nelts2,zt,ztloc);
    break;
  case &PointerType(PtrInfo{et,tq,PtrAtts{r,n,b,zt,pl}}):
    let et2 = substitute_tags(tags,et);
    let b2 = substitute_tags(tags,b);
    if (et2 != et || b2 != b)
      return pointer_type(PtrInfo{et2,tq,PtrAtts{r,n,b2,zt,pl}});
    break;
  case &AppType(&ThinCon, &List{t,NULL}):
    let t2 = substitute_tags(tags,t);
    if (t != t2) return thin_bounds_type(t2);
    break;
  case &ValueofType(e):
    let e2 = substitute_tags_exp(tags,e);
    if (e2 != e) return valueof_type(e2);
    break;

  default: 
    // FIX: should go into other types too
    break;
  }
  return t;
}

// eliminate dependencies on tag fields by substituting the type-level
// value for the associated field name.
static void substitute_aggrfield_tags(list_t<$(var_t,type_t)@> tags, aggrfield_t x) {
  x->type = substitute_tags(tags,x->type);
}

// given an optional variable, tqual, type, and list of type
// variables, return the tqual and type and check that the type
// variables are NULL -- used when we have a tuple type specification.
static $(tqual_t,type_t)@
  get_tqual_typ(seg_t loc,$(var_opt_t,tqual_t,type_t) @t) {
  return new $((*t)[1],(*t)[2]);
}

static bool is_typeparam(type_modifier_t tm) {
  switch (tm) {
  case &TypeParams_mod(...): return true;
  default: return false;
  }
}

// convert an identifier to a type -- if it's the special identifier
// `H then return HeapRgn, otherwise, return a type variable.
static type_t id2type(string_t<`H> s, kindbound_t k) {
  if (zstrcmp(s,"`H") == 0)
    return heap_rgn_type;
  else if (zstrcmp(s,"`U") == 0)
    return unique_rgn_type;
  else if (zstrcmp(s,"`RC") == 0)
    return refcnt_rgn_type;
  else
    return var_type(new Tvar(new s,-1,k));
}

// convert a list of types to a list of typevars -- the parser can't
// tell lists of types apart from lists of typevars easily so we parse
// them as types and then convert them back to typevars.  See
// productions "struct_or_union_specifier" and "datatype_specifier";
static tvar_t typ2tvar(seg_t loc, type_t t) {
  switch (t) {
  case &VarType(pr): return pr;
  default: parse_abort(loc,"expecting a list of type variables, not types");
  }
}

// if tvar's kind is unconstrained, set it to k
static void set_vartyp_kind(type_t t, kind_t k, bool leq) {
  switch(Tcutil::compress(t)) {
  case &VarType(&Tvar(_,_,*cptr)): 
    switch(compress_kb(*cptr)) {
    case &Unknown_kb(_): 
      if (!leq) *cptr = Tcutil::kind_to_bound(k);
      else *cptr = new Less_kb(NULL,k);
      return;
    default: return;
    }
  default: return;
  }
}

// Convert an old-style function into a new-style function
static list_t<type_modifier_t<`yy>,`yy> 
  oldstyle2newstyle(region_t<`yy> yy,
                    list_t<type_modifier_t<`yy>,`yy> tms,
                    list_t<decl_t> tds, 
                    seg_t loc) {
  // Not an old-style function
  if (tds==NULL) return tms;

  // If no function is found, or the function is not innermost, then
  // this is not a function definition; it is an error.  But, we
  // return silently.  The error will be caught by make_function below.
  if (tms==NULL) return NULL;

  switch (tms->hd) {
  case &Function_mod(args):
    // Is this the innermost function??
    if (tms->tl==NULL ||
	(is_typeparam(tms->tl->hd) && tms->tl->tl==NULL)) {
      // Yes
      switch (args) {
      case &WithTypes(...):
	Warn::warn(loc,"function declaration with both new- and old-style "
		   "parameter declarations; ignoring old-style");
	return tms;
      case &NoTypes(ids,_):
	if(length(ids) != length(tds))
	  parse_abort(loc, "wrong number of parameter declarations in old-style "
		"function declaration");
	// replace each parameter with the right typed version
	list_t<$(var_opt_t,tqual_t,type_t)@> rev_new_params = NULL;
	for(; ids != NULL; ids = ids->tl) {
	  let tds2 = tds;
	  for(; tds2 != NULL; tds2 = tds2->tl) {
	    let x = tds2->hd;
	    switch(x->r) {
	    case &Var_d(vd):
	      if(zstrptrcmp((*vd->name)[1],ids->hd)!=0)
		continue;
	      if(vd->initializer != NULL)
		parse_abort(x->loc, "initializer found in parameter declaration");
	      if(is_qvar_qualified(vd->name))
		parse_abort(x->loc, "namespaces forbidden in parameter declarations");
	      rev_new_params =
		new List(new $((*vd->name)[1], vd->tq, vd->type), 
			 rev_new_params);
	      goto L;
	    default: parse_abort(x->loc, "nonvariable declaration in parameter type");
	    }
	  }
	L: if(tds2 == NULL)
	  parse_abort(loc,"%s is not given a type",*ids->hd);
	}
	return
	  rnew(yy) List(rnew(yy) Function_mod(rnew(yy) WithTypes(imp_rev(rev_new_params),
						  false,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,false)),
		   NULL);
      }
    } 
    // No, keep looking for the innermost function
    fallthru;
  default: return rnew(yy) List(tms->hd,oldstyle2newstyle(yy,tms->tl,tds,loc));
  }
}

// make a top-level function declaration out of a declaration-specifier
// (return type, etc.), a declarator (the function name and args),
// a declaration list (for old-style function definitions), and a statement.
static fndecl_t make_function(region_t<`yy> yy,
                              decl_spec_t *dso, declarator_t<`yy> d,
                              list_t<decl_t> tds, stmt_t body, seg_t loc) {
  // Handle old-style parameter declarations
  if (tds!=NULL)
    d = Declarator(d.id, d.varloc, oldstyle2newstyle(yy,d.tms,tds,loc));

  scope_t sc = Public;
  type_specifier_t tss = empty_spec(loc);
  tqual_t tq = empty_tqual(0);
  bool is_inline = false;
  list_t<attribute_t> atts = NULL;

  if (dso != NULL) {
    tss = dso->type_specs;
    tq  = dso->tq;
    is_inline = dso->is_inline;
    atts = dso->attributes;
    // Examine storage class; like C, we allow both static and extern
    if (dso->sc != NULL)
      switch (*dso->sc) {
      case Extern_sc: sc = Extern; break;
      case Static_sc: sc = Static; break;
      default: Warn::err(loc,"bad storage class on function"); break;
      }
  }
  let t = collapse_type_specifiers(tss,loc);
  let $(fn_tqual,fn_type,x,out_atts) = apply_tms(tq,t,atts,d.tms);
  // what to do with the left-over attributes out_atts?  I'm just
  // going to append them to the function declaration and let the
  // type-checker deal with it.
  if (x != NULL)
    // Example:   `a f<`b><`a>(`a x) {...}
    // Here info[2] will be the list `b.
    Warn::warn(loc,"bad type params, ignoring");
  
  switch (fn_type) { // fn_type had better be a FnType
  case &FnType(i):
    for(let args2 = i.args; args2 != NULL; args2 = args2->tl)
      if((*args2->hd)[0] == NULL) {
	Warn::err(loc,"missing argument variable in function prototype");
	(*args2->hd)[0] = new "?";
      }
    // We don't fill in the cached type here because we may need
    // to figure out the bound type variables and the effect.
    i.attributes=append(i.attributes,out_atts);
    return new Fndecl {.sc=sc,.is_inline=is_inline,.name=d.id,.body=body,
		       .i=i,
		       .cached_type=NULL,.param_vardecls=NULL,.fn_vardecl=NULL};
  default: parse_abort(loc,"declarator is not a function prototype");
  }
}

static string_t msg1 = 
  "at most one type may appear within a type specifier \n\t(missing ';' or ','?)";
static string_t msg2 =
  "const or volatile may appear only once within a type specifier \n\t(missing ';' or ','?)";
static string_t msg3 = 
  "type specifier includes more than one declaration \n\t(missing ';' or ','?)";
static string_t msg4 = 
  "sign specifier may appear only once within a type specifier \n\t(missing ';' or ','?)";

// Given two partial type-specifiers, combine their information
// to produce a new type specifier.  Warns when you have duplicates
// such as "signed signed" but ignores conflicts such as "signed unsigned".
// These are caught when collapse_type_specifiers is called.
static type_specifier_t combine_specifiers(seg_t loc,
                                           type_specifier_t s1,
                                           type_specifier_t s2) {
  if (s1.Signed_spec && s2.Signed_spec)
    Warn::warn(loc,msg4);
  s1.Signed_spec |= s2.Signed_spec;
  if (s1.Unsigned_spec && s2.Unsigned_spec)
    Warn::warn(loc,msg4);
  s1.Unsigned_spec |= s2.Unsigned_spec;
  if (s1.Short_spec && s2.Short_spec)
    Warn::warn(loc,msg4);
  s1.Short_spec |= s2.Short_spec;
  if ((s1.Long_Long_spec && s2.Long_Long_spec) ||
      (s1.Long_Long_spec && s2.Long_spec) ||
      (s2.Long_Long_spec && s1.Long_spec))
    Warn::warn(loc,msg4);
  s1.Long_Long_spec = 
    (s1.Long_Long_spec || s2.Long_Long_spec || (s1.Long_spec && s2.Long_spec));
  s1.Long_spec = !s1.Long_Long_spec && (s1.Long_spec || s2.Long_spec);
  if (s1.Valid_type_spec && s2.Valid_type_spec)
    Warn::err(loc,msg1);
  else if (s2.Valid_type_spec) {
    s1.Type_spec = s2.Type_spec;
    s1.Valid_type_spec = true;
  }
  return s1;
}

// Given a type-specifier, determines the type.  This just really
// needs to look for conflicts (e.g., "signed unsigned") and collapse
// the specifier down to a type.
static type_t
  collapse_type_specifiers(type_specifier_t ts, seg_t loc) {

  bool      seen_type = ts.Valid_type_spec;
  bool      seen_sign = ts.Signed_spec || ts.Unsigned_spec;
  bool      seen_size = ts.Short_spec || ts.Long_spec || ts.Long_Long_spec;
  type_t    t         = seen_type ? ts.Type_spec : void_type;
  size_of_t sz        = Int_sz; 
  sign_t    sgn  = Signed;

  if (ts.Signed_spec && ts.Unsigned_spec)
    Warn::err(loc,msg4);
  if (ts.Unsigned_spec) sgn = Unsigned;
  if ((ts.Short_spec && (ts.Long_spec || ts.Long_Long_spec)) ||
      (ts.Long_spec && ts.Long_Long_spec))
    Warn::err(loc,msg4);
  if (ts.Short_spec) sz = Short_sz;
  if (ts.Long_spec) sz = Long_sz;
  if (ts.Long_Long_spec) sz = LongLong_sz;

  // it's okay to not have an explicit type as long as we have some
  // combination of signed, unsigned, short, long, or longlong
  if (!seen_type) {
    if(!seen_sign && !seen_size) 
      Warn::warn(loc,"missing type within specifier");
    t = int_type(sgn,sz);
  } else {
    if(seen_sign)
      switch (t) {
      case &AppType(&IntCon(sgn2,sz2),_):
        if (sgn2 != sgn)
          t = int_type(sgn,sz2);
        break;
      default: Warn::err(loc,"sign specification on non-integral type"); break;
      }
    if(seen_size)
      switch (t) {
      case &AppType(&IntCon(sgn2,sz2),_):
        if (sz2 != sz)
          t = int_type(sgn2,sz);
        break;
        // hack -- if we've seen "long" then sz will be long_double_type
      case &AppType(&FloatCon(_),_): t = long_double_type; break;
      default: Warn::err(loc,"size qualifier on non-integral type"); break;
      }
  }
  return t;
}

static list_t<$(seg_t, qvar_t,tqual_t,type_t,list_t<tvar_t>,list_t<attribute_t>)@`r,`r>
  apply_tmss(region_t<`r> r, tqual_t tq, type_t t,declarators_t<`r> ds,
             attributes_t shared_atts)
{
  if (ds==NULL) return NULL;
  declarator_t d = ds->hd;
  let q = d.id;
  let varloc = d.varloc;
  let $(tq2,new_typ,tvs,atts) = apply_tms(tq,t,shared_atts,d.tms);
  // NB: we copy the type here to avoid sharing definitions
  // but we avoid the copy when ds->tl is NULL
  if (ds->tl == NULL) 
    return rnew(r) List(rnew(r) $(varloc,q,tq2,new_typ,tvs,atts),NULL);
  else
    return rnew(r) List(rnew(r) $(varloc,q,tq2,new_typ,tvs,atts),
                    apply_tmss(r,tq,Tcutil::copy_type(t),ds->tl,shared_atts));
}

static $(tqual_t,type_t,list_t<tvar_t>,list_t<attribute_t>)
  apply_tms(tqual_t tq, type_t t, list_t<attribute_t,`H> atts,
            list_t<type_modifier_t> tms) {
  if (tms==NULL) return $(tq,t,NULL,atts);
  switch (tms->hd) {
  case &Carray_mod(zeroterm,ztloc):
    return apply_tms(empty_tqual(0),
                     array_type(t,tq,NULL,zeroterm,ztloc),atts,tms->tl);
  case &ConstArray_mod(e,zeroterm,ztloc):
    return apply_tms(empty_tqual(0),
                     array_type(t,tq,e,zeroterm,ztloc),atts,tms->tl);
  case &Function_mod(args): {
    switch (args) {
    case &WithTypes(args2,c_vararg,cyc_vararg,eff,rgn_po,
							req,ens,ieff,oeff,throws,reentrant):
      list_t<tvar_t> typvars = NULL;
      // function type attributes seen thus far get put in the function type
      attributes_t fn_atts = NULL, new_atts = NULL;
      for (_ as = atts; as != NULL; as = as->tl) 
		{
			if (fntype_att(as->hd))
			  fn_atts = new List(as->hd,fn_atts);
			else
			  new_atts = new List(as->hd,new_atts);
      }
      // functions consume type parameters
      if (tms->tl != NULL) 
		{
			switch (tms->tl->hd) 
			{
				case &TypeParams_mod(ts,_,_):
				  typvars = ts;
				  tms=tms->tl; // skip TypeParams on call of apply_tms below
				  break;
				default:	  break;
			}
      }
      // special case where the parameters are void, e.g., int f(void)
      if (!c_vararg && cyc_vararg == NULL // not vararg function
	  && args2 != NULL      // not empty arg list
	  && args2->tl == NULL   // not >1 arg
	  && (*args2->hd)[0] == NULL // not f(void x)
	  && (*args2->hd)[2] == void_type) {
	args2 = NULL;
      }
      // pull out any tag_t variables and their associated tag_t types
      let tags = get_arg_tags(args2);
      // convert result type from array to pointer result
      if (tags != NULL)
        t = substitute_tags(tags,t);
      t = array2ptr(t,false);
      // convert any array arguments to suitable  pointer arguments
      // and substitute away any implicit tag arguments.  
      for (let a = args2; a != NULL; a = a->tl) {
        let &$(vopt,tq,*t) = a->hd;
        if (tags != NULL) 
          *t = substitute_tags(tags,*t);
        *t = array2ptr(*t,true);
      }
      // Note, we throw away the tqual argument.  An example where
      // this comes up is "const int f(char c)"; it doesn't really
      // make sense to think of the function as returning a const
      // (or volatile, or restrict).  The result will be copied
      // anyway.  TODO: maybe we should issue a warning.  But right
      // now we don't have a loc so the warning will be confusing.
      return apply_tms(empty_tqual(tq.loc),
		       function_type(typvars,eff,tq,t,args2,
                                     c_vararg,cyc_vararg,rgn_po,fn_atts,
                                     req,ens,
												 ieff,oeff,throws,reentrant
								  ),
		       new_atts,
		       tms->tl);
    case &NoTypes(_,loc):
      parse_abort(loc,"function declaration without parameter types");
    }
  }
  case &TypeParams_mod(ts,loc,_):
    // If we are the last type modifier, this could be the list of
    // type parameters to a typedef:
    // typedef struct foo<`a,int> foo_t<`a>
    if (tms->tl==NULL)
      return $(tq,t,ts,atts);
    // Otherwise, it is an error in the program if we get here;
    // TypeParams should already have been consumed by an outer
    // Function (see last case).
    parse_abort(loc, "type parameters must appear before function arguments "
                "in declarator");
  case &Pointer_mod(ptratts,tq2):
    return apply_tms(tq2,pointer_type(PtrInfo(t,tq,ptratts)),atts,tms->tl);
  case &Attributes_mod(loc,atts2):
    // FIX: get this in line with GCC
    // attributes get attached to function types -- I doubt that this
    // is GCC's behavior but what else to do?
    return apply_tms(tq,t,List::append(atts,atts2),tms->tl);
  }
}

// given a specifier-qualifier list, warn and ignore about any nested type
// definitions and return the collapsed type.
type_t speclist2typ(type_specifier_t tss, seg_t loc) {
  return collapse_type_specifiers(tss,loc);
}

// convert an (optional) variable, tqual, type, and type
// parameters to a typedef declaration.  As a side effect, register
// the typedef with the lexer.
// TJ: FIX the tqual should make it into the typedef as well,
// e.g., typedef const int CI;
static decl_t v_typ_to_typedef(seg_t loc, $(seg_t,qvar_t,tqual_t,type_t,list_t<tvar_t,`H>,list_t<attribute_t,`H>)@ t) {
  let &$(varloc,x,tq,typ,tvs,atts) = t;
  // tell the lexer that x is a typedef identifier
  Lex::register_typedef(x);
  // if the "type" is an evar, then the typedef is abstract
  opt_t<kind_t> kind;
  type_opt_t type;
  switch (typ) {
  case &Evar(kopt,_,_,_): 
    type = NULL;
    if (kopt == NULL) kind = &Tcutil::bko;
    else kind = kopt;
    break;
  default: kind = NULL; type = typ; break;
  }
  return new_decl(new Typedef_d(new Typedefdecl{.name=x, .tvs=tvs, .kind=kind,
                                                .defn=type, .atts=atts,
                                                .tq=tq, .extern_c = false}),
		  loc);
}

// given a local declaration and a statement produce a decl statement
static stmt_t flatten_decl(decl_t d,stmt_t s) {
  return new_stmt(new Decl_s(d,s),d->loc);
}

// given a list of local declarations and a statement, produce a big
// decl statement.
static stmt_t flatten_declarations(list_t<decl_t> ds, stmt_t s){
  return List::fold_right(flatten_decl,ds,s);
}

// Given a declaration specifier list (a combination of storage class
// [typedef, extern, static, etc.] and type specifiers (signed, int,
// `a, const, etc.), and a list of declarators and initializers,
// produce a list of top-level declarations.  By far, this is the most
// involved function and thus I expect a number of subtle errors.
static list_t<decl_t> make_declarations(decl_spec_t ds,
					declarator_list_t ids,
                                        seg_t tqual_loc,
					seg_t loc) {
 region mkrgn;
 let Declaration_spec(_,tq,tss,_,atts) = ds;
 if (tq.loc == 0) tq.loc = tqual_loc;
 if (ds.is_inline)
   Warn::warn(loc,"inline qualifier on non-function definition");

 scope_t s = Public;
 bool istypedef = false;
 if (ds.sc != NULL)
   switch (*ds.sc) {
   case Typedef_sc:  istypedef = true; break;
   case Extern_sc:   s = Extern;   break;
   case ExternC_sc:  s = ExternC;  break;
   case Static_sc:   s = Static;   break;
   case Auto_sc:     s = Public;   break;
   case Register_sc: if(no_register) s = Public; else s = Register;   break;
   case Abstract_sc: 
   default: s = Abstract; break;
   }

 // separate the declarators from their initializers
 // FIX: should abstract this out, but the code generator produces
 // bad code due to tuple return type.
 declarators_t<`mkrgn> declarators = NULL;
 list_t<exp_opt_t,`mkrgn> exprs = NULL;
 decl_split(mkrgn,ids,&declarators,&exprs);
 // check to see if there are no initializers -- useful later on
 bool exps_empty = true;
 for (list_t<exp_opt_t> es = exprs; es != NULL; es = es->tl)
   if (es->hd != NULL) {
     exps_empty = false;
     break;
   }

 // Collapse the type specifiers to get the base type.
 let base_type = collapse_type_specifiers(tss,loc);
 if (declarators == NULL) {
   // here we should have a type declaration -- either a struct, union,
   // enum, or datatype as in: "struct Foo { ... };"
   switch (base_type) {
   case &TypeDeclType(&{.r = &Aggr_td(ad),...},_): 
     ad->attributes = List::append(ad->attributes,atts);
     ad->sc = s;
     return new List(new_decl(new Aggr_d(ad),loc),NULL);
   case &TypeDeclType(&{.r = &Enum_td(ed),...},_):
     if (atts != NULL) Warn::err(loc,"attributes on enum not supported");
     ed->sc = s;
     return new List(new_decl(new Enum_d(ed),loc),NULL);
   case &TypeDeclType(&{.r = &Datatype_td(dd),...},_):
     if (atts != NULL) Warn::err(loc,"attributes on datatypes not supported");
     dd->sc = s;
     return new List(new_decl(new Datatype_d(dd),loc),NULL);
   case &AppType(&AggrCon({.UnknownAggr = $(k,n,_)}),ts):
     let ts2 = List::map_c(typ2tvar,loc,ts);
     let ad  = new Aggrdecl(k,s,n,ts2,NULL,NULL,false);
     if (atts != NULL) Warn::err(loc,"bad attributes on type declaration");
     return new List(new_decl(new Aggr_d(ad),loc),NULL);
   case &AppType(&DatatypeCon({.KnownDatatype = tudp}),_):
     if(atts != NULL) Warn::err(loc,"bad attributes on datatype");
     return new List(new_decl(new Datatype_d(*tudp),loc),NULL);
   case &AppType(&DatatypeCon({.UnknownDatatype = UnknownDatatypeInfo(n,isx)}),ts):
     let ts2 = List::map_c(typ2tvar,loc,ts);
     let tud = datatype_decl(s, n, ts2, NULL, isx, loc);
     if (atts != NULL) Warn::err(loc,"bad attributes on datatype");
     return new List(tud,NULL);
   case &AppType(&EnumCon(n,_),_):
     let ed = new Enumdecl{s,n,NULL};
     if (atts != NULL) Warn::err(loc,"bad attributes on enum");
     return new List(new Decl(new Enum_d(ed),loc),NULL);
   case &AppType(&AnonEnumCon(fs),_):
     // someone's written:  enum {A,B,C}; which is a perfectly good
     // way to declare symbolic constants A, B, and C.
     let ed = new Enumdecl{s,gensym_enum(),new Opt(fs)};
     if (atts != NULL) Warn::err(loc,"bad attributes on enum");
     return new List(new Decl(new Enum_d(ed),loc),NULL);
   default: Warn::err(loc,"missing declarator"); return NULL;
   }
 } else {
   // declarators != NULL
   let fields = apply_tmss(mkrgn,tq,base_type,declarators,atts);
   if (istypedef) {
     // we can have a nested struct, union, or datatype
     // declaration within the typedef as in:
     // typedef struct Foo {...} t;
     if (!exps_empty)
      Warn::err(loc,"initializer in typedef declaration");
     list_t<decl_t> decls = List::map_c(v_typ_to_typedef,loc,fields);
     return decls;
   } else {
     // here, we have a bunch of variable declarations
     list_t<decl_t> decls = NULL;
     for (let ds = fields; ds != NULL; ds = ds->tl, exprs = exprs->tl) {
       let &$(varloc,x,tq2,t2,tvs2,atts2) = ds->hd;
       if (tvs2 != NULL)
	 Warn::warn(loc,"bad type params, ignoring");
       if (exprs == NULL)
	 parse_abort(loc,"unexpected NULL in parse!");
       let eopt = exprs->hd;
       let vd   = new_vardecl(varloc,x, t2, eopt);
       vd->tq = tq2;
       vd->sc = s;
       vd->attributes = atts2;
       let d = new Decl(new Var_d(vd),loc);
       decls = new List(d,decls);
     }
     return List::imp_rev(decls);
   }
 }
}

// Convert an identifier to a kind
static kind_t id_to_kind(string_t s, seg_t loc) {
  if(strlen(s)==1 || strlen(s)==2)
    switch (s[0]) {
    case 'A': return &Tcutil::ak;
    case 'M': return &Tcutil::mk;
    case 'B': return &Tcutil::bk;
    case 'R': return &Tcutil::rk;
	 case 'X': return &Tcutil::xrk;
    case 'E': return &Tcutil::ek;
    case 'I': return &Tcutil::ik;
    case 'U': 
      switch (s[1]) {
      case 'R':	return &Tcutil::urk;
      case 'A': return &Tcutil::uak;
      case 'M': return &Tcutil::umk;
      case 'B': return &Tcutil::ubk;
      default: break;
      }
      break;
    case 'T':
      switch (s[1]) {
		case 'R': return &Tcutil::trk;
      case 'A': return &Tcutil::tak;
      case 'M': return &Tcutil::tmk;
      case 'B': return &Tcutil::tbk;
      default: break;
      }
      break;
    default:  break;
  }
  Warn::err(loc,"bad kind: %s; strlen=%d",s,strlen(s));
  return &Tcutil::bk;
}

// extract a string from an expression
static string_t exp2string(seg_t loc, exp_t e) {
  switch (e->r) {
  case &Const_e({.String_c = s}): return s;
  default: 
    Warn::err(loc,"expecting string constant");
    return 0;
  }
}

// extract an unsigned integer from a cnst_t
static unsigned int cnst2uint(seg_t loc, cnst_t x) {
  switch (x) {
  case {.Int_c = $(_,i)}: return i;
  case {.Char_c = $(_,c)}: return (unsigned int)c;
  case {.LongLong_c = $(_,x)}:
    unsigned long long y = x;
    if (y > 0xffffffff) 
      Warn::err(loc,"integer constant too large");
    return (unsigned int)x;
  default:
    Warn::err(loc,"expected integer constant but found %s",Absynpp::cnst2string(x));
    return 0;
  }
}

// convert a pattern back into an expression 
static exp_t pat2exp(pat_t p) {
  switch (p->r) {
  case &UnknownId_p(x): return unknownid_exp(x,p->loc);
  case &Reference_p(vd,&Pat{.r = &Wild_p,...}): 
    return deref_exp(unknownid_exp(vd->name,p->loc),p->loc);
  case &Pointer_p(p2): return address_exp(pat2exp(p2),p->loc);
  case &Null_p: return null_exp(p->loc);
  case &Int_p(s,i): return int_exp(s,i,p->loc);
  case &Char_p(c): return char_exp(c,p->loc);
  case &Float_p(s,i): return float_exp(s,i,p->loc);
  case &UnknownCall_p(x,ps,false): 
    exp_t e1 = unknownid_exp(x,p->loc);
    list_t<exp_t> es = List::map(pat2exp,ps);
    return unknowncall_exp(e1,es,p->loc);
  case &Exp_p(e): return e;
  default: 
    Warn::err(p->loc,"cannot mix patterns and expressions in case");
    return null_exp(p->loc);
  }
}

} // end namespace Parse
using Parse;
@tagged union YYSTYPE <`yy::R>
{
  cnst_t Int_tok;
  char Char_tok;
  string_t<`H> String_tok;
  opt_t<stringptr_t<`H,`H>,`H> Stringopt_tok;
  qvar_t QualId_tok;
  $(bool,string_t<`H>) Asm_tok;
  exp_t Exp_tok;
  stmt_t Stmt_tok;
  $(Position::seg_t,booltype_t, ptrbound_t)@`H YY1;
  ptrbound_t YY2;
  list_t<offsetof_field_t,`H> YY3;
  list_t<exp_t,`H> YY4;
  list_t<$(list_t<designator_t,`H>,exp_t)@`H,`H> YY5;
  primop_t YY6;
  opt_t<primop_t,`H> YY7;
  list_t<switch_clause_t,`H> YY8;
  pat_t YY9;
  $(list_t<pat_t,`H>,bool)@`H YY10;
  list_t<pat_t,`H> YY11;
  $(list_t<designator_t,`H>,pat_t)@`H YY12;
  list_t<$(list_t<designator_t,`H>,pat_t)@`H,`H> YY13;
  $(list_t<$(list_t<designator_t,`H>,pat_t)@`H,`H>,bool)@`H YY14;
  fndecl_t YY15;
  list_t<decl_t,`H> YY16;
  decl_spec_t YY17;
  $(declarator_t<`yy>,exp_opt_t) YY18;
  declarator_list_t<`yy> YY19;
  storage_class_t@`H YY20;
  type_specifier_t YY21;
  aggr_kind_t YY22;
  tqual_t YY23;
  list_t<aggrfield_t,`H> YY24;
  list_t<list_t<aggrfield_t,`H>,`H> YY25;
  list_t<type_modifier_t<`yy>,`yy> YY26;
  declarator_t<`yy> YY27;
  $(declarator_t<`yy>,exp_opt_t,exp_opt_t)@`yy YY28;
  list_t<$(declarator_t<`yy>,exp_opt_t,exp_opt_t)@`yy,`yy> YY29;
  abstractdeclarator_t<`yy> YY30;
  bool YY31;
  scope_t YY32;
  datatypefield_t YY33;
  list_t<datatypefield_t,`H> YY34;
  $(tqual_t,type_specifier_t,attributes_t) YY35;
  list_t<var_t,`H> YY36;
  $(var_opt_t,tqual_t,type_t)@`H YY37;
  list_t<$(var_opt_t,tqual_t,type_t)@`H,`H> YY38;
  $(list_t<$(var_opt_t,tqual_t,type_t)@`H,`H>, bool,vararg_info_t *`H,type_opt_t, list_t<$(type_t,type_t)@`H,`H>)@`H YY39;
  types_t YY40;
  list_t<designator_t,`H> YY41;
  designator_t YY42;
  kind_t YY43;
  type_t YY44;
  list_t<attribute_t,`H> YY45;
  attribute_t YY46;
  enumfield_t YY47;
  list_t<enumfield_t,`H> YY48;
  type_opt_t YY49;
  list_t<$(type_t,type_t)@`H,`H> YY50;
  booltype_t YY51;
  list_t<$(Position::seg_t,qvar_t,bool)@`H,`H> YY52;
  $(list_t<$(Position::seg_t,qvar_t,bool)@`H,`H>, seg_t)@`H YY53;
  list_t<qvar_t,`H> YY54;
  pointer_qual_t<`yy> YY55;
  pointer_quals_t<`yy> YY56;
  exp_opt_t YY57;
  raw_exp_t YY58;
  $(list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<string_t<`H>@`H, `H>)@`H YY59;
  $(list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<string_t<`H>@`H, `H>)@`H YY60;
  list_t<string_t<`H>@`H, `H> YY61;
  list_t<$(string_t<`H>, exp_t)@`H, `H> YY62;
  $(string_t<`H>, exp_t)@`H YY63;
  throws_t YY64;
  reentrant_t YY65;
  list_t<type_t,`H> YY66;
  int YYINITIALSVAL;
};

#define YYSTYPEVARS <`yy::R>

static void yythrowfail(string_t<`H> s) __attribute__((noreturn)) {
 throw new Core::Failure(s);
 } 
#line 1112 "src/parse.y"

#line 1123 "src/parse.y"
static cnst_t yyget_Int_tok(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "cnst_t";
  switch(yy1) {
  case &{.Int_tok = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> Int_tok(cnst_t yy1) { return YYSTYPE{.Int_tok = yy1}; }
#line 1124 "src/parse.y"
static char yyget_Char_tok(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "char";
  switch(yy1) {
  case &{.Char_tok = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> Char_tok(char yy1) { return YYSTYPE{.Char_tok = yy1}; }
#line 1125 "src/parse.y"
static string_t<`H> yyget_String_tok(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "string_t<`H>";
  switch(yy1) {
  case &{.String_tok = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> String_tok(string_t<`H> yy1) { return YYSTYPE{.String_tok = yy1}; }
#line 1128 "src/parse.y"
static $(Position::seg_t,booltype_t, ptrbound_t)@`H yyget_YY1(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(Position::seg_t,booltype_t, ptrbound_t)@`H";
  switch(yy1) {
  case &{.YY1 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY1($(Position::seg_t,booltype_t, ptrbound_t)@`H yy1) { return YYSTYPE{.YY1 = yy1}; }
#line 1129 "src/parse.y"
static ptrbound_t yyget_YY2(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "ptrbound_t";
  switch(yy1) {
  case &{.YY2 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY2(ptrbound_t yy1) { return YYSTYPE{.YY2 = yy1}; }
#line 1130 "src/parse.y"
static list_t<offsetof_field_t,`H> yyget_YY3(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<offsetof_field_t,`H>";
  switch(yy1) {
  case &{.YY3 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY3(list_t<offsetof_field_t,`H> yy1) { return YYSTYPE{.YY3 = yy1}; }
#line 1131 "src/parse.y"
static exp_t yyget_Exp_tok(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "exp_t";
  switch(yy1) {
  case &{.Exp_tok = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> Exp_tok(exp_t yy1) { return YYSTYPE{.Exp_tok = yy1}; }
#line 1139 "src/parse.y"
static list_t<exp_t,`H> yyget_YY4(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<exp_t,`H>";
  switch(yy1) {
  case &{.YY4 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY4(list_t<exp_t,`H> yy1) { return YYSTYPE{.YY4 = yy1}; }
#line 1140 "src/parse.y"
static list_t<$(list_t<designator_t,`H>,exp_t)@`H,`H> yyget_YY5(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<$(list_t<designator_t,`H>,exp_t)@`H,`H>";
  switch(yy1) {
  case &{.YY5 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY5(list_t<$(list_t<designator_t,`H>,exp_t)@`H,`H> yy1) { return YYSTYPE{.YY5 = yy1}; }
#line 1141 "src/parse.y"
static primop_t yyget_YY6(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "primop_t";
  switch(yy1) {
  case &{.YY6 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY6(primop_t yy1) { return YYSTYPE{.YY6 = yy1}; }
#line 1142 "src/parse.y"
static opt_t<primop_t,`H> yyget_YY7(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "opt_t<primop_t,`H>";
  switch(yy1) {
  case &{.YY7 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY7(opt_t<primop_t,`H> yy1) { return YYSTYPE{.YY7 = yy1}; }
#line 1143 "src/parse.y"
static qvar_t yyget_QualId_tok(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "qvar_t";
  switch(yy1) {
  case &{.QualId_tok = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> QualId_tok(qvar_t yy1) { return YYSTYPE{.QualId_tok = yy1}; }
#line 1146 "src/parse.y"
static stmt_t yyget_Stmt_tok(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "stmt_t";
  switch(yy1) {
  case &{.Stmt_tok = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> Stmt_tok(stmt_t yy1) { return YYSTYPE{.Stmt_tok = yy1}; }
#line 1151 "src/parse.y"
static list_t<switch_clause_t,`H> yyget_YY8(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<switch_clause_t,`H>";
  switch(yy1) {
  case &{.YY8 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY8(list_t<switch_clause_t,`H> yy1) { return YYSTYPE{.YY8 = yy1}; }
#line 1152 "src/parse.y"
static pat_t yyget_YY9(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "pat_t";
  switch(yy1) {
  case &{.YY9 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY9(pat_t yy1) { return YYSTYPE{.YY9 = yy1}; }
#line 1157 "src/parse.y"
static $(list_t<pat_t,`H>,bool)@`H yyget_YY10(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(list_t<pat_t,`H>,bool)@`H";
  switch(yy1) {
  case &{.YY10 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY10($(list_t<pat_t,`H>,bool)@`H yy1) { return YYSTYPE{.YY10 = yy1}; }
#line 1158 "src/parse.y"
static list_t<pat_t,`H> yyget_YY11(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<pat_t,`H>";
  switch(yy1) {
  case &{.YY11 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY11(list_t<pat_t,`H> yy1) { return YYSTYPE{.YY11 = yy1}; }
#line 1159 "src/parse.y"
static $(list_t<designator_t,`H>,pat_t)@`H yyget_YY12(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(list_t<designator_t,`H>,pat_t)@`H";
  switch(yy1) {
  case &{.YY12 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY12($(list_t<designator_t,`H>,pat_t)@`H yy1) { return YYSTYPE{.YY12 = yy1}; }
#line 1160 "src/parse.y"
static list_t<$(list_t<designator_t,`H>,pat_t)@`H,`H> yyget_YY13(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<$(list_t<designator_t,`H>,pat_t)@`H,`H>";
  switch(yy1) {
  case &{.YY13 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY13(list_t<$(list_t<designator_t,`H>,pat_t)@`H,`H> yy1) { return YYSTYPE{.YY13 = yy1}; }
#line 1161 "src/parse.y"
static $(list_t<$(list_t<designator_t,`H>,pat_t)@`H,`H>,bool)@`H yyget_YY14(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(list_t<$(list_t<designator_t,`H>,pat_t)@`H,`H>,bool)@`H";
  switch(yy1) {
  case &{.YY14 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY14($(list_t<$(list_t<designator_t,`H>,pat_t)@`H,`H>,bool)@`H yy1) { return YYSTYPE{.YY14 = yy1}; }
#line 1162 "src/parse.y"
static fndecl_t yyget_YY15(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "fndecl_t";
  switch(yy1) {
  case &{.YY15 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY15(fndecl_t yy1) { return YYSTYPE{.YY15 = yy1}; }
#line 1163 "src/parse.y"
static list_t<decl_t,`H> yyget_YY16(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<decl_t,`H>";
  switch(yy1) {
  case &{.YY16 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY16(list_t<decl_t,`H> yy1) { return YYSTYPE{.YY16 = yy1}; }
#line 1166 "src/parse.y"
static decl_spec_t yyget_YY17(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "decl_spec_t";
  switch(yy1) {
  case &{.YY17 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY17(decl_spec_t yy1) { return YYSTYPE{.YY17 = yy1}; }
#line 1167 "src/parse.y"
static $(declarator_t<`yy>,exp_opt_t) yyget_YY18(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(declarator_t<`yy>,exp_opt_t)";
  switch(yy1) {
  case &{.YY18 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY18($(declarator_t<`yy>,exp_opt_t) yy1) { return YYSTYPE{.YY18 = yy1}; }
#line 1168 "src/parse.y"
static declarator_list_t<`yy> yyget_YY19(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "declarator_list_t<`yy>";
  switch(yy1) {
  case &{.YY19 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY19(declarator_list_t<`yy> yy1) { return YYSTYPE{.YY19 = yy1}; }
#line 1169 "src/parse.y"
static storage_class_t@`H yyget_YY20(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "storage_class_t@`H";
  switch(yy1) {
  case &{.YY20 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY20(storage_class_t@`H yy1) { return YYSTYPE{.YY20 = yy1}; }
#line 1170 "src/parse.y"
static type_specifier_t yyget_YY21(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "type_specifier_t";
  switch(yy1) {
  case &{.YY21 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY21(type_specifier_t yy1) { return YYSTYPE{.YY21 = yy1}; }
#line 1172 "src/parse.y"
static aggr_kind_t yyget_YY22(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "aggr_kind_t";
  switch(yy1) {
  case &{.YY22 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY22(aggr_kind_t yy1) { return YYSTYPE{.YY22 = yy1}; }
#line 1173 "src/parse.y"
static tqual_t yyget_YY23(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "tqual_t";
  switch(yy1) {
  case &{.YY23 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY23(tqual_t yy1) { return YYSTYPE{.YY23 = yy1}; }
#line 1174 "src/parse.y"
static list_t<aggrfield_t,`H> yyget_YY24(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<aggrfield_t,`H>";
  switch(yy1) {
  case &{.YY24 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY24(list_t<aggrfield_t,`H> yy1) { return YYSTYPE{.YY24 = yy1}; }
#line 1175 "src/parse.y"
static list_t<list_t<aggrfield_t,`H>,`H> yyget_YY25(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<list_t<aggrfield_t,`H>,`H>";
  switch(yy1) {
  case &{.YY25 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY25(list_t<list_t<aggrfield_t,`H>,`H> yy1) { return YYSTYPE{.YY25 = yy1}; }
#line 1176 "src/parse.y"
static list_t<type_modifier_t<`yy>,`yy> yyget_YY26(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<type_modifier_t<`yy>,`yy>";
  switch(yy1) {
  case &{.YY26 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY26(list_t<type_modifier_t<`yy>,`yy> yy1) { return YYSTYPE{.YY26 = yy1}; }
#line 1177 "src/parse.y"
static declarator_t<`yy> yyget_YY27(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "declarator_t<`yy>";
  switch(yy1) {
  case &{.YY27 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY27(declarator_t<`yy> yy1) { return YYSTYPE{.YY27 = yy1}; }
#line 1178 "src/parse.y"
static $(declarator_t<`yy>,exp_opt_t,exp_opt_t)@`yy yyget_YY28(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(declarator_t<`yy>,exp_opt_t,exp_opt_t)@`yy";
  switch(yy1) {
  case &{.YY28 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY28($(declarator_t<`yy>,exp_opt_t,exp_opt_t)@`yy yy1) { return YYSTYPE{.YY28 = yy1}; }
#line 1179 "src/parse.y"
static list_t<$(declarator_t<`yy>,exp_opt_t,exp_opt_t)@`yy,`yy> yyget_YY29(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<$(declarator_t<`yy>,exp_opt_t,exp_opt_t)@`yy,`yy>";
  switch(yy1) {
  case &{.YY29 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY29(list_t<$(declarator_t<`yy>,exp_opt_t,exp_opt_t)@`yy,`yy> yy1) { return YYSTYPE{.YY29 = yy1}; }
#line 1180 "src/parse.y"
static abstractdeclarator_t<`yy> yyget_YY30(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "abstractdeclarator_t<`yy>";
  switch(yy1) {
  case &{.YY30 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY30(abstractdeclarator_t<`yy> yy1) { return YYSTYPE{.YY30 = yy1}; }
#line 1181 "src/parse.y"
static bool yyget_YY31(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "bool";
  switch(yy1) {
  case &{.YY31 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY31(bool yy1) { return YYSTYPE{.YY31 = yy1}; }
#line 1182 "src/parse.y"
static scope_t yyget_YY32(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "scope_t";
  switch(yy1) {
  case &{.YY32 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY32(scope_t yy1) { return YYSTYPE{.YY32 = yy1}; }
#line 1183 "src/parse.y"
static datatypefield_t yyget_YY33(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "datatypefield_t";
  switch(yy1) {
  case &{.YY33 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY33(datatypefield_t yy1) { return YYSTYPE{.YY33 = yy1}; }
#line 1184 "src/parse.y"
static list_t<datatypefield_t,`H> yyget_YY34(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<datatypefield_t,`H>";
  switch(yy1) {
  case &{.YY34 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY34(list_t<datatypefield_t,`H> yy1) { return YYSTYPE{.YY34 = yy1}; }
#line 1185 "src/parse.y"
static $(tqual_t,type_specifier_t,attributes_t) yyget_YY35(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(tqual_t,type_specifier_t,attributes_t)";
  switch(yy1) {
  case &{.YY35 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY35($(tqual_t,type_specifier_t,attributes_t) yy1) { return YYSTYPE{.YY35 = yy1}; }
#line 1186 "src/parse.y"
static list_t<var_t,`H> yyget_YY36(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<var_t,`H>";
  switch(yy1) {
  case &{.YY36 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY36(list_t<var_t,`H> yy1) { return YYSTYPE{.YY36 = yy1}; }
#line 1187 "src/parse.y"
static $(var_opt_t,tqual_t,type_t)@`H yyget_YY37(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(var_opt_t,tqual_t,type_t)@`H";
  switch(yy1) {
  case &{.YY37 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY37($(var_opt_t,tqual_t,type_t)@`H yy1) { return YYSTYPE{.YY37 = yy1}; }
#line 1188 "src/parse.y"
static list_t<$(var_opt_t,tqual_t,type_t)@`H,`H> yyget_YY38(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<$(var_opt_t,tqual_t,type_t)@`H,`H>";
  switch(yy1) {
  case &{.YY38 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY38(list_t<$(var_opt_t,tqual_t,type_t)@`H,`H> yy1) { return YYSTYPE{.YY38 = yy1}; }
#line 1189 "src/parse.y"
static $(list_t<$(var_opt_t,tqual_t,type_t)@`H,`H>, bool,vararg_info_t *`H,type_opt_t, list_t<$(type_t,type_t)@`H,`H>)@`H yyget_YY39(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(list_t<$(var_opt_t,tqual_t,type_t)@`H,`H>, bool,vararg_info_t *`H,type_opt_t, list_t<$(type_t,type_t)@`H,`H>)@`H";
  switch(yy1) {
  case &{.YY39 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY39($(list_t<$(var_opt_t,tqual_t,type_t)@`H,`H>, bool,vararg_info_t *`H,type_opt_t, list_t<$(type_t,type_t)@`H,`H>)@`H yy1) { return YYSTYPE{.YY39 = yy1}; }
#line 1190 "src/parse.y"
static types_t yyget_YY40(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "types_t";
  switch(yy1) {
  case &{.YY40 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY40(types_t yy1) { return YYSTYPE{.YY40 = yy1}; }
#line 1192 "src/parse.y"
static list_t<designator_t,`H> yyget_YY41(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<designator_t,`H>";
  switch(yy1) {
  case &{.YY41 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY41(list_t<designator_t,`H> yy1) { return YYSTYPE{.YY41 = yy1}; }
#line 1193 "src/parse.y"
static designator_t yyget_YY42(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "designator_t";
  switch(yy1) {
  case &{.YY42 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY42(designator_t yy1) { return YYSTYPE{.YY42 = yy1}; }
#line 1194 "src/parse.y"
static kind_t yyget_YY43(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "kind_t";
  switch(yy1) {
  case &{.YY43 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY43(kind_t yy1) { return YYSTYPE{.YY43 = yy1}; }
#line 1195 "src/parse.y"
static type_t yyget_YY44(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "type_t";
  switch(yy1) {
  case &{.YY44 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY44(type_t yy1) { return YYSTYPE{.YY44 = yy1}; }
#line 1196 "src/parse.y"
static list_t<attribute_t,`H> yyget_YY45(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<attribute_t,`H>";
  switch(yy1) {
  case &{.YY45 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY45(list_t<attribute_t,`H> yy1) { return YYSTYPE{.YY45 = yy1}; }
#line 1197 "src/parse.y"
static attribute_t yyget_YY46(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "attribute_t";
  switch(yy1) {
  case &{.YY46 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY46(attribute_t yy1) { return YYSTYPE{.YY46 = yy1}; }
#line 1198 "src/parse.y"
static enumfield_t yyget_YY47(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "enumfield_t";
  switch(yy1) {
  case &{.YY47 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY47(enumfield_t yy1) { return YYSTYPE{.YY47 = yy1}; }
#line 1199 "src/parse.y"
static list_t<enumfield_t,`H> yyget_YY48(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<enumfield_t,`H>";
  switch(yy1) {
  case &{.YY48 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY48(list_t<enumfield_t,`H> yy1) { return YYSTYPE{.YY48 = yy1}; }
#line 1200 "src/parse.y"
static type_opt_t yyget_YY49(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "type_opt_t";
  switch(yy1) {
  case &{.YY49 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY49(type_opt_t yy1) { return YYSTYPE{.YY49 = yy1}; }
#line 1201 "src/parse.y"
static list_t<$(type_t,type_t)@`H,`H> yyget_YY50(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<$(type_t,type_t)@`H,`H>";
  switch(yy1) {
  case &{.YY50 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY50(list_t<$(type_t,type_t)@`H,`H> yy1) { return YYSTYPE{.YY50 = yy1}; }
#line 1202 "src/parse.y"
static booltype_t yyget_YY51(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "booltype_t";
  switch(yy1) {
  case &{.YY51 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY51(booltype_t yy1) { return YYSTYPE{.YY51 = yy1}; }
#line 1203 "src/parse.y"
static list_t<$(Position::seg_t,qvar_t,bool)@`H,`H> yyget_YY52(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<$(Position::seg_t,qvar_t,bool)@`H,`H>";
  switch(yy1) {
  case &{.YY52 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY52(list_t<$(Position::seg_t,qvar_t,bool)@`H,`H> yy1) { return YYSTYPE{.YY52 = yy1}; }
#line 1204 "src/parse.y"
static $(list_t<$(Position::seg_t,qvar_t,bool)@`H,`H>, seg_t)@`H yyget_YY53(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(list_t<$(Position::seg_t,qvar_t,bool)@`H,`H>, seg_t)@`H";
  switch(yy1) {
  case &{.YY53 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY53($(list_t<$(Position::seg_t,qvar_t,bool)@`H,`H>, seg_t)@`H yy1) { return YYSTYPE{.YY53 = yy1}; }
#line 1205 "src/parse.y"
static list_t<qvar_t,`H> yyget_YY54(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<qvar_t,`H>";
  switch(yy1) {
  case &{.YY54 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY54(list_t<qvar_t,`H> yy1) { return YYSTYPE{.YY54 = yy1}; }
#line 1206 "src/parse.y"
static pointer_qual_t<`yy> yyget_YY55(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "pointer_qual_t<`yy>";
  switch(yy1) {
  case &{.YY55 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY55(pointer_qual_t<`yy> yy1) { return YYSTYPE{.YY55 = yy1}; }
#line 1207 "src/parse.y"
static pointer_quals_t<`yy> yyget_YY56(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "pointer_quals_t<`yy>";
  switch(yy1) {
  case &{.YY56 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY56(pointer_quals_t<`yy> yy1) { return YYSTYPE{.YY56 = yy1}; }
#line 1208 "src/parse.y"
static exp_opt_t yyget_YY57(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "exp_opt_t";
  switch(yy1) {
  case &{.YY57 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY57(exp_opt_t yy1) { return YYSTYPE{.YY57 = yy1}; }
#line 1209 "src/parse.y"
static raw_exp_t yyget_YY58(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "raw_exp_t";
  switch(yy1) {
  case &{.YY58 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY58(raw_exp_t yy1) { return YYSTYPE{.YY58 = yy1}; }
#line 1211 "src/parse.y"
static $(list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<string_t<`H>@`H, `H>)@`H yyget_YY59(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<string_t<`H>@`H, `H>)@`H";
  switch(yy1) {
  case &{.YY59 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY59($(list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<string_t<`H>@`H, `H>)@`H yy1) { return YYSTYPE{.YY59 = yy1}; }
#line 1212 "src/parse.y"
static $(list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<string_t<`H>@`H, `H>)@`H yyget_YY60(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<string_t<`H>@`H, `H>)@`H";
  switch(yy1) {
  case &{.YY60 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY60($(list_t<$(string_t<`H>, exp_t)@`H, `H>, list_t<string_t<`H>@`H, `H>)@`H yy1) { return YYSTYPE{.YY60 = yy1}; }
#line 1213 "src/parse.y"
static list_t<string_t<`H>@`H, `H> yyget_YY61(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<string_t<`H>@`H, `H>";
  switch(yy1) {
  case &{.YY61 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY61(list_t<string_t<`H>@`H, `H> yy1) { return YYSTYPE{.YY61 = yy1}; }
#line 1214 "src/parse.y"
static list_t<$(string_t<`H>, exp_t)@`H, `H> yyget_YY62(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<$(string_t<`H>, exp_t)@`H, `H>";
  switch(yy1) {
  case &{.YY62 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY62(list_t<$(string_t<`H>, exp_t)@`H, `H> yy1) { return YYSTYPE{.YY62 = yy1}; }
#line 1215 "src/parse.y"
static $(string_t<`H>, exp_t)@`H yyget_YY63(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "$(string_t<`H>, exp_t)@`H";
  switch(yy1) {
  case &{.YY63 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY63($(string_t<`H>, exp_t)@`H yy1) { return YYSTYPE{.YY63 = yy1}; }
#line 1217 "src/parse.y"
static throws_t yyget_YY64(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "throws_t";
  switch(yy1) {
  case &{.YY64 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY64(throws_t yy1) { return YYSTYPE{.YY64 = yy1}; }
#line 1218 "src/parse.y"
static reentrant_t yyget_YY65(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "reentrant_t";
  switch(yy1) {
  case &{.YY65 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY65(reentrant_t yy1) { return YYSTYPE{.YY65 = yy1}; }
#line 1219 "src/parse.y"
static list_t<type_t,`H> yyget_YY66(union YYSTYPE <`yy::R>@yy1 ) {
  static string_t s = "list_t<type_t,`H>";
  switch(yy1) {
  case &{.YY66 = yy}: return yy;
  default: if(beforedie != NULL) beforedie(); yythrowfail(s);
  } 
}
static union YYSTYPE <`yy::R> YY66(list_t<type_t,`H> yy1) { return YYSTYPE{.YY66 = yy1}; }
#define YYMAXRULELENGTH 12

#ifndef YYLTYPE
struct Yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
   };
typedef struct Yyltype yyltype;


#define YYLTYPE yyltype
YYLTYPE yynewloc() { 
  return Yyltype{0,0,0,0,0}; 
}
yyltype yylloc=Yyltype{0,0,0,0,0};
#endif



#define	YYFINAL		1214
#define	YYFLAG		-32768
#define	YYNTBASE	160

#define YYTRANSLATE(x) (((x)>0) && ((x) <= 387) ? yytranslate[x] : 330)

static short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   159,     2,     2,   145,   157,   154,     2,   141,
   142,   137,   151,   136,   155,   147,   156,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,   146,   133,   139,
   138,   140,   150,   143,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   148,     2,   149,   153,   144,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   134,   152,   135,   158,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132
};

#if YYDEBUG != 0
static short yyprhs[] = {     0,
     0,     2,     5,     9,    15,    19,    25,    34,    38,    42,
    46,    50,    51,    53,    55,    58,    60,    61,    66,    68,
    71,    75,    76,    78,    83,    87,    92,    94,    97,   101,
   102,   107,   109,   111,   113,   115,   116,   120,   125,   130,
   136,   140,   145,   148,   150,   153,   155,   158,   162,   168,
   172,   179,   183,   192,   198,   200,   203,   205,   208,   211,
   213,   216,   218,   221,   223,   226,   228,   231,   233,   235,
   237,   239,   242,   244,   246,   247,   249,   256,   258,   262,
   264,   266,   271,   280,   282,   285,   287,   289,   291,   293,
   295,   297,   299,   301,   303,   305,   307,   312,   314,   316,
   318,   320,   324,   329,   334,   336,   341,   343,   348,   350,
   352,   354,   356,   362,   365,   370,   372,   376,   378,   381,
   385,   390,   400,   409,   414,   418,   419,   423,   425,   427,
   428,   430,   432,   435,   437,   439,   443,   445,   449,   453,
   455,   458,   460,   463,   465,   468,   470,   473,   475,   478,
   480,   483,   485,   487,   491,   494,   497,   498,   502,   507,
   508,   512,   518,   520,   521,   526,   527,   532,   534,   536,
   537,   539,   540,   545,   546,   553,   557,   563,   565,   568,
   570,   573,   577,   581,   582,   584,   586,   589,   595,   597,
   600,   602,   605,   607,   611,   616,   621,   627,   638,   650,
   655,   660,   663,   665,   667,   671,   676,   681,   687,   698,
   710,   715,   720,   723,   725,   728,   734,   735,   738,   743,
   748,   750,   752,   754,   756,   758,   760,   763,   766,   768,
   769,   773,   774,   776,   778,   780,   784,   785,   787,   789,
   790,   793,   797,   803,   809,   817,   819,   823,   824,   827,
   828,   831,   835,   841,   842,   844,   846,   850,   853,   857,
   862,   864,   866,   870,   872,   876,   879,   881,   884,   886,
   888,   892,   894,   896,   899,   903,   908,   917,   926,   928,
   931,   935,   940,   943,   946,   948,   951,   955,   958,   960,
   963,   965,   968,   972,   977,   981,   983,   987,   989,   991,
   994,   998,  1002,  1007,  1012,  1018,  1029,  1039,  1051,  1062,
  1067,  1070,  1072,  1074,  1076,  1078,  1080,  1082,  1084,  1086,
  1096,  1103,  1109,  1118,  1124,  1128,  1130,  1133,  1136,  1140,
  1142,  1145,  1149,  1154,  1156,  1159,  1161,  1164,  1170,  1178,
  1186,  1192,  1201,  1208,  1209,  1214,  1219,  1225,  1232,  1240,
  1246,  1254,  1261,  1269,  1277,  1286,  1294,  1303,  1312,  1322,
  1329,  1337,  1345,  1354,  1358,  1361,  1364,  1367,  1371,  1374,
  1379,  1385,  1387,  1389,  1395,  1397,  1401,  1403,  1407,  1409,
  1413,  1415,  1419,  1421,  1425,  1427,  1431,  1435,  1437,  1441,
  1445,  1449,  1453,  1455,  1459,  1463,  1465,  1469,  1473,  1475,
  1479,  1483,  1487,  1489,  1494,  1496,  1499,  1502,  1507,  1510,
  1517,  1519,  1521,  1523,  1527,  1529,  1531,  1535,  1542,  1549,
  1554,  1559,  1565,  1570,  1573,  1576,  1579,  1584,  1589,  1594,
  1596,  1600,  1602,  1604,  1608,  1610,  1613,  1615,  1619,  1621,
  1623,  1627,  1629,  1633,  1635,  1639,  1643,  1645,  1647,  1649,
  1651,  1653,  1655,  1657,  1659,  1661,  1663,  1665,  1667,  1673,
  1676,  1679,  1682,  1688,  1694,  1696,  1698,  1702,  1704,  1708,
  1710,  1714,  1716,  1720,  1722,  1726,  1728,  1732,  1736,  1738,
  1742,  1746,  1750,  1754,  1756,  1760,  1764,  1766,  1770,  1774,
  1776,  1780,  1784,  1788,  1790,  1795,  1797,  1800,  1803,  1806,
  1809,  1812,  1815,  1820,  1823,  1830,  1835,  1842,  1849,  1859,
  1871,  1876,  1883,  1890,  1895,  1898,  1901,  1907,  1908,  1910,
  1911,  1914,  1918,  1920,  1924,  1925,  1928,  1932,  1934,  1938,
  1943,  1944,  1946,  1949,  1951,  1955,  1957,  1959,  1961,  1963,
  1968,  1972,  1977,  1981,  1985,  1988,  1991,  1997,  2004,  2012,
  2014,  2016,  2020,  2024,  2026,  2031,  2033,  2035,  2037,  2041,
  2044,  2050,  2055,  2061,  2067,  2069,  2071,  2075,  2077,  2079,
  2081,  2083,  2085,  2087,  2089,  2091,  2093,  2095,  2097,  2099,
  2101,  2103
};

static short yyrhs[] = {   161,
     0,   172,   161,     0,   176,   133,   161,     0,   176,   134,
   161,   177,   161,     0,   178,   133,   161,     0,   178,   134,
   161,   179,   161,     0,   164,   134,   161,   165,   171,   168,
   166,   161,     0,    68,   133,   161,     0,    69,   133,   161,
     0,   162,   133,   161,     0,   163,   133,   161,     0,     0,
    71,     0,    72,     0,     6,   122,     0,   135,     0,     0,
    48,   134,   167,   135,     0,   327,     0,   327,   133,     0,
   327,   136,   167,     0,     0,   169,     0,    46,   134,   170,
   135,     0,    46,   134,   135,     0,    46,   134,   137,   135,
     0,   327,     0,   327,   133,     0,   327,   136,   170,     0,
     0,    47,   134,   161,   135,     0,   174,     0,   180,     0,
     1,     0,   133,     0,     0,   221,   264,   173,     0,   182,
   221,   264,   173,     0,   221,   181,   264,   173,     0,   182,
   221,   181,   264,   173,     0,   182,   221,   264,     0,   182,
   221,   181,   264,     0,    53,   325,     0,   135,     0,    54,
   120,     0,   135,     0,   182,   133,     0,   182,   200,   133,
     0,    42,   286,   138,   292,   133,     0,    42,   246,   133,
     0,    65,   139,   127,   140,   120,   133,     0,    65,   120,
   133,     0,    65,   120,   138,   120,   141,   292,   142,   133,
     0,    65,   120,   143,   292,   133,     0,   180,     0,   181,
   180,     0,   183,     0,   183,   182,     0,    40,   182,     0,
   188,     0,   188,   182,     0,   191,     0,   191,   182,     0,
    24,     0,    24,   182,     0,   185,     0,   185,   182,     0,
     3,     0,     4,     0,     5,     0,     6,     0,     6,   122,
     0,     7,     0,    50,     0,     0,   185,     0,   131,   141,
   141,   186,   142,   142,     0,   187,     0,   187,   136,   186,
     0,   120,     0,    17,     0,   120,   141,   293,   142,     0,
   120,   141,   120,   136,   121,   136,   121,   142,     0,   189,
     0,   326,   196,     0,     8,     0,     9,     0,    10,     0,
    11,     0,    12,     0,    13,     0,    14,     0,    15,     0,
    16,     0,   192,     0,   195,     0,    38,   141,   292,   142,
     0,    39,     0,   216,     0,   236,     0,   144,     0,   144,
   119,   190,     0,   145,   141,   244,   142,     0,    63,   139,
   255,   329,     0,    63,     0,    64,   139,   255,   329,     0,
    64,     0,    75,   141,   292,   142,     0,   328,     0,    17,
     0,    18,     0,    19,     0,    37,   325,   134,   194,   135,
     0,    37,   325,     0,    37,   134,   194,   135,     0,   325,
     0,   325,   138,   296,     0,   193,     0,   193,   136,     0,
   193,   136,   194,     0,   197,   134,   198,   135,     0,    94,
   197,   327,   196,   134,   196,   238,   198,   135,     0,   197,
   327,   196,   134,   196,   238,   198,   135,     0,    94,   197,
   327,   196,     0,   197,   327,   196,     0,     0,   139,   256,
   329,     0,    20,     0,    21,     0,     0,   199,     0,   203,
     0,   199,   203,     0,   201,     0,   202,     0,   201,   136,
   202,     0,   221,     0,   221,   138,   248,     0,   204,   206,
   133,     0,   188,     0,   188,   205,     0,   191,     0,   191,
   204,     0,   185,     0,   185,   204,     0,   189,     0,   189,
   205,     0,   191,     0,   191,   205,     0,   185,     0,   185,
   205,     0,   207,     0,   208,     0,   207,   136,   208,     0,
   222,   209,     0,   146,   296,     0,     0,   222,   146,   296,
     0,    82,   141,   296,   142,     0,     0,   134,   256,   135,
     0,   210,   136,   134,   256,   135,     0,    90,     0,     0,
    85,   141,   210,   142,     0,     0,    86,   141,   218,   142,
     0,    87,     0,    88,     0,     0,    89,     0,     0,    83,
   141,   296,   142,     0,     0,   217,   325,   196,   134,   218,
   135,     0,   217,   325,   196,     0,   217,   325,   147,   325,
   196,     0,    55,     0,    95,    55,     0,   220,     0,   220,
   133,     0,   220,   136,   218,     0,   220,   133,   218,     0,
     0,     6,     0,     5,     0,   219,   325,     0,   219,   325,
   141,   244,   142,     0,   223,     0,   225,   223,     0,   224,
     0,   225,   224,     0,   325,     0,   141,   221,   142,     0,
   141,   185,   221,   142,     0,   223,   148,   149,   231,     0,
   223,   148,   293,   149,   231,     0,   223,   141,   235,   142,
   209,   215,   211,   212,   213,   214,     0,   223,   141,   237,
   238,   142,   209,   215,   211,   212,   213,   214,     0,   223,
   141,   246,   142,     0,   223,   139,   256,   329,     0,   223,
   185,     0,   325,     0,   326,     0,   141,   222,   142,     0,
   141,   185,   222,   142,     0,   224,   148,   149,   231,     0,
   224,   148,   293,   149,   231,     0,   224,   141,   235,   142,
   209,   215,   211,   212,   213,   214,     0,   224,   141,   237,
   238,   142,   209,   215,   211,   212,   213,   214,     0,   224,
   141,   246,   142,     0,   224,   139,   256,   329,     0,   224,
   185,     0,   226,     0,   226,   225,     0,   229,   227,   233,
   184,   234,     0,     0,   228,   227,     0,    77,   141,   293,
   142,     0,    91,   141,   232,   142,     0,    78,     0,    79,
     0,    93,     0,    92,     0,    80,     0,    81,     0,   137,
   230,     0,   143,   230,     0,   150,     0,     0,   134,   293,
   135,     0,     0,    93,     0,    92,     0,   236,     0,   236,
   151,   232,     0,     0,   232,     0,   144,     0,     0,   191,
   234,     0,   244,   237,   238,     0,   244,   136,   117,   237,
   238,     0,   117,   240,   245,   237,   238,     0,   244,   136,
   117,   240,   245,   237,   238,     0,   127,     0,   127,   119,
   190,     0,     0,   133,   241,     0,     0,   146,   239,     0,
   242,   140,   127,     0,   242,   140,   127,   136,   239,     0,
     0,   120,     0,   242,     0,   242,   151,   241,     0,   134,
   135,     0,   134,   243,   135,     0,    67,   141,   255,   142,
     0,   236,     0,   254,     0,   254,   136,   243,     0,   245,
     0,   244,   136,   245,     0,   204,   222,     0,   204,     0,
   204,   257,     0,   247,     0,   120,     0,   247,   136,   120,
     0,   293,     0,   249,     0,   134,   135,     0,   134,   250,
   135,     0,   134,   250,   136,   135,     0,   134,    32,   120,
   139,   292,   146,   292,   135,     0,   134,    32,   120,   139,
   292,   146,   254,   135,     0,   248,     0,   251,   248,     0,
   250,   136,   248,     0,   250,   136,   251,   248,     0,   252,
   138,     0,   328,   146,     0,   253,     0,   252,   253,     0,
   148,   296,   149,     0,   147,   328,     0,   204,     0,   204,
   257,     0,   254,     0,   134,   135,     0,   134,   243,   135,
     0,    67,   141,   255,   142,     0,   255,   151,   242,     0,
   255,     0,   256,   136,   255,     0,   225,     0,   258,     0,
   225,   258,     0,   141,   257,   142,     0,   148,   149,   231,
     0,   258,   148,   149,   231,     0,   148,   293,   149,   231,
     0,   258,   148,   293,   149,   231,     0,   141,   237,   238,
   142,   209,   215,   211,   212,   213,   214,     0,   141,   235,
   142,   209,   215,   211,   212,   213,   214,     0,   258,   141,
   237,   238,   142,   209,   215,   211,   212,   213,   214,     0,
   258,   141,   235,   142,   209,   215,   211,   212,   213,   214,
     0,   258,   139,   256,   329,     0,   258,   185,     0,   262,
     0,   263,     0,   264,     0,   266,     0,   268,     0,   261,
     0,   260,     0,   269,     0,    56,   141,   322,   142,   325,
   141,   322,   142,   133,     0,    56,   325,   141,   322,   142,
   133,     0,    56,   325,   141,   142,   133,     0,    56,   141,
   322,   142,   325,   141,   142,   133,     0,    52,   141,   322,
   142,   133,     0,   120,   146,   259,     0,   133,     0,   292,
   133,     0,   134,   135,     0,   134,   265,   135,     0,   180,
     0,   180,   265,     0,   120,   146,   180,     0,   120,   146,
   180,   265,     0,   259,     0,   259,   265,     0,   175,     0,
   175,   265,     0,    27,   141,   292,   142,   259,     0,    27,
   141,   292,   142,   259,    28,   259,     0,    29,   141,   292,
   142,   134,   267,   135,     0,    29,   325,   134,   267,   135,
     0,    29,   145,   141,   322,   142,   134,   267,   135,     0,
    44,   259,    45,   134,   267,   135,     0,     0,    23,   146,
   265,   267,     0,    22,   270,   146,   267,     0,    22,   270,
   146,   265,   267,     0,    22,   286,   105,   292,   146,   267,
     0,    22,   286,   105,   292,   146,   265,   267,     0,    30,
   141,   292,   142,   259,     0,    31,   259,    30,   141,   292,
   142,   133,     0,    32,   141,   133,   133,   142,   259,     0,
    32,   141,   133,   133,   292,   142,   259,     0,    32,   141,
   133,   292,   133,   142,   259,     0,    32,   141,   133,   292,
   133,   292,   142,   259,     0,    32,   141,   292,   133,   133,
   142,   259,     0,    32,   141,   292,   133,   133,   292,   142,
   259,     0,    32,   141,   292,   133,   292,   133,   142,   259,
     0,    32,   141,   292,   133,   292,   133,   292,   142,   259,
     0,    32,   141,   180,   133,   142,   259,     0,    32,   141,
   180,   292,   133,   142,   259,     0,    32,   141,   180,   133,
   292,   142,   259,     0,    32,   141,   180,   292,   133,   292,
   142,   259,     0,    33,   120,   133,     0,    34,   133,     0,
    35,   133,     0,    36,   133,     0,    36,   292,   133,     0,
    51,   133,     0,    51,   141,   142,   133,     0,    51,   141,
   322,   142,   133,     0,   271,     0,   272,     0,   272,   150,
   292,   146,   295,     0,   273,     0,   272,   106,   298,     0,
   274,     0,   274,   105,   299,     0,   275,     0,   275,   152,
   300,     0,   276,     0,   276,   153,   300,     0,   277,     0,
   276,   154,   302,     0,   278,     0,   277,   103,   303,     0,
   277,   104,   303,     0,   279,     0,   278,   139,   304,     0,
   278,   140,   304,     0,   278,   101,   304,     0,   278,   102,
   304,     0,   280,     0,   279,    99,   305,     0,   279,   100,
   305,     0,   281,     0,   280,   151,   306,     0,   280,   155,
   306,     0,   282,     0,   281,   137,   307,     0,   281,   156,
   307,     0,   281,   157,   307,     0,   283,     0,   141,   254,
   142,   307,     0,   284,     0,   151,   307,     0,   318,   307,
     0,    25,   141,   254,   142,     0,    25,   308,     0,    26,
   141,   254,   136,   320,   142,     0,   285,     0,   286,     0,
   144,     0,   141,   292,   142,     0,   324,     0,   325,     0,
   120,   120,   286,     0,   120,   139,   127,   140,   254,   120,
     0,   128,   139,   127,   140,   254,   120,     0,   145,   141,
   287,   142,     0,   325,   141,   287,   142,     0,   325,   134,
   196,   290,   135,     0,   134,   196,   290,   135,     0,   154,
   286,     0,   105,   286,     0,   137,   120,     0,   137,   120,
   120,   286,     0,   120,   139,   127,   140,     0,   120,   139,
   144,   140,     0,   288,     0,   288,   136,   117,     0,   117,
     0,   286,     0,   288,   136,   286,     0,   286,     0,   251,
   286,     0,   291,     0,   291,   136,   117,     0,   117,     0,
   289,     0,   291,   136,   289,     0,   293,     0,   292,   136,
   293,     0,   295,     0,   308,   294,   293,     0,   308,    62,
   293,     0,   138,     0,   107,     0,   108,     0,   109,     0,
   110,     0,   111,     0,   112,     0,   113,     0,   114,     0,
   115,     0,   116,     0,   297,     0,   297,   150,   292,   146,
   295,     0,    43,   295,     0,    49,   249,     0,    49,   297,
     0,    66,   141,   292,   142,   249,     0,    66,   141,   292,
   142,   297,     0,   295,     0,   298,     0,   297,   106,   298,
     0,   299,     0,   298,   105,   299,     0,   300,     0,   299,
   152,   300,     0,   301,     0,   300,   153,   301,     0,   302,
     0,   301,   154,   302,     0,   303,     0,   302,   103,   303,
     0,   302,   104,   303,     0,   304,     0,   303,   139,   304,
     0,   303,   140,   304,     0,   303,   101,   304,     0,   303,
   102,   304,     0,   305,     0,   304,    99,   305,     0,   304,
   100,   305,     0,   306,     0,   305,   151,   306,     0,   305,
   155,   306,     0,   307,     0,   306,   137,   307,     0,   306,
   156,   307,     0,   306,   157,   307,     0,   308,     0,   141,
   254,   142,   307,     0,   319,     0,    97,   308,     0,    98,
   308,     0,   154,   307,     0,   137,   307,     0,   151,   307,
     0,   318,   307,     0,    25,   141,   254,   142,     0,    25,
   308,     0,    26,   141,   254,   136,   320,   142,     0,    57,
   141,   293,   142,     0,    58,   141,   293,   136,   293,   142,
     0,    59,   141,   293,   136,   293,   142,     0,    60,   141,
   293,   136,    25,   141,   254,   142,   142,     0,    61,   141,
   293,   136,   293,   136,    25,   141,   254,   142,   142,     0,
    73,   141,   293,   142,     0,    76,   141,   319,   147,   328,
   142,     0,    76,   141,   319,    96,   328,   142,     0,    74,
   141,   254,   142,     0,   132,   309,     0,    40,   308,     0,
   310,   141,   122,   311,   142,     0,     0,    18,     0,     0,
   146,   313,     0,   146,   312,   313,     0,   315,     0,   312,
   136,   315,     0,     0,   146,   316,     0,   146,   314,   316,
     0,   315,     0,   314,   136,   315,     0,   122,   141,   292,
   142,     0,     0,   146,     0,   146,   317,     0,   122,     0,
   317,   136,   122,     0,   158,     0,   159,     0,   155,     0,
   321,     0,   319,   148,   292,   149,     0,   319,   141,   142,
     0,   319,   141,   322,   142,     0,   319,   147,   328,     0,
   319,    96,   328,     0,   319,    97,     0,   319,    98,     0,
   141,   254,   142,   134,   135,     0,   141,   254,   142,   134,
   250,   135,     0,   141,   254,   142,   134,   250,   136,   135,
     0,   328,     0,   121,     0,   320,   147,   328,     0,   320,
   147,   121,     0,   325,     0,    70,   141,   120,   142,     0,
   324,     0,   122,     0,   123,     0,   141,   292,   142,     0,
   321,   118,     0,   321,   143,   139,   256,   329,     0,   145,
   141,   322,   142,     0,   325,   134,   196,   250,   135,     0,
   141,   134,   265,   135,   142,     0,   323,     0,   293,     0,
   323,   136,   293,     0,   121,     0,   124,     0,   125,     0,
   126,     0,    41,     0,   120,     0,   129,     0,   128,     0,
   130,     0,   325,     0,   326,     0,   120,     0,   128,     0,
   140,     0,   100,     0
};

#endif

#if YYDEBUG != 0
static short yyrline[] = { 0,
  1224,  1230,  1235,  1239,  1242,  1246,  1248,  1272,  1274,  1276,
  1278,  1280,  1283,  1288,  1293,  1308,  1312,  1314,  1317,  1319,
  1320,  1324,  1326,  1329,  1331,  1332,  1335,  1337,  1338,  1342,
  1344,  1347,  1351,  1352,  1355,  1357,  1359,  1362,  1376,  1378,
  1385,  1389,  1394,  1397,  1400,  1403,  1408,  1412,  1416,  1418,
  1431,  1444,  1457,  1480,  1498,  1501,  1506,  1510,  1519,  1523,
  1526,  1533,  1535,  1541,  1544,  1549,  1552,  1559,  1562,  1564,
  1566,  1568,  1574,  1577,  1582,  1584,  1587,  1592,  1594,  1597,
  1599,  1600,  1602,  1681,  1684,  1688,  1690,  1691,  1692,  1693,
  1694,  1695,  1696,  1697,  1698,  1699,  1701,  1703,  1706,  1708,
  1710,  1711,  1713,  1717,  1719,  1722,  1724,  1726,  1732,  1736,
  1739,  1740,  1744,  1750,  1752,  1757,  1760,  1764,  1766,  1767,
  1771,  1775,  1786,  1797,  1801,  1805,  1808,  1812,  1814,  1817,
  1820,  1833,  1836,  1840,  1845,  1848,  1852,  1855,  1859,  1887,
  1890,  1892,  1894,  1897,  1899,  1904,  1907,  1909,  1911,  1914,
  1916,  1920,  1925,  1928,  1932,  1935,  1940,  1945,  1949,  1951,
  1955,  1960,  1967,  1972,  1975,  1980,  1984,  1989,  1993,  1997,
  2000,  2005,  2008,  2010,  2014,  2022,  2026,  2032,  2034,  2037,
  2039,  2040,  2041,  2044,  2046,  2047,  2049,  2052,  2057,  2061,
  2069,  2072,  2077,  2082,  2086,  2091,  2093,  2096,  2108,  2126,
  2130,  2134,  2141,  2144,  2146,  2150,  2155,  2159,  2164,  2183,
  2201,  2205,  2210,  2217,  2219,  2221,  2240,  2242,  2245,  2248,
  2250,  2252,  2254,  2256,  2258,  2260,  2264,  2273,  2277,  2282,
  2284,  2286,  2288,  2289,  2299,  2301,  2304,  2306,  2316,  2319,
  2321,  2324,  2327,  2329,  2335,  2344,  2346,  2348,  2350,  2353,
  2355,  2358,  2368,  2377,  2380,  2387,  2389,  2392,  2394,  2395,
  2397,  2416,  2419,  2424,  2427,  2432,  2448,  2456,  2471,  2475,
  2478,  2482,  2484,  2487,  2490,  2492,  2494,  2501,  2509,  2512,
  2514,  2516,  2520,  2522,  2526,  2528,  2531,  2533,  2536,  2544,
  2558,  2560,  2561,  2562,  2563,  2568,  2570,  2573,  2576,  2578,
  2582,  2585,  2587,  2589,  2591,  2595,  2609,  2622,  2637,  2654,
  2659,  2665,  2667,  2668,  2669,  2670,  2671,  2672,  2673,  2676,
  2685,  2691,  2697,  2704,  2712,  2717,  2719,  2723,  2725,  2729,
  2731,  2732,  2734,  2736,  2737,  2738,  2740,  2744,  2747,  2753,
  2756,  2760,  2766,  2779,  2782,  2788,  2792,  2794,  2798,  2804,
  2809,  2813,  2816,  2819,  2822,  2825,  2828,  2831,  2834,  2837,
  2843,  2849,  2855,  2865,  2867,  2868,  2869,  2870,  2872,  2873,
  2874,  2883,  2886,  2888,  2891,  2893,  2896,  2898,  2901,  2903,
  2906,  2908,  2911,  2913,  2916,  2918,  2920,  2923,  2925,  2927,
  2929,  2931,  2934,  2936,  2938,  2941,  2943,  2945,  2948,  2950,
  2952,  2954,  2957,  2959,  2965,  2969,  2970,  2972,  2976,  2978,
  2983,  2991,  2995,  2998,  3000,  3024,  3026,  3032,  3041,  3050,
  3054,  3058,  3065,  3071,  3073,  3075,  3080,  3087,  3093,  3101,
  3103,  3104,  3107,  3110,  3114,  3117,  3120,  3122,  3123,  3126,
  3129,  3134,  3137,  3141,  3144,  3146,  3150,  3152,  3153,  3154,
  3155,  3156,  3157,  3158,  3159,  3160,  3161,  3164,  3167,  3170,
  3173,  3175,  3177,  3179,  3183,  3186,  3189,  3192,  3195,  3198,
  3201,  3204,  3207,  3210,  3213,  3216,  3219,  3221,  3224,  3227,
  3229,  3231,  3233,  3236,  3239,  3241,  3244,  3247,  3249,  3252,
  3255,  3257,  3259,  3262,  3265,  3271,  3273,  3274,  3275,  3276,
  3277,  3278,  3279,  3283,  3284,  3289,  3292,  3295,  3298,  3302,
  3307,  3309,  3311,  3313,  3316,  3318,  3321,  3327,  3329,  3332,
  3334,  3337,  3342,  3344,  3347,  3349,  3351,  3355,  3357,  3360,
  3367,  3369,  3370,  3373,  3375,  3378,  3380,  3381,  3384,  3387,
  3389,  3391,  3393,  3395,  3397,  3399,  3401,  3403,  3405,  3409,
  3413,  3415,  3418,  3422,  3426,  3428,  3430,  3432,  3434,  3439,
  3441,  3444,  3447,  3450,  3454,  3459,  3462,  3468,  3470,  3471,
  3472,  3484,  3487,  3489,  3491,  3493,  3497,  3499,  3501,  3503,
  3506,  3508
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static string_t yytname[] = {   "$","error","$undefined.","AUTO","REGISTER",
"STATIC","EXTERN","TYPEDEF","VOID","CHAR","SHORT","INT","LONG","FLOAT","DOUBLE",
"SIGNED","UNSIGNED","CONST","VOLATILE","RESTRICT","STRUCT","UNION","CASE","DEFAULT",
"INLINE","SIZEOF","OFFSETOF","IF","ELSE","SWITCH","WHILE","DO","FOR","GOTO",
"CONTINUE","BREAK","RETURN","ENUM","TYPEOF","BUILTIN_VA_LIST","EXTENSION","NULL_kw",
"LET","THROW","TRY","CATCH","EXPORT","OVERRIDE","HIDE","NEW","ABSTRACT","FALLTHRU",
"CAP","USING","NAMESPACE","DATATYPE","SPAWN","MALLOC","RMALLOC","RMALLOC_INLINE",
"CALLOC","RCALLOC","SWAP","REGION_T","TAG_T","REGION","RNEW","REGIONS","PORTON",
"PORTOFF","PRAGMA","TEMPESTON","TEMPESTOFF","NUMELTS","VALUEOF","VALUEOF_T",
"TAGCHECK","NUMELTS_QUAL","THIN_QUAL","FAT_QUAL","NOTNULL_QUAL","NULLABLE_QUAL",
"REQUIRES_QUAL","ENSURES_QUAL","IEFFECT_QUAL","OEFFECT_QUAL","THROWS_QUAL","NOTHROW_QUAL",
"THROWSANY_QUAL","REENTRANT_QUAL","XRGN_QUAL","REGION_QUAL","NOZEROTERM_QUAL",
"ZEROTERM_QUAL","TAGGED_QUAL","EXTENSIBLE_QUAL","PTR_OP","INC_OP","DEC_OP","LEFT_OP",
"RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP","MUL_ASSIGN","DIV_ASSIGN",
"MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN","RIGHT_ASSIGN","AND_ASSIGN",
"XOR_ASSIGN","OR_ASSIGN","ELLIPSIS","LEFT_RIGHT","COLON_COLON","IDENTIFIER",
"INTEGER_CONSTANT","STRING","WSTRING","CHARACTER_CONSTANT","WCHARACTER_CONSTANT",
"FLOATING_CONSTANT","TYPE_VAR","TYPEDEF_NAME","QUAL_IDENTIFIER","QUAL_TYPEDEF_NAME",
"ATTRIBUTE","ASM_TOK","';'","'{'","'}'","','","'*'","'='","'<'","'>'","'('",
"')'","'@'","'_'","'$'","':'","'.'","'['","']'","'?'","'+'","'|'","'^'","'&'",
"'-'","'/'","'%'","'~'","'!'","prog","translation_unit","tempest_on_action",
"tempest_off_action","extern_c_action","end_extern_c","hide_list_opt","hide_list_values",
"export_list_opt","export_list","export_list_values","override_opt","external_declaration",
"optional_comma","function_definition","function_definition2","using_action",
"unusing_action","namespace_action","unnamespace_action","declaration","declaration_list",
"declaration_specifiers","storage_class_specifier","attributes_opt","attributes",
"attribute_list","attribute","type_specifier","type_specifier_notypedef","kind",
"type_qualifier","enum_specifier","enum_field","enum_declaration_list","struct_or_union_specifier",
"type_params_opt","struct_or_union","struct_declaration_list","struct_declaration_list0",
"init_declarator_list","init_declarator_list0","init_declarator","struct_declaration",
"specifier_qualifier_list","notypedef_specifier_qualifier_list","struct_declarator_list",
"struct_declarator_list0","struct_declarator","requires_clause_opt","eff_list",
"ieffect_clause_opt","oeffect_clause_opt","throws_clause_opt","reentrant_clause_opt",
"ensures_clause_opt","datatype_specifier","qual_datatype","datatypefield_list",
"datatypefield_scope","datatypefield","declarator","declarator_withtypedef",
"direct_declarator","direct_declarator_withtypedef","pointer","one_pointer",
"pointer_quals","pointer_qual","pointer_null_and_bound","pointer_bound","zeroterm_qual_opt",
"eff_set","eff_opt","tqual_list","parameter_type_list","type_var","optional_effect",
"optional_rgn_order","rgn_order","optional_inject","effect_set","atomic_effect",
"region_set","parameter_list","parameter_declaration","identifier_list","identifier_list0",
"initializer","array_initializer","initializer_list","designation","designator_list",
"designator","type_name","any_type_name","type_name_list","abstract_declarator",
"direct_abstract_declarator","statement","spawn_statement","cap_statement","labeled_statement",
"expression_statement","compound_statement","block_item_list","selection_statement",
"switch_clauses","iteration_statement","jump_statement","exp_pattern","conditional_pattern",
"logical_or_pattern","logical_and_pattern","inclusive_or_pattern","exclusive_or_pattern",
"and_pattern","equality_pattern","relational_pattern","shift_pattern","additive_pattern",
"multiplicative_pattern","cast_pattern","unary_pattern","postfix_pattern","primary_pattern",
"pattern","tuple_pattern_list","tuple_pattern_list0","field_pattern","field_pattern_list",
"field_pattern_list0","expression","assignment_expression","assignment_operator",
"conditional_expression","constant_expression","logical_or_expression","logical_and_expression",
"inclusive_or_expression","exclusive_or_expression","and_expression","equality_expression",
"relational_expression","shift_expression","additive_expression","multiplicative_expression",
"cast_expression","unary_expression","asm_expr","volatile_opt","asm_out_opt",
"asm_outlist","asm_in_opt","asm_inlist","asm_io_elt","asm_clobber_opt","asm_clobber_list",
"unary_operator","postfix_expression","field_expression","primary_expression",
"argument_expression_list","argument_expression_list0","constant","qual_opt_identifier",
"qual_opt_typedef","struct_union_name","field_name","right_angle"
};
#endif

static short yyr1[] = {     0,
   160,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   162,   163,   164,   165,   166,   166,   167,   167,
   167,   168,   168,   169,   169,   169,   170,   170,   170,   171,
   171,   172,   172,   172,   173,   173,   174,   174,   174,   174,
   175,   175,   176,   177,   178,   179,   180,   180,   180,   180,
   180,   180,   180,   180,   181,   181,   182,   182,   182,   182,
   182,   182,   182,   182,   182,   182,   182,   183,   183,   183,
   183,   183,   183,   183,   184,   184,   185,   186,   186,   187,
   187,   187,   187,   188,   188,   189,   189,   189,   189,   189,
   189,   189,   189,   189,   189,   189,   189,   189,   189,   189,
   189,   189,   189,   189,   189,   189,   189,   189,   190,   191,
   191,   191,   192,   192,   192,   193,   193,   194,   194,   194,
   195,   195,   195,   195,   195,   196,   196,   197,   197,   198,
   198,   199,   199,   200,   201,   201,   202,   202,   203,   204,
   204,   204,   204,   204,   204,   205,   205,   205,   205,   205,
   205,   206,   207,   207,   208,   208,   208,   208,   209,   209,
   210,   210,   211,   211,   212,   212,   213,   213,   213,   213,
   214,   214,   215,   215,   216,   216,   216,   217,   217,   218,
   218,   218,   218,   219,   219,   219,   220,   220,   221,   221,
   222,   222,   223,   223,   223,   223,   223,   223,   223,   223,
   223,   223,   224,   224,   224,   224,   224,   224,   224,   224,
   224,   224,   224,   225,   225,   226,   227,   227,   228,   228,
   228,   228,   228,   228,   228,   228,   229,   229,   229,   230,
   230,   231,   231,   231,   232,   232,   233,   233,   233,   234,
   234,   235,   235,   235,   235,   236,   236,   237,   237,   238,
   238,   239,   239,   240,   240,   241,   241,   242,   242,   242,
   242,   243,   243,   244,   244,   245,   245,   245,   246,   247,
   247,   248,   248,   249,   249,   249,   249,   249,   250,   250,
   250,   250,   251,   251,   252,   252,   253,   253,   254,   254,
   255,   255,   255,   255,   255,   256,   256,   257,   257,   257,
   258,   258,   258,   258,   258,   258,   258,   258,   258,   258,
   258,   259,   259,   259,   259,   259,   259,   259,   259,   260,
   260,   260,   260,   261,   262,   263,   263,   264,   264,   265,
   265,   265,   265,   265,   265,   265,   265,   266,   266,   266,
   266,   266,   266,   267,   267,   267,   267,   267,   267,   268,
   268,   268,   268,   268,   268,   268,   268,   268,   268,   268,
   268,   268,   268,   269,   269,   269,   269,   269,   269,   269,
   269,   270,   271,   271,   272,   272,   273,   273,   274,   274,
   275,   275,   276,   276,   277,   277,   277,   278,   278,   278,
   278,   278,   279,   279,   279,   280,   280,   280,   281,   281,
   281,   281,   282,   282,   283,   283,   283,   283,   283,   283,
   284,   285,   286,   286,   286,   286,   286,   286,   286,   286,
   286,   286,   286,   286,   286,   286,   286,   286,   286,   287,
   287,   287,   288,   288,   289,   289,   290,   290,   290,   291,
   291,   292,   292,   293,   293,   293,   294,   294,   294,   294,
   294,   294,   294,   294,   294,   294,   294,   295,   295,   295,
   295,   295,   295,   295,   296,   297,   297,   298,   298,   299,
   299,   300,   300,   301,   301,   302,   302,   302,   303,   303,
   303,   303,   303,   304,   304,   304,   305,   305,   305,   306,
   306,   306,   306,   307,   307,   308,   308,   308,   308,   308,
   308,   308,   308,   308,   308,   308,   308,   308,   308,   308,
   308,   308,   308,   308,   308,   308,   309,   310,   310,   311,
   311,   311,   312,   312,   313,   313,   313,   314,   314,   315,
   316,   316,   316,   317,   317,   318,   318,   318,   319,   319,
   319,   319,   319,   319,   319,   319,   319,   319,   319,   320,
   320,   320,   320,   321,   321,   321,   321,   321,   321,   321,
   321,   321,   321,   321,   322,   323,   323,   324,   324,   324,
   324,   324,   325,   325,   326,   326,   327,   327,   328,   328,
   329,   329
};

static short yyr2[] = {     0,
     1,     2,     3,     5,     3,     5,     8,     3,     3,     3,
     3,     0,     1,     1,     2,     1,     0,     4,     1,     2,
     3,     0,     1,     4,     3,     4,     1,     2,     3,     0,
     4,     1,     1,     1,     1,     0,     3,     4,     4,     5,
     3,     4,     2,     1,     2,     1,     2,     3,     5,     3,
     6,     3,     8,     5,     1,     2,     1,     2,     2,     1,
     2,     1,     2,     1,     2,     1,     2,     1,     1,     1,
     1,     2,     1,     1,     0,     1,     6,     1,     3,     1,
     1,     4,     8,     1,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     4,     1,     1,     1,
     1,     3,     4,     4,     1,     4,     1,     4,     1,     1,
     1,     1,     5,     2,     4,     1,     3,     1,     2,     3,
     4,     9,     8,     4,     3,     0,     3,     1,     1,     0,
     1,     1,     2,     1,     1,     3,     1,     3,     3,     1,
     2,     1,     2,     1,     2,     1,     2,     1,     2,     1,
     2,     1,     1,     3,     2,     2,     0,     3,     4,     0,
     3,     5,     1,     0,     4,     0,     4,     1,     1,     0,
     1,     0,     4,     0,     6,     3,     5,     1,     2,     1,
     2,     3,     3,     0,     1,     1,     2,     5,     1,     2,
     1,     2,     1,     3,     4,     4,     5,    10,    11,     4,
     4,     2,     1,     1,     3,     4,     4,     5,    10,    11,
     4,     4,     2,     1,     2,     5,     0,     2,     4,     4,
     1,     1,     1,     1,     1,     1,     2,     2,     1,     0,
     3,     0,     1,     1,     1,     3,     0,     1,     1,     0,
     2,     3,     5,     5,     7,     1,     3,     0,     2,     0,
     2,     3,     5,     0,     1,     1,     3,     2,     3,     4,
     1,     1,     3,     1,     3,     2,     1,     2,     1,     1,
     3,     1,     1,     2,     3,     4,     8,     8,     1,     2,
     3,     4,     2,     2,     1,     2,     3,     2,     1,     2,
     1,     2,     3,     4,     3,     1,     3,     1,     1,     2,
     3,     3,     4,     4,     5,    10,     9,    11,    10,     4,
     2,     1,     1,     1,     1,     1,     1,     1,     1,     9,
     6,     5,     8,     5,     3,     1,     2,     2,     3,     1,
     2,     3,     4,     1,     2,     1,     2,     5,     7,     7,
     5,     8,     6,     0,     4,     4,     5,     6,     7,     5,
     7,     6,     7,     7,     8,     7,     8,     8,     9,     6,
     7,     7,     8,     3,     2,     2,     2,     3,     2,     4,
     5,     1,     1,     5,     1,     3,     1,     3,     1,     3,
     1,     3,     1,     3,     1,     3,     3,     1,     3,     3,
     3,     3,     1,     3,     3,     1,     3,     3,     1,     3,
     3,     3,     1,     4,     1,     2,     2,     4,     2,     6,
     1,     1,     1,     3,     1,     1,     3,     6,     6,     4,
     4,     5,     4,     2,     2,     2,     4,     4,     4,     1,
     3,     1,     1,     3,     1,     2,     1,     3,     1,     1,
     3,     1,     3,     1,     3,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     5,     2,
     2,     2,     5,     5,     1,     1,     3,     1,     3,     1,
     3,     1,     3,     1,     3,     1,     3,     3,     1,     3,
     3,     3,     3,     1,     3,     3,     1,     3,     3,     1,
     3,     3,     3,     1,     4,     1,     2,     2,     2,     2,
     2,     2,     4,     2,     6,     4,     6,     6,     9,    11,
     4,     6,     6,     4,     2,     2,     5,     0,     1,     0,
     2,     3,     1,     3,     0,     2,     3,     1,     3,     4,
     0,     1,     2,     1,     3,     1,     1,     1,     1,     4,
     3,     4,     3,     3,     2,     2,     5,     6,     7,     1,
     1,     3,     3,     1,     4,     1,     1,     1,     3,     2,
     5,     4,     5,     5,     1,     1,     3,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1
};

static short yydefact[] = {     0,
    34,    68,    69,    70,    71,    73,    86,    87,    88,    89,
    90,    91,    92,    93,    94,   110,   111,   112,   128,   129,
    64,     0,     0,    98,     0,     0,    74,     0,     0,   178,
   105,   107,     0,     0,     0,    13,    14,     0,     0,     0,
   573,   246,   575,   574,   576,     0,   230,     0,   230,   101,
     0,   229,     1,     0,     0,     0,     0,    32,     0,     0,
    33,     0,    57,    66,    60,    84,    62,    95,    96,     0,
    99,     0,     0,   189,     0,   214,   217,   100,   193,   126,
    72,    71,    65,     0,   114,     0,    59,   572,     0,   573,
   568,   569,   570,   571,     0,   126,     0,     0,   413,     0,
     0,     0,   269,     0,   415,   416,    43,    45,     0,     0,
     0,     0,     0,     0,     0,     0,   179,     0,     0,     0,
   227,     0,     0,   228,     0,     0,     0,     0,     0,     2,
     0,     0,     0,     0,    47,     0,   134,   135,   137,    58,
    67,    61,    63,   130,   577,   578,   126,   126,     0,    55,
     0,     0,    36,     0,   248,     0,   202,   190,   215,     0,
   221,   222,   225,   226,     0,   224,   223,   237,   217,     0,
    85,    72,   118,     0,   116,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   557,   558,   518,     0,     0,     0,     0,
     0,   538,   536,   537,     0,   442,   444,   458,   466,   468,
   470,   472,   474,   476,   479,   484,   487,   490,   494,     0,
   496,   539,   556,   554,   573,   425,     0,     0,     0,     0,
   426,     0,     0,   424,    50,     0,     0,   126,     0,     0,
     0,   144,   140,   142,   289,   291,     0,     0,    52,     0,
     0,     0,     8,     9,     0,   126,   579,   580,   247,   109,
     0,     0,     0,   194,   102,   267,     0,   264,    10,    11,
     0,     3,     0,     5,     0,    48,     0,     0,     0,    36,
     0,   131,   132,   157,   125,     0,   176,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   573,   326,   328,     0,   336,   330,     0,   334,   318,
   317,   312,   313,   314,     0,   315,   316,   319,     0,    56,
    36,   137,    35,    37,   296,     0,   254,   270,     0,     0,
   250,   248,     0,   232,     0,     0,     0,   239,   238,    75,
   235,   218,     0,   119,   115,     0,     0,     0,   504,     0,
     0,   516,   460,   494,     0,   461,   462,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   497,   498,   519,
   515,     0,   500,     0,     0,     0,     0,   501,   499,     0,
    97,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   448,   449,   450,   451,   452,   453,   454,   455,   456,
   457,   447,     0,   502,     0,   545,   546,     0,     0,     0,
   560,     0,   126,   417,     0,     0,     0,   439,   573,   580,
     0,     0,     0,     0,   285,   435,   440,     0,   437,     0,
     0,   414,   432,   433,     0,   430,   271,     0,     0,     0,
     0,   292,     0,   262,   145,   150,   146,   148,   141,   143,
   248,     0,   298,   290,   299,   582,   581,     0,   104,   106,
     0,     0,     0,   108,   124,    81,    80,     0,    78,   231,
   195,   248,   266,   191,   298,   268,   203,   204,     0,   103,
    16,    30,    44,     0,    46,     0,   136,   138,   273,   272,
    36,    38,   121,   133,     0,     0,     0,   152,   153,   160,
     0,   126,   126,   184,     0,     0,     0,     0,     0,   573,
     0,     0,     0,   365,   366,   367,     0,     0,   369,     0,
     0,     0,     0,     0,     0,   337,   331,   137,   335,   329,
   327,    39,     0,   201,   255,     0,     0,     0,   261,   249,
   256,   160,     0,     0,     0,   250,   200,   234,   233,   196,
   232,     0,     0,   240,    76,     0,   127,   120,   465,   117,
   113,     0,     0,     0,     0,   573,   274,   279,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   559,   566,     0,   565,   443,   467,     0,
   469,   471,   473,   475,   477,   478,   482,   483,   480,   481,
   485,   486,   488,   489,   491,   492,   493,   446,   445,   544,
   541,     0,   543,     0,     0,     0,   428,   429,     0,   288,
     0,   436,   283,   286,   423,     0,   284,   427,   420,     0,
    49,     0,   421,     0,   293,     0,   151,   147,   149,     0,
   250,     0,   232,     0,   300,     0,   248,     0,   311,   295,
     0,    54,     0,   126,     0,     0,     0,   144,     0,   126,
     0,   248,     0,   213,   192,   265,     0,    22,     4,     6,
    40,     0,   156,   139,   157,     0,     0,   155,   250,   177,
   186,   185,     0,     0,   180,     0,     0,     0,   344,     0,
     0,     0,     0,     0,     0,   364,   368,     0,     0,     0,
     0,     0,     0,   332,   325,     0,    41,   297,   248,     0,
   258,     0,     0,   174,   251,     0,   160,   254,   242,   197,
   219,   220,   240,   216,   236,   503,     0,     0,     0,   275,
     0,   280,   506,     0,     0,     0,     0,     0,   555,   511,
   514,     0,     0,   520,     0,     0,   495,   562,     0,     0,
   542,   540,     0,     0,     0,     0,   287,   438,   441,   431,
   434,   422,   294,   263,   160,     0,   301,   302,   232,     0,
     0,   250,   232,     0,     0,    51,   250,   573,     0,    77,
    79,     0,   205,     0,     0,   250,     0,   232,     0,     0,
     0,    17,    23,   154,     0,   158,   130,   175,   187,   181,
   184,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   344,   370,     0,     0,     0,     0,
     0,   333,    42,   250,     0,   259,   257,     0,   164,     0,
   174,   250,     0,   241,   551,     0,   550,     0,   276,   281,
     0,     0,     0,     0,     0,   463,   464,   544,   543,   525,
     0,   564,   547,     0,   567,   459,   561,   563,     0,   418,
   419,   174,   160,   304,   310,   160,     0,   303,   232,     0,
   130,     0,    82,   206,   212,   160,     0,   211,   207,   232,
     0,     0,     0,     0,     0,     0,     0,   183,   182,   338,
   344,     0,     0,     0,     0,     0,     0,   372,   373,   375,
   377,   379,   381,   383,   385,   388,   393,   396,   399,   403,
   405,   411,   412,     0,     0,   341,   350,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   371,   324,     0,
   322,     0,   244,   260,     0,   163,   166,   252,   164,   243,
   248,   505,     0,     0,   282,   507,   508,     0,     0,   513,
   512,     0,   531,   525,   521,   523,   517,   548,     0,   164,
   174,   174,   160,   305,    53,     0,     0,   174,   160,   208,
    31,    25,     0,     0,    27,     0,     7,   159,   123,     0,
     0,     0,   344,     0,   409,     0,     0,   406,   344,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   407,
   344,     0,   352,     0,     0,     0,   360,     0,     0,     0,
     0,     0,     0,   343,     0,   321,     0,     0,   170,     0,
   166,   250,   553,   552,     0,     0,     0,     0,   532,   531,
   528,   526,     0,   522,   549,   166,   164,   164,   174,   122,
     0,   164,   174,    26,    24,    28,     0,     0,    19,   188,
   339,   340,     0,     0,     0,     0,   344,   346,   376,     0,
   378,   380,   382,   384,   386,   387,   391,   392,   389,   390,
   394,   395,   397,   398,   400,   401,   402,     0,   345,   351,
   353,   354,     0,   362,   361,     0,   356,     0,     0,     0,
     0,     0,   173,     0,     0,   168,   169,   172,   253,   170,
   245,     0,     0,     0,     0,     0,   534,   533,     0,   527,
   524,   170,   166,   166,   164,     0,   166,   164,    29,    18,
    20,     0,   342,   408,     0,   404,   347,     0,   344,   355,
   363,   357,   358,     0,   323,     0,     0,     0,   184,   171,
   198,   172,   278,   277,   509,     0,   530,     0,   529,   172,
   170,   170,   166,    83,   170,   166,    21,     0,   374,   344,
   348,   359,   320,     0,     0,   165,     0,   199,     0,   535,
   307,   172,   172,   170,   172,   170,   410,   349,   161,     0,
   167,   510,   306,   309,   172,   209,   172,     0,   308,   210,
   162,     0,     0,     0
};

static short yydefgoto[] = {  1212,
    53,    54,    55,    56,   492,   894,  1068,   802,   803,   984,
   678,    57,   324,    58,   306,    59,   494,    60,   496,    61,
   151,    62,    63,   564,   242,   478,   479,   243,    66,   259,
   244,    68,   173,   174,    69,   171,    70,   281,   282,   136,
   137,   138,   283,   245,   459,   507,   508,   509,   688,  1158,
   947,  1039,  1118,  1161,   839,    71,    72,   693,   694,   695,
    73,   510,    74,   484,    75,    76,   168,   169,    77,   121,
   560,   339,   340,   734,   650,    78,   651,   554,   725,   546,
   550,   551,   453,   332,   268,   102,   103,   578,   499,   579,
   433,   434,   435,   246,   325,   326,   652,   465,   309,   310,
   311,   312,   313,   314,   315,   316,   817,   317,   318,   907,
   908,   909,   910,   911,   912,   913,   914,   915,   916,   917,
   918,   919,   920,   921,   922,   436,   445,   446,   437,   438,
   439,   319,   206,   413,   207,   570,   208,   209,   210,   211,
   212,   213,   214,   215,   216,   217,   218,   219,   371,   372,
   861,   964,   965,  1050,   966,  1052,  1128,   220,   221,   846,
   222,   596,   597,   223,   224,    80,   985,   440,   469
};

static short yypact[] = {  3187,
-32768,-32768,-32768,-32768,    -1,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  3729,   225,    31,-32768,  3729,  1513,-32768,   -58,    21,-32768,
    98,   153,   141,    37,   227,-32768,-32768,   203,   470,   307,
-32768,   264,-32768,-32768,-32768,   286,   311,   883,   311,   383,
   374,-32768,-32768,   386,   395,   399,  3039,-32768,   586,   664,
-32768,   607,  3729,  3729,  3729,-32768,  3729,-32768,-32768,   448,
-32768,   -58,  1521,   234,   100,   267,   804,-32768,-32768,   402,
   409,   431,-32768,   -58,   436,  6678,-32768,-32768,  1627,   228,
-32768,-32768,-32768,-32768,   426,   402,   460,  6678,-32768,   471,
  1627,   487,   486,   497,-32768,   299,-32768,-32768,  4038,  4038,
   326,   520,  3039,  3039,  6678,   251,-32768,    56,   515,  6678,
-32768,   882,   526,-32768,    56,  4468,  3039,  3039,  3335,-32768,
  3039,  3335,  3039,  3335,-32768,   544,   559,-32768,  3483,-32768,
-32768,-32768,-32768,  4468,-32768,-32768,   402,   163,  1947,-32768,
  1521,   607,   564,  4038,  3967,  5090,-32768,   234,-32768,   567,
-32768,-32768,-32768,-32768,   571,-32768,-32768,   104,   804,  4038,
-32768,-32768,   593,   604,   613,   -58,  6870,   633,  6978,  6678,
  3509,   670,   688,   695,   704,   707,   713,   718,   725,   734,
   739,  6978,  6978,-32768,-32768,   851,  7020,  2727,   752,  7020,
  7020,-32768,-32768,-32768,   305,-32768,-32768,   -51,   683,   746,
   749,   759,   699,   -16,   728,   258,    77,-32768,   706,  7020,
   584,    -3,-32768,   781,   156,-32768,  1627,   167,   794,   831,
   815,   332,  1282,-32768,-32768,   825,  6678,   402,  1282,   805,
  4207,  4468,  4539,  4468,   911,-32768,   -31,   -31,-32768,   827,
  6678,   809,-32768,-32768,   347,   402,-32768,-32768,-32768,-32768,
    61,   818,   821,-32768,-32768,  1232,   359,-32768,-32768,-32768,
   832,-32768,   834,-32768,   835,-32768,   882,  5211,  1521,   564,
   836,  4468,-32768,  1317,   840,   -58,   843,   839,    74,   841,
  4595,   842,   830,   853,   854,  5253,  2575,  4595,   157,   848,
   201,   845,-32768,-32768,   852,  2104,  2104,   607,  2104,-32768,
-32768,-32768,-32768,-32768,   857,-32768,-32768,-32768,    90,-32768,
   564,   858,-32768,-32768,   844,    59,   877,-32768,    23,   867,
   869,   337,   875,   740,   872,  6678,   895,-32768,-32768,   896,
   879,-32768,    59,   -58,-32768,  6678,   899,  2727,-32768,  4468,
  2727,-32768,-32768,-32768,  4716,-32768,   929,  6678,  6678,  6678,
  6678,  6678,  6678,   916,  6678,  4468,  1170,-32768,-32768,-32768,
-32768,   897,-32768,  2104,   902,   375,  6678,-32768,-32768,  6678,
-32768,  7020,  6678,  7020,  7020,  7020,  7020,  7020,  7020,  7020,
  7020,  7020,  7020,  7020,  7020,  7020,  7020,  7020,  7020,  7020,
  6678,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  6678,-32768,    56,-32768,-32768,  5374,    56,  6678,
-32768,   907,   402,-32768,   901,   909,   910,-32768,    15,   426,
    56,  6678,  1627,   -37,-32768,-32768,-32768,   912,   922,   914,
  1627,-32768,-32768,-32768,   921,   928,-32768,   433,   831,   923,
  4038,-32768,   931,   933,-32768,  4539,  4539,  4539,-32768,-32768,
  3800,  5416,   296,-32768,   423,-32768,-32768,    23,-32768,-32768,
   926,   474,   950,-32768,   937,-32768,   934,   930,   938,-32768,
-32768,  3581,-32768,   535,   271,-32768,-32768,-32768,  4468,-32768,
-32768,  1032,-32768,  3039,-32768,  3039,-32768,-32768,-32768,-32768,
   564,-32768,-32768,-32768,  1452,  6678,   949,   948,-32768,   -29,
   358,   402,   402,   856,  6678,  6678,   947,   955,  6678,   945,
  1062,  2418,   979,-32768,-32768,-32768,   506,  1068,-32768,  5537,
  6678,  6678,   973,  2261,  2879,-32768,-32768,  3483,-32768,-32768,
-32768,-32768,  4038,-32768,-32768,  4468,   974,  4302,-32768,-32768,
   965,  1035,    23,   976,  4397,   869,-32768,-32768,-32768,-32768,
   740,   977,   978,   788,-32768,   895,-32768,-32768,-32768,-32768,
-32768,   980,   987,   982,  1006,   981,-32768,-32768,   742,  5211,
   986,   995,   996,   997,  1000,   378,   998,   999,  1003,   608,
  1015,  1004,  6828,-32768,-32768,  1005,  1002,-32768,   683,   150,
   746,   749,   759,   699,   -16,   -16,   728,   728,   728,   728,
   258,   258,    77,    77,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  1009,-32768,    33,  4038,  5048,  4468,-32768,  4468,-32768,
   993,-32768,-32768,-32768,-32768,  1200,-32768,-32768,-32768,  1363,
-32768,  1011,-32768,   255,-32768,  4468,-32768,-32768,-32768,  1010,
   869,  1012,   740,  1007,   423,  4038,  4136,  5579,-32768,-32768,
  6678,-32768,  1020,   402,  6720,  1017,    61,  3871,  1022,   402,
  4038,  3967,  5700,-32768,   535,-32768,  1014,  1111,-32768,-32768,
-32768,   710,-32768,-32768,  1317,  1021,  6678,-32768,   869,-32768,
-32768,-32768,  1030,   -58,   531,   387,   388,  6678,   864,   390,
  4595,  1034,  5742,  5863,   588,-32768,-32768,  1043,  1046,  1038,
  1039,  1040,  5905,  2104,-32768,  1521,-32768,   844,  1050,  4038,
-32768,  1049,    23,  1103,-32768,  1047,  1035,   142,-32768,-32768,
-32768,-32768,   788,-32768,-32768,  1055,   428,  1055,  1051,-32768,
  4758,-32768,-32768,  6678,  6678,  1166,  6678,  3509,-32768,-32768,
-32768,    56,    56,  1048,  1053,  4882,-32768,-32768,  6678,  6678,
-32768,-32768,    59,   764,  1072,  1076,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1035,  1056,-32768,-32768,   740,    59,
  1059,   869,   740,  1054,   452,-32768,   869,  1066,  1063,-32768,
-32768,  1065,-32768,    59,  1070,   869,  1071,   740,  1061,  3335,
  1074,  1156,-32768,-32768,  6678,-32768,  4468,-32768,  1075,    46,
   856,  4595,  1081,  1077,  1109,  1085,  1083,  4595,  6678,  6026,
   626,  6068,   642,  6189,   864,-32768,  1087,  1089,   -58,  1090,
  1094,-32768,-32768,   869,   279,-32768,-32768,  1086,  1142,  1117,
  1103,   869,  4468,-32768,-32768,   282,-32768,  6678,-32768,-32768,
  5211,  1105,  1106,  1108,  1119,-32768,   929,  1114,  1116,    16,
  1120,-32768,-32768,   770,-32768,-32768,-32768,-32768,  5048,-32768,
-32768,  1103,  1035,-32768,-32768,  1035,  1123,-32768,   740,  1126,
  4468,  1140,-32768,-32768,-32768,  1035,  1124,-32768,-32768,   740,
  1134,   467,  1137,  3039,  1130,  1138,  4468,-32768,-32768,  1246,
   864,  1141,  7128,  1135,  2879,  7020,  1131,-32768,   -38,-32768,
  1173,  1127,   756,   816,    62,   824,   349,   102,-32768,-32768,
-32768,-32768,  1175,  7020,  2104,-32768,-32768,   473,  4595,   527,
  6231,  4595,   536,  6352,  6394,   646,  1147,-32768,-32768,  1143,
-32768,  1152,-32768,-32768,  6678,-32768,  1203,  1153,  1142,-32768,
  1050,-32768,   478,   211,-32768,-32768,-32768,  4468,  1272,-32768,
-32768,  1159,    76,   220,-32768,-32768,-32768,-32768,  4924,  1142,
  1103,  1103,  1035,-32768,-32768,  1167,  1165,  1103,  1035,-32768,
-32768,-32768,  1168,  1171,   647,   251,-32768,-32768,-32768,   551,
  4595,  1172,   864,  2727,-32768,  4468,  1174,-32768,  1790,  7020,
  6678,  7020,  7020,  7020,  7020,  7020,  7020,  7020,  7020,  7020,
  7020,  7020,  7020,  7020,  7020,  7020,  7020,  7020,  6678,-32768,
   864,  1177,-32768,  4595,  4595,   581,-32768,  4595,  4595,   605,
  4595,   610,  6515,-32768,  6557,-32768,  1180,  1178,   722,    23,
  1203,   869,-32768,-32768,  2879,  1185,  1189,  6678,  1186,   259,
-32768,-32768,  1190,-32768,-32768,  1203,  1142,  1142,  1103,-32768,
  1192,  1142,  1103,-32768,-32768,-32768,   251,  1179,   653,-32768,
-32768,-32768,  1196,  1191,  1199,  7020,   864,-32768,   683,   262,
   746,   749,   749,   699,   -16,   -16,   728,   728,   728,   728,
   258,   258,    77,    77,-32768,-32768,-32768,   290,-32768,-32768,
-32768,-32768,  4595,-32768,-32768,  4595,-32768,  4595,  4595,   618,
  1209,  1194,-32768,  1198,  1210,-32768,-32768,  1261,-32768,   722,
-32768,  1220,   791,  1214,  4468,   625,-32768,  1222,  1190,-32768,
-32768,   722,  1203,  1203,  1142,  1217,  1203,  1142,-32768,-32768,
-32768,   251,-32768,  1055,   428,-32768,-32768,  6678,  1790,-32768,
-32768,-32768,-32768,  4595,-32768,  1230,  4038,   635,   856,-32768,
-32768,  1261,-32768,-32768,-32768,  1223,-32768,  1242,-32768,  1261,
   722,   722,  1203,-32768,   722,  1203,-32768,   324,-32768,   864,
-32768,-32768,-32768,   797,  1233,-32768,  1224,-32768,  1226,-32768,
-32768,  1261,  1261,   722,  1261,   722,-32768,-32768,-32768,  4038,
-32768,-32768,-32768,-32768,  1261,-32768,  1261,   803,-32768,-32768,
-32768,  1370,  1374,-32768
};

static short yypgoto[] = {-32768,
   122,-32768,-32768,-32768,-32768,-32768,   235,-32768,-32768,   309,
-32768,-32768,  -214,-32768,-32768,-32768,-32768,-32768,-32768,   -62,
  -120,    29,-32768,-32768,     0,   712,-32768,   200,  -138,  1253,
    79,-32768,-32768,  -140,-32768,   617,  1342,  -762,-32768,-32768,
-32768,  1107,  1101,   763,   368,-32768,-32768,   705,  -434,-32768,
  -577,  -621,  -402,  -924,  -781,-32768,-32768,  -772,-32768,-32768,
     8,  -205,  1314,  -413,   276,-32768,  1225,-32768,-32768,  1343,
  -387,  -306,-32768,   658,  -126,  -164,  -147,  -419,   353,   667,
   673,  -450,  -499,  -121,  -449,  -132,-32768,  -243,  -157,  -589,
  -325,-32768,   967,  -195,   -82,  -163,  -150,  -280,    52,-32768,
-32768,-32768,-32768,   -63,  -292,-32768,   -59,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   151,  1176,-32768,   769,   960,
-32768,   352,   808,-32768,  -160,  -398,  -155,  -376,  -368,  -373,
  1026,  -365,  -356,  -349,  -314,  -313,   -75,   711,-32768,-32768,
-32768,-32768,   449,-32768,  -905,   364,-32768,   602,  1057,   273,
-32768,  -343,-32768,   216,   557,   -57,   -69,  -116,   -52
};


#define	YYLAST		7287


static short yytable[] = {    64,
   147,   260,   375,   341,   267,   599,   343,   331,   260,   153,
   150,   602,   146,   536,   537,   601,   539,   660,   279,   353,
    64,   604,   333,   356,    64,   357,   247,   248,   330,   580,
   563,   605,   606,   631,   498,   347,   764,   898,   899,   676,
   607,   608,   609,   610,   896,   454,   256,   122,   722,    83,
   691,   692,   686,    87,   382,   123,    64,  1051,   146,   949,
   483,    41,    64,    64,    64,   502,    64,  1000,   466,   139,
    44,   675,    64,   157,   622,   280,   150,   476,    67,   611,
   612,   592,   613,   614,   390,   391,   307,   321,   320,   547,
   970,   140,   141,   142,   464,   143,   719,   675,   383,    67,
   633,   152,   726,    67,   457,   676,   542,   683,   467,   431,
   432,  1001,    64,    64,   421,   486,   687,   724,   976,   468,
    81,   373,   392,   393,   378,   379,    64,    64,    64,   263,
    64,    64,    64,    64,   227,    67,   729,   962,    64,   422,
   108,    67,    67,    67,   414,    67,   774,  1131,    64,    42,
    64,    67,   572,   228,   573,   574,   548,   157,   466,   322,
  -579,   963,  1008,  1009,   549,  -184,   864,   152,   380,   113,
   589,    86,   341,   730,  -184,   257,   104,   308,   130,   152,
   477,   762,   655,   258,   556,   569,   710,   711,   712,  1057,
  1058,    67,    67,    41,   543,   470,  1062,   962,   467,    65,
  1010,  1011,    44,   568,   655,    67,    67,    67,   488,    67,
    67,    67,    67,   398,   516,   501,   320,    67,   517,    41,
    65,  1049,   541,  1169,    65,   380,   488,    67,    44,    67,
    42,   776,   399,   400,   253,   254,   109,  1188,  1016,   226,
    48,   105,   456,   307,   307,  1191,   307,   338,   269,   270,
   271,   234,   272,   273,   274,   275,    65,  1017,  1018,   735,
   111,   545,    65,    65,    65,   778,    65,  1203,  1204,   807,
  1206,   569,    65,   544,   329,   227,   669,  1135,    64,   112,
  1209,  1138,  1210,  -248,   322,   380,   681,  -248,   806,   529,
   567,   110,   841,   425,   228,   760,    64,   530,   620,   669,
   580,   170,   623,   549,   105,    64,    64,   152,    64,   286,
   426,   307,    65,    65,   630,   538,   105,   457,   457,   457,
    41,   458,   615,   616,   617,    87,    65,    65,    65,    44,
    65,    65,    65,    65,   308,   308,   742,   308,    65,   565,
   872,   532,   521,   115,    41,   569,   380,   227,    65,   528,
    65,   159,   454,    44,   814,  1053,  1045,    67,    84,   114,
  -270,   117,   877,  -270,    46,   963,   228,   881,   644,   831,
    41,  1041,   154,    64,   155,    67,   887,   424,    43,    44,
    45,   156,   118,   444,    67,    67,  1187,    67,   549,   444,
    41,   874,  1056,   951,  1129,   878,   773,   380,    43,    44,
    45,   341,   308,    47,  1049,   468,   895,  1148,   396,    49,
   889,   482,   397,   267,   943,   851,    52,   716,   462,  1120,
   944,   832,   950,   952,   670,   380,   119,   488,   953,   468,
   580,   765,   238,   766,  1132,  1149,   461,   205,   971,   239,
   380,   972,   105,   462,   120,   105,   381,   488,   105,   232,
   454,   978,    67,   488,   105,   456,   456,   456,   249,   704,
   718,   763,   792,   250,   659,  1197,   255,   380,   251,   329,
   953,   714,   555,   442,   717,   150,   792,    41,    65,  1133,
  1134,   668,   380,   674,  1137,    43,    44,    45,   474,    19,
    20,   974,   780,    64,   489,    64,    65,   850,   505,  1014,
   490,   125,   980,  1015,   682,    65,    65,   794,    65,   782,
   380,  1171,  1172,   380,   126,  1175,   594,   757,   127,   748,
   463,    64,   380,   380,   796,   380,   569,   128,   812,   813,
   781,   818,   129,    64,   458,   458,   458,    64,  1059,   797,
   170,   485,   -15,   851,  1063,   795,  1037,   257,   845,   376,
   152,  1194,   172,    46,  1196,   258,    79,  1173,   549,   511,
  1176,   656,   152,   657,   229,   641,   152,    41,   380,   176,
   658,   834,    67,    65,    67,    43,    44,    45,    85,   231,
   842,   144,   106,   632,   107,   715,    41,   380,   448,   726,
   856,   638,   857,   880,    43,    44,    45,   257,  1043,   866,
    67,   982,   472,   983,    79,   258,   662,   955,   380,   380,
   670,   233,    67,    79,  1022,   679,    67,   680,    79,   235,
   847,   236,  1121,  1079,   488,   850,   145,   488,   148,  1082,
  1083,    79,  1021,  1081,   237,   858,   859,   835,   707,  1084,
   175,   380,   733,   851,   569,   106,   252,   527,   105,  1085,
  1086,   307,   833,   320,   659,   261,   105,   106,  1087,  1088,
  1089,  1090,   380,   810,   105,    46,   811,   264,  1024,    79,
    79,   380,   145,   671,   674,   672,   276,  1028,    79,   415,
   416,   417,   673,    79,    79,    79,   489,    79,    79,    79,
    79,  1112,  1070,    65,   277,    65,   323,  1091,  1092,   376,
  1093,  1094,   376,   752,   416,   417,  1077,   336,    79,   997,
   867,   337,   230,    64,   586,    64,   380,  1162,   131,   132,
   824,    65,  1103,   380,   418,   850,    41,   875,   344,  1170,
   419,   420,   175,    65,   600,    44,   463,    65,   345,   135,
   380,   885,   308,    47,   152,   380,  1106,    48,   418,    49,
   346,  1108,   715,   380,   753,   420,    52,   485,   931,  1154,
   380,   380,  1046,   285,   287,   937,  1167,   401,  1192,  1193,
  1185,   624,  1195,   350,   934,   990,  1186,   380,  1033,  1066,
   511,   380,  1067,   106,   569,  1141,   106,   384,  1142,   106,
   771,  1205,    67,  1207,    67,   106,   133,   134,  1074,    64,
  1075,   388,   389,  1042,    16,    17,    18,  1115,  1116,  1117,
   358,   733,   402,   403,   404,   405,   406,   407,   408,   409,
   410,   411,   487,   647,   648,   649,   394,   395,   359,    41,
   998,   558,   559,    79,   146,   360,  1044,    43,    44,    45,
   487,   992,   513,   412,   361,   518,    47,   362,  1020,  1122,
   505,   105,    49,   363,   449,   105,  1180,   533,   364,    52,
   691,   692,   307,   900,    79,   365,   696,   697,   370,   927,
   700,    88,   475,   705,   366,   549,   740,   741,    67,   367,
   160,   161,   162,   163,   164,   815,   816,   349,   266,   352,
   354,   354,   377,    64,   165,   166,   167,   385,   868,   869,
   175,   386,   368,   369,   968,   969,   284,   354,  1004,  1005,
   354,   354,   387,    65,   423,    65,  1069,   266,  1006,  1007,
   427,   891,  1012,  1013,    64,  1164,   380,   262,   146,  1166,
   354,  1199,   543,  1073,   441,    89,   307,  1211,   543,  1078,
  1095,  1096,  1097,   511,   447,   451,   471,   428,   473,   523,
   429,    91,   480,   308,    92,    93,    94,   511,   430,    44,
   511,  1099,   481,   335,    96,   923,   491,    97,   493,   495,
   503,    98,    67,   512,    99,   100,   514,   431,   432,   515,
  1023,   519,   522,  1027,   101,   524,   525,  1179,   531,   106,
   534,   540,   535,  1184,   468,   278,   545,   106,    64,    65,
  1146,    41,    41,    67,   455,   106,   460,   352,   552,   146,
    44,    44,   785,    46,   553,   987,   557,  1147,    47,    47,
   561,    42,    48,    48,    49,    49,    46,   308,   847,   566,
   105,    52,    52,   571,   382,   587,  1208,   591,   487,   626,
   627,   487,  1071,   593,   284,   625,   635,    47,   628,   629,
    79,   461,    79,    49,   821,   823,   354,   636,   462,   637,
    52,   487,   639,   640,   643,   645,   661,   487,   646,   663,
   664,   666,  1069,   667,   665,  1101,  1102,    67,   677,  1104,
  1105,   684,  1107,   685,   146,   500,   307,   698,   699,  1181,
   701,   702,   354,    65,   354,   354,   354,   354,   354,   354,
   354,   354,   354,   354,   354,   354,   354,   354,   354,   354,
   354,   706,   708,   713,   720,   723,   686,   727,   731,   732,
  1198,   736,   737,   738,    65,   739,  -579,   743,   689,   690,
   744,   745,   746,   903,   904,   747,   754,   759,   755,   749,
   750,   767,   354,   562,   751,   772,   758,   800,    64,    88,
   761,   775,   786,   777,  1150,   779,   801,  1151,   790,  1152,
  1153,   805,   500,   793,   808,   581,   582,   583,   584,   585,
   928,   930,   588,   933,   819,   936,   825,   308,   826,   827,
   828,   829,   329,   836,   595,   838,   840,   598,   756,   848,
   854,   870,   106,   860,   862,   871,   106,   873,    65,   954,
   876,   882,   879,   893,   883,  1182,   884,   892,   618,   890,
    88,   886,   888,    89,   901,   897,   354,   926,   902,   938,
   619,   939,   941,   266,   487,   595,   945,    67,   225,    91,
   925,   946,    92,    93,    94,   942,    95,    44,   487,   188,
    88,   487,    96,   948,   266,    97,   956,   957,   958,   905,
   809,   266,    99,   100,   959,   960,   232,   961,   975,   906,
   977,   967,   101,   202,   973,   979,   203,   204,   981,   654,
   986,   988,   989,   991,   993,   996,   999,  1002,  1003,  1019,
   787,  1034,  1026,  1035,  1036,  1030,  1032,  1038,  1040,    41,
    91,   194,   195,    92,    93,    94,  1047,   266,    44,  1048,
  1061,  1060,  1064,   354,    89,  1065,  1072,  1127,   266,  1100,
   351,   962,  1136,  1140,   199,  1076,   768,   266,  1114,   429,
    91,  1113,    88,    92,    93,    94,  1124,   430,    44,  1125,
  1143,  1157,  1144,    96,  1145,  1156,    97,   595,   595,   595,
    98,  1155,   595,    99,   100,   376,   431,   432,    65,  1160,
  1159,    41,  1080,   101,  1163,  1165,    79,  1168,  1174,    43,
    44,    45,  1183,  1190,  1189,  1201,  1200,  1202,    47,  1213,
  1098,   106,   482,  1214,    49,  1139,  1177,   265,   791,   462,
   116,    52,   504,   497,  1110,   940,    89,   500,   158,   804,
   844,   124,  1119,   342,   843,   837,  1123,   354,   443,  1126,
   634,   225,    91,    88,   769,    92,    93,    94,   642,    95,
    44,   603,  1054,  1130,   450,    96,   924,  1178,    97,   266,
     0,     0,    98,   590,     0,    99,   100,     0,     0,     0,
   455,     0,     0,   500,   266,   101,    41,     0,     0,     0,
     0,     0,     0,     0,    43,    44,    45,     0,   145,     0,
    79,     0,     0,    47,     0,     0,     0,   505,   354,    49,
     0,     0,   506,     0,     0,   784,    52,    89,     0,     0,
   354,     0,   789,     0,     0,     0,     0,     0,     0,   770,
   799,     0,   225,    91,     0,     0,    92,    93,    94,     0,
    95,    44,     0,     0,     0,     0,    96,     0,     0,    97,
     0,     0,     0,    98,     0,   595,    99,   100,     0,     0,
     0,     0,     0,     0,     0,   354,   101,     0,     0,     0,
   595,     0,     0,     2,     3,     4,    82,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,   145,     0,    21,     0,     0,     0,   500,     0,
     0,   852,   853,    88,   855,     0,     0,    22,    23,    24,
    25,     0,    26,   500,     0,     0,   865,     0,     0,   284,
    27,    41,     0,     0,     0,    30,     0,     0,     0,    43,
    44,    45,    46,    31,    32,    33,     0,     0,    47,     0,
     0,     0,   505,     0,    49,    38,     0,     0,     0,     0,
     0,    52,     0,     0,     0,   266,     0,     0,     0,     0,
     0,     0,     0,   995,    39,    40,   354,    89,     0,     0,
     0,     0,     0,   145,     0,     0,     0,     0,     0,     0,
     0,     0,    90,    91,   354,     0,    92,    93,    94,     0,
    95,    44,     0,   284,     0,     0,    96,    42,    43,    97,
    45,    46,     0,    98,   149,   354,    99,   100,   500,   266,
     0,     0,     0,     0,    50,    51,   101,    88,     0,     0,
     0,     0,     0,     0,     0,     0,   500,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   145,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   354,     0,   354,   354,   354,   354,   354,   354,   354,   354,
   354,   354,   354,   354,   354,   354,   354,   354,   354,     0,
     0,    89,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   225,    91,     0,     0,
    92,    93,    94,     0,    95,    44,     0,     0,     0,     0,
    96,     0,     0,    97,     0,     0,     0,    98,     0,     0,
    99,   100,     0,     0,     0,     0,   500,     0,     0,     0,
   101,     0,     0,     0,     0,     0,   354,     0,     0,     0,
     0,     0,     2,     3,     4,    82,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,   815,   816,    21,   177,   178,   288,     0,   289,   290,
   291,   292,   293,   294,   295,   296,    22,    23,    24,   297,
    88,    26,   180,   298,     0,     0,     0,     0,   181,    27,
   299,   300,   595,     0,    30,   301,   182,   183,   184,   185,
   186,     0,    31,    32,    33,   187,     0,     0,   354,   188,
     0,     0,   189,   190,    38,   191,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    39,    40,     0,   192,   193,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   302,
    91,   194,   195,    92,    93,    94,    42,    43,    44,    45,
    46,   196,   303,   149,     0,     0,   197,     0,     0,     0,
   198,     0,     0,    50,   305,     0,     0,     0,     0,     0,
   200,     0,     0,   201,   202,     0,     0,   203,   204,     2,
     3,     4,    82,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,     0,     0,
    21,   177,   178,   288,     0,   289,   290,   291,   292,   293,
   294,   295,   296,    22,    23,    24,   297,    88,    26,   180,
   298,     0,     0,     0,     0,   181,    27,   299,   300,     0,
     0,    30,   301,   182,   183,   184,   185,   186,     0,    31,
    32,    33,   187,     0,     0,     0,   188,     0,     0,   189,
   190,    38,   191,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    39,    40,     0,   192,   193,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   302,    91,   194,   195,
    92,    93,    94,    42,    43,    44,    45,    46,   196,   303,
   149,   304,     0,   197,     0,     0,     0,   198,     0,     0,
    50,   305,     0,     0,     0,     0,     0,   200,     0,     0,
   201,   202,     0,     0,   203,   204,     2,     3,     4,    82,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,     0,     0,    21,   177,   178,
   288,     0,   289,   290,   291,   292,   293,   294,   295,   296,
    22,    23,    24,   297,    88,    26,   180,   298,     0,     0,
     0,     0,   181,    27,   299,   300,     0,     0,    30,   301,
   182,   183,   184,   185,   186,     0,    31,    32,    33,   187,
     0,     0,     0,   188,     0,     0,   189,   190,    38,   191,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    39,    40,     0,
   192,   193,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   302,    91,   194,   195,    92,    93,    94,
    42,    43,    44,    45,    46,   196,   303,   149,     0,     0,
   197,     0,     0,     0,   198,     0,     0,    50,   305,     0,
     0,     0,     0,     0,   200,     0,     0,   201,   202,     0,
     0,   203,   204,     2,     3,     4,    82,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,     0,     0,    21,   177,   178,   288,     0,   289,
   290,   291,   292,   293,   294,   295,   296,    22,    23,    24,
   297,    88,    26,   180,   298,     0,     0,     0,     0,   181,
    27,   299,   300,     0,     0,    30,   301,   182,   183,   184,
   185,   186,     0,    31,    32,    33,   187,     0,     0,     0,
   188,     0,     0,   189,   190,    38,   191,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    39,    40,     0,   192,   193,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   520,    91,   194,   195,    92,    93,    94,    42,    43,    44,
    45,    46,   196,   303,   149,     0,     0,   197,     0,     0,
     0,   198,     0,     0,    50,   305,     0,     0,     0,     0,
     0,   200,     0,     0,   201,   202,     0,     0,   203,   204,
     2,     3,     4,    82,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,     0,
     0,    21,   177,   178,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    22,    23,    24,   297,    88,    26,
   180,     0,     0,     0,     0,     0,   181,    27,     0,     0,
     0,     0,    30,     0,   182,   183,   184,   185,   186,     0,
    31,    32,    33,   187,     0,     0,     0,   188,     0,     0,
   189,   190,    38,   191,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    39,    40,     0,   192,   193,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    41,    91,   194,
   195,    92,    93,    94,    42,    43,    44,    45,    46,   196,
   703,     0,     0,     0,   197,     0,     0,     0,   198,     0,
     0,    50,   305,     0,     0,     0,     0,     0,   200,     0,
     0,   201,   202,     0,     0,   203,   204,     2,     3,     4,
    82,     6,     7,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,     0,     0,    21,   177,
   178,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    22,    23,    24,   297,    88,     0,     0,     0,     0,
     0,     0,     0,     0,    27,     0,     0,     0,     0,    30,
     0,   182,   183,   184,   185,   186,     0,    31,    32,     0,
     0,     0,     0,     0,   188,     0,     0,   189,   190,    38,
   191,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    39,    40,
     0,   192,   193,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    41,    91,   194,   195,    92,    93,
    94,    42,    43,    44,    45,    46,   196,     0,     0,     0,
     0,   197,     0,     0,     0,   351,     0,     0,    50,   305,
     0,     0,     0,     0,     0,   200,     0,     0,   201,   202,
     0,     0,   203,   204,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,     0,     0,
     0,   177,   178,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    22,    23,    24,   179,    88,     0,   180,
     0,     0,     0,     0,     0,   181,     0,     0,     0,     0,
     0,    30,     0,   182,   183,   184,   185,   186,     0,    31,
    32,     0,   187,     0,     0,     0,   188,     0,     0,   189,
   190,    38,   191,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    39,    40,     0,   192,   193,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    41,    91,   194,   195,
    92,    93,    94,    42,    43,    44,    45,    46,   196,     0,
   374,     0,     0,   197,     0,     0,     0,   198,     0,     0,
    50,   305,     0,     0,     0,     0,     0,   200,     0,     0,
   201,   202,     0,     0,   203,   204,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
     0,     0,     0,   177,   178,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    22,    23,    24,   179,    88,
     0,   180,     0,     0,     0,     0,     0,   181,     0,     0,
     0,     0,     0,    30,     0,   182,   183,   184,   185,   186,
     0,    31,    32,     0,   187,     0,     0,     0,   188,     0,
     0,   189,   190,    38,   191,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    39,    40,     0,   192,   193,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    41,    91,
   194,   195,    92,    93,    94,    42,    43,    44,    45,    46,
   196,     0,     0,     0,     0,   197,     0,     0,     0,   198,
     0,     0,    50,   305,     0,     0,     0,     0,     0,   200,
     0,     0,   201,   202,     0,     0,   203,   204,   -12,     1,
     0,     2,     3,     4,     5,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
     0,     0,    21,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    22,    23,    24,    25,     0,
    26,     0,     0,     0,     0,     0,     0,     0,    27,     0,
     0,    28,    29,    30,     0,     0,     0,     0,     0,     0,
     0,    31,    32,    33,     0,     0,    34,    35,     0,    36,
    37,     0,     0,    38,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    39,    40,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    41,     0,
     0,     0,     0,     0,     0,    42,    43,    44,    45,    46,
     0,     0,     0,   -12,     0,    47,     0,     0,     0,    48,
     0,    49,    50,    51,     0,     0,   -12,     1,    52,     2,
     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,     0,     0,
    21,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    22,    23,    24,    25,     0,    26,     0,
     0,     0,     0,     0,     0,     0,    27,     0,     0,    28,
    29,    30,     0,     0,     0,     0,     0,     0,     0,    31,
    32,    33,     0,     0,    34,    35,     0,    36,    37,     0,
     0,    38,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    39,    40,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    41,     0,     0,     0,
     0,     0,     0,    42,    43,    44,    45,    46,     0,     0,
     0,     0,     0,    47,     0,     0,     0,    48,     0,    49,
    50,    51,     0,     0,     0,     1,    52,     2,     3,     4,
     5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,     0,     0,    21,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    22,    23,    24,    25,     0,    26,     0,     0,     0,
     0,     0,     0,     0,    27,     0,     0,    28,    29,    30,
     0,     0,     0,     0,     0,     0,     0,    31,    32,    33,
     0,     0,    34,    35,     0,    36,    37,     0,     0,    38,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    39,    40,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    41,     0,     0,     0,     0,     0,
     0,    42,    43,    44,    45,    46,     0,     0,     0,   -12,
     0,    47,     0,     0,     0,    48,     0,    49,    50,    51,
     0,     0,     0,     0,    52,     2,     3,     4,    82,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,     0,     0,    21,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    22,
    23,    24,    25,     0,    26,     0,     0,     0,     0,     0,
     0,     0,    27,   177,   178,     0,     0,    30,     0,     0,
     0,     0,     0,     0,     0,    31,    32,    33,   179,    88,
     0,     0,     0,     0,     0,     0,     0,    38,     0,     0,
     0,     0,     0,     0,     0,   182,   183,   184,   185,   186,
     0,     0,     0,     0,     0,     0,    39,    40,   188,     0,
     0,   189,   190,     0,   191,     0,     0,     0,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,     0,     0,     0,   192,   193,     0,     0,    42,
    43,     0,    45,    46,     0,     0,   149,    22,    23,    24,
   278,     0,     0,     0,     0,     0,    50,    51,    41,    91,
   194,   195,    92,    93,    94,    30,     0,    44,     0,     0,
   196,     0,   355,    31,    32,   197,     0,     0,     0,   198,
     0,     0,     0,   199,     0,    38,     0,     0,     0,   200,
     0,     0,   201,   202,     0,     0,   203,   204,     0,     0,
     0,     0,     0,     0,    39,    40,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   327,     0,     0,
    41,     0,     0,     0,     0,     0,     0,    42,    43,    44,
    45,    46,     0,   329,     0,     0,     0,    47,     0,     0,
     0,   482,     0,    49,    50,    51,     0,     0,   462,     0,
    52,     2,     3,     4,    82,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
     0,     0,    21,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    22,    23,    24,    25,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    27,     0,
     0,     0,     0,    30,     0,     0,     0,     0,     0,     0,
     0,    31,    32,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    38,     0,     0,     0,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,     0,    39,    40,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    22,    23,    24,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    30,    42,    43,     0,    45,    46,
     0,     0,    31,    32,     0,     0,     0,     0,     0,     0,
     0,     0,    50,    51,    38,     0,     0,     0,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,     0,    39,    40,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    22,    23,    24,
     0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
     0,     0,     0,     0,     0,    30,    42,    43,     0,    45,
    46,     0,   329,    31,    32,     0,    47,     0,     0,     0,
   461,     0,    49,    50,    51,    38,     0,   462,     0,    52,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    39,    40,     0,     0,     0,     0,
     0,     0,     0,     0,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,     0,     0,
    41,     0,     0,     0,     0,     0,     0,    42,    43,    44,
    45,    46,     0,    22,    23,    24,     0,    47,     0,     0,
     0,   505,     0,    49,    50,    51,     0,     0,     0,     0,
    52,    30,     0,     0,     0,     0,     0,     0,     0,    31,
    32,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    38,     0,     0,     0,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,     0,
    39,    40,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    22,    23,    24,     0,     0,     0,
     0,     0,     0,   327,     0,     0,   328,     0,     0,     0,
     0,     0,    30,    42,    43,     0,    45,    46,     0,   329,
    31,    32,     0,     0,   240,     0,     0,     0,     0,     0,
    50,    51,    38,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    39,    40,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,     0,     0,     0,
     0,     0,     0,     0,    42,    43,     0,    45,    46,     0,
     0,   241,    22,    23,    24,     0,     0,     0,     0,     0,
     0,    50,    51,     0,     0,     0,     0,     0,     0,     0,
    30,     0,     0,     0,     0,     0,     0,     0,    31,    32,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    38,     0,     0,     0,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,     0,    39,
    40,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    22,    23,    24,     0,     0,     0,     0,
     0,     0,   327,     0,     0,     0,     0,     0,     0,     0,
     0,    30,    42,    43,     0,    45,    46,     0,   329,    31,
    32,     0,     0,     0,     0,     0,     0,     0,     0,    50,
    51,    38,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    39,    40,     0,     0,     0,     0,     0,     0,     0,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    42,    43,     0,    45,    46,    22,    23,
    24,   452,     0,     0,     0,     0,     0,     0,     0,     0,
    50,    51,     0,     0,     0,     0,    30,     0,     0,     0,
     0,     0,     0,     0,    31,    32,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    38,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    39,    40,     0,     0,     0,
     0,     0,     0,     0,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    42,    43,
     0,    45,    46,    22,    23,    24,   721,     0,     0,     0,
     0,     0,     0,     0,     0,    50,    51,     0,     0,     0,
     0,    30,     0,     0,     0,     0,     0,     0,     0,    31,
    32,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    38,     0,     0,     0,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,     0,
    39,    40,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    22,    23,    24,     0,     0,     0,
     0,     0,     0,   728,     0,     0,     0,     0,     0,     0,
     0,     0,    30,    42,    43,     0,    45,    46,     0,     0,
    31,    32,     0,     0,     0,     0,     0,     0,     0,     0,
    50,    51,    38,     0,     0,     0,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
     0,    39,    40,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    22,    23,    24,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    30,    42,    43,     0,    45,    46,     0,
     0,    31,    32,     0,     0,     0,     0,     0,     0,     0,
     0,    50,    51,    38,     0,     0,     0,     0,     0,   177,
   178,   288,     0,   289,   290,   291,   292,   293,   294,   295,
   296,     0,    39,    40,   179,    88,     0,   180,   298,     0,
     0,     0,     0,   181,     0,   299,   300,     0,     0,     0,
   301,   182,   183,   184,   185,   186,     0,     0,     0,     0,
   187,     0,     0,     0,   188,    42,     0,   189,   190,    46,
   191,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    50,    51,     0,     0,     0,     0,     0,     0,
     0,   192,   193,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   520,    91,   194,   195,    92,    93,
    94,     0,     0,    44,     0,     0,   196,   303,   149,     0,
     0,   197,     0,     0,     0,   198,     0,     0,     0,   199,
   177,   178,     0,     0,     0,   200,     0,   575,   201,   202,
     0,     0,   203,   204,     0,   179,    88,     0,   180,     0,
     0,     0,     0,     0,   181,     0,     0,     0,     0,     0,
     0,     0,   182,   183,   184,   185,   186,     0,     0,     0,
     0,   187,   177,   178,     0,   188,     0,     0,   189,   190,
     0,   191,     0,     0,     0,     0,     0,   179,    88,     0,
   180,     0,     0,     0,     0,     0,   181,     0,     0,     0,
     0,     0,   192,   193,   182,   183,   184,   185,   186,     0,
     0,     0,     0,   187,     0,     0,     0,   188,     0,     0,
   189,   190,     0,   191,     0,   576,    91,   194,   195,    92,
    93,    94,     0,   258,    44,     0,     0,   196,     0,   355,
   577,     0,   197,     0,   192,   193,   198,     0,     0,     0,
   199,     0,   431,   432,     0,     0,   200,     0,     0,   201,
   202,     0,     0,   203,   204,     0,     0,   576,    91,   194,
   195,    92,    93,    94,     0,   258,    44,     0,     0,   196,
     0,   355,   849,     0,   197,     0,     0,     0,   198,     0,
     0,     0,   199,     0,   431,   432,   177,   178,   200,     0,
     0,   201,   202,     0,     0,   203,   204,     0,     0,     0,
     0,   179,    88,     0,   180,     0,     0,     0,     0,     0,
   181,     0,     0,     0,     0,     0,     0,     0,   182,   183,
   184,   185,   186,     0,     0,     0,     0,   187,   177,   178,
     0,   188,     0,     0,   189,   190,     0,   191,     0,     0,
     0,     0,     0,   179,    88,     0,   180,     0,     0,     0,
     0,     0,   181,     0,     0,     0,     0,     0,   192,   193,
   182,   183,   184,   185,   186,     0,     0,     0,     0,   187,
     0,     0,     0,   188,     0,     0,   189,   190,     0,   191,
     0,   576,    91,   194,   195,    92,    93,    94,     0,   258,
    44,     0,     0,   196,     0,   355,   863,     0,   197,     0,
   192,   193,   198,     0,     0,     0,   199,     0,   431,   432,
     0,     0,   200,     0,     0,   201,   202,     0,     0,   203,
   204,     0,     0,   576,    91,   194,   195,    92,    93,    94,
     0,   258,    44,     0,     0,   196,     0,   355,  1055,     0,
   197,     0,     0,     0,   198,     0,     0,     0,   199,     0,
   431,   432,   177,   178,   200,     0,     0,   201,   202,     0,
     0,   203,   204,     0,     0,     0,     0,   179,    88,     0,
   180,     0,     0,     0,     0,     0,   181,     0,     0,     0,
     0,     0,     0,     0,   182,   183,   184,   185,   186,     0,
     0,     0,     0,   187,   177,   178,     0,   188,     0,     0,
   189,   190,     0,   191,     0,     0,     0,     0,     0,   179,
    88,     0,   180,     0,     0,     0,     0,     0,   181,     0,
     0,     0,     0,     0,   192,   193,   182,   183,   184,   185,
   186,     0,     0,     0,     0,   187,     0,     0,     0,   188,
     0,     0,   189,   190,     0,   191,     0,   576,    91,   194,
   195,    92,    93,    94,     0,   258,    44,     0,     0,   196,
     0,   355,     0,     0,   197,     0,   192,   193,   198,     0,
     0,     0,   199,     0,   431,   432,     0,     0,   200,     0,
     0,   201,   202,     0,     0,   203,   204,     0,     0,    41,
    91,   194,   195,    92,    93,    94,     0,     0,    44,     0,
     0,   196,     0,     0,     0,     0,   197,     0,     0,     0,
   198,     0,     0,     0,   199,   177,   178,     0,   334,     0,
   200,     0,     0,   201,   202,     0,     0,   203,   204,     0,
   179,    88,     0,   180,     0,     0,     0,     0,     0,   181,
     0,     0,     0,     0,     0,     0,     0,   182,   183,   184,
   185,   186,     0,     0,     0,     0,   187,   177,   178,     0,
   188,     0,     0,   189,   190,     0,   191,     0,     0,     0,
     0,     0,   179,    88,     0,   180,     0,     0,     0,     0,
     0,   181,     0,     0,     0,     0,     0,   192,   193,   182,
   183,   184,   185,   186,     0,     0,     0,     0,   187,     0,
     0,     0,   188,     0,     0,   189,   190,     0,   191,     0,
    41,    91,   194,   195,    92,    93,    94,     0,     0,    44,
     0,     0,   196,     0,   355,     0,     0,   197,     0,   192,
   193,   198,     0,     0,     0,   199,     0,     0,     0,     0,
     0,   200,     0,     0,   201,   202,     0,     0,   203,   204,
     0,     0,    41,    91,   194,   195,    92,    93,    94,     0,
     0,    44,     0,     0,   196,   526,     0,     0,     0,   197,
     0,     0,     0,   198,     0,     0,     0,   199,   177,   178,
     0,     0,     0,   200,     0,     0,   201,   202,     0,     0,
   203,   204,     0,   179,    88,     0,   180,     0,     0,     0,
     0,     0,   181,     0,     0,     0,     0,     0,     0,     0,
   182,   183,   184,   185,   186,     0,     0,     0,     0,   187,
   177,   178,     0,   188,     0,     0,   189,   190,     0,   191,
     0,     0,     0,     0,     0,   179,    88,     0,   180,     0,
     0,     0,     0,     0,   181,     0,     0,     0,     0,     0,
   192,   193,   182,   183,   184,   185,   186,     0,     0,     0,
     0,   187,     0,     0,     0,   188,     0,     0,   189,   190,
     0,   191,     0,    41,    91,   194,   195,    92,    93,    94,
     0,     0,    44,     0,     0,   196,     0,     0,     0,     0,
   197,     0,   192,   193,   198,   621,     0,     0,   199,     0,
     0,     0,     0,     0,   200,     0,     0,   201,   202,     0,
     0,   203,   204,     0,     0,    41,    91,   194,   195,    92,
    93,    94,     0,     0,    44,     0,     0,   196,     0,     0,
     0,     0,   197,     0,     0,     0,   198,     0,     0,     0,
   199,   177,   178,     0,   653,     0,   200,     0,     0,   201,
   202,     0,     0,   203,   204,     0,   179,    88,     0,   180,
     0,     0,     0,     0,     0,   181,     0,     0,     0,     0,
     0,     0,     0,   182,   183,   184,   185,   186,     0,     0,
     0,     0,   187,   177,   178,     0,   188,     0,     0,   189,
   190,     0,   191,     0,     0,     0,     0,     0,   179,    88,
     0,   180,     0,     0,     0,     0,     0,   181,     0,     0,
     0,     0,     0,   192,   193,   182,   183,   184,   185,   186,
     0,     0,     0,     0,   187,     0,     0,     0,   188,     0,
     0,   189,   190,     0,   191,     0,    41,    91,   194,   195,
    92,    93,    94,     0,     0,    44,     0,     0,   196,     0,
     0,     0,     0,   197,     0,   192,   193,   198,   709,     0,
     0,   199,     0,     0,     0,     0,     0,   200,     0,     0,
   201,   202,     0,     0,   203,   204,     0,     0,    41,    91,
   194,   195,    92,    93,    94,     0,     0,    44,     0,     0,
   196,     0,     0,     0,     0,   197,     0,     0,     0,   198,
     0,     0,     0,   199,   177,   178,     0,   783,     0,   200,
     0,     0,   201,   202,     0,     0,   203,   204,     0,   179,
    88,     0,   180,     0,     0,     0,     0,     0,   181,     0,
     0,     0,     0,     0,     0,     0,   182,   183,   184,   185,
   186,     0,     0,     0,     0,   187,   177,   178,     0,   188,
     0,     0,   189,   190,     0,   191,     0,     0,     0,     0,
     0,   179,    88,     0,   180,     0,     0,     0,     0,     0,
   181,     0,     0,     0,     0,     0,   192,   193,   182,   183,
   184,   185,   186,     0,     0,     0,     0,   187,     0,     0,
     0,   188,     0,     0,   189,   190,     0,   191,     0,    41,
    91,   194,   195,    92,    93,    94,     0,     0,    44,     0,
     0,   196,     0,     0,     0,     0,   197,     0,   192,   193,
   198,     0,     0,     0,   199,     0,     0,     0,   798,     0,
   200,     0,     0,   201,   202,     0,     0,   203,   204,     0,
     0,    41,    91,   194,   195,    92,    93,    94,     0,     0,
    44,     0,     0,   196,   820,     0,     0,     0,   197,     0,
     0,     0,   198,     0,     0,     0,   199,   177,   178,     0,
     0,     0,   200,     0,     0,   201,   202,     0,     0,   203,
   204,     0,   179,    88,     0,   180,     0,     0,     0,     0,
     0,   181,     0,     0,     0,     0,     0,     0,     0,   182,
   183,   184,   185,   186,     0,     0,     0,     0,   187,   177,
   178,     0,   188,     0,     0,   189,   190,     0,   191,     0,
     0,     0,     0,     0,   179,    88,     0,   180,     0,     0,
     0,     0,     0,   181,     0,     0,     0,     0,     0,   192,
   193,   182,   183,   184,   185,   186,     0,     0,     0,     0,
   187,     0,     0,     0,   188,     0,     0,   189,   190,     0,
   191,     0,    41,    91,   194,   195,    92,    93,    94,     0,
     0,    44,     0,     0,   196,   822,     0,     0,     0,   197,
     0,   192,   193,   198,     0,     0,     0,   199,     0,     0,
     0,     0,     0,   200,     0,     0,   201,   202,     0,     0,
   203,   204,     0,     0,    41,    91,   194,   195,    92,    93,
    94,     0,     0,    44,     0,     0,   196,     0,     0,     0,
     0,   197,     0,     0,     0,   198,   830,     0,     0,   199,
   177,   178,     0,     0,     0,   200,     0,     0,   201,   202,
     0,     0,   203,   204,     0,   179,    88,     0,   180,     0,
     0,     0,     0,     0,   181,     0,     0,     0,     0,     0,
     0,     0,   182,   183,   184,   185,   186,     0,     0,     0,
     0,   187,   177,   178,     0,   188,     0,     0,   189,   190,
     0,   191,     0,     0,     0,     0,     0,   179,    88,     0,
   180,     0,     0,     0,     0,     0,   181,     0,     0,     0,
     0,     0,   192,   193,   182,   183,   184,   185,   186,     0,
     0,     0,     0,   187,     0,     0,     0,   188,     0,     0,
   189,   190,     0,   191,     0,    41,    91,   194,   195,    92,
    93,    94,     0,     0,    44,     0,     0,   196,     0,     0,
     0,     0,   197,     0,   192,   193,   198,   929,     0,     0,
   199,     0,     0,     0,     0,     0,   200,     0,     0,   201,
   202,     0,     0,   203,   204,     0,     0,    41,    91,   194,
   195,    92,    93,    94,     0,     0,    44,     0,     0,   196,
     0,     0,     0,     0,   197,     0,     0,     0,   198,   932,
     0,     0,   199,   177,   178,     0,     0,     0,   200,     0,
     0,   201,   202,     0,     0,   203,   204,     0,   179,    88,
     0,   180,     0,     0,     0,     0,     0,   181,     0,     0,
     0,     0,     0,     0,     0,   182,   183,   184,   185,   186,
     0,     0,     0,     0,   187,   177,   178,     0,   188,     0,
     0,   189,   190,     0,   191,     0,     0,     0,     0,     0,
   179,    88,     0,   180,     0,     0,     0,     0,     0,   181,
     0,     0,     0,     0,     0,   192,   193,   182,   183,   184,
   185,   186,     0,     0,     0,     0,   187,     0,     0,     0,
   188,     0,     0,   189,   190,     0,   191,     0,    41,    91,
   194,   195,    92,    93,    94,     0,     0,    44,     0,     0,
   196,   935,     0,     0,     0,   197,     0,   192,   193,   198,
     0,     0,     0,   199,     0,     0,     0,     0,     0,   200,
     0,     0,   201,   202,     0,     0,   203,   204,     0,     0,
    41,    91,   194,   195,    92,    93,    94,     0,     0,    44,
     0,     0,   196,     0,     0,     0,     0,   197,     0,     0,
     0,   198,  1025,     0,     0,   199,   177,   178,     0,     0,
     0,   200,     0,     0,   201,   202,     0,     0,   203,   204,
     0,   179,    88,     0,   180,     0,     0,     0,     0,     0,
   181,     0,     0,     0,     0,     0,     0,     0,   182,   183,
   184,   185,   186,     0,     0,     0,     0,   187,   177,   178,
     0,   188,     0,     0,   189,   190,     0,   191,     0,     0,
     0,     0,     0,   179,    88,     0,   180,     0,     0,     0,
     0,     0,   181,     0,     0,     0,     0,     0,   192,   193,
   182,   183,   184,   185,   186,     0,     0,     0,     0,   187,
     0,     0,     0,   188,     0,     0,   189,   190,     0,   191,
     0,    41,    91,   194,   195,    92,    93,    94,     0,     0,
    44,     0,     0,   196,     0,     0,     0,     0,   197,     0,
   192,   193,   198,  1029,     0,     0,   199,     0,     0,     0,
     0,     0,   200,     0,     0,   201,   202,     0,     0,   203,
   204,     0,     0,    41,    91,   194,   195,    92,    93,    94,
     0,     0,    44,     0,     0,   196,     0,     0,     0,     0,
   197,     0,     0,     0,   198,  1031,     0,     0,   199,   177,
   178,     0,     0,     0,   200,     0,     0,   201,   202,     0,
     0,   203,   204,     0,   179,    88,     0,   180,     0,     0,
     0,     0,     0,   181,     0,     0,     0,     0,     0,     0,
     0,   182,   183,   184,   185,   186,     0,     0,     0,     0,
   187,   177,   178,     0,   188,     0,     0,   189,   190,     0,
   191,     0,     0,     0,     0,     0,   179,    88,     0,   180,
     0,     0,     0,     0,     0,   181,     0,     0,     0,     0,
     0,   192,   193,   182,   183,   184,   185,   186,     0,     0,
     0,     0,   187,     0,     0,     0,   188,     0,     0,   189,
   190,     0,   191,     0,    41,    91,   194,   195,    92,    93,
    94,     0,     0,    44,     0,     0,   196,     0,     0,     0,
     0,   197,     0,   192,   193,   198,  1109,     0,     0,   199,
     0,     0,     0,     0,     0,   200,     0,     0,   201,   202,
     0,     0,   203,   204,     0,     0,    41,    91,   194,   195,
    92,    93,    94,     0,     0,    44,     0,     0,   196,     0,
     0,     0,     0,   197,     0,     0,     0,   198,  1111,     0,
     0,   199,   177,   178,     0,     0,     0,   200,     0,     0,
   201,   202,     0,     0,   203,   204,     0,   179,    88,     0,
   180,     0,     0,     0,     0,     0,   181,     0,     0,     0,
     0,     0,     0,     0,   182,   183,   184,   185,   186,     0,
     0,     0,     0,   187,   177,   178,     0,   188,     0,     0,
   189,   190,     0,   191,     0,     0,     0,     0,     0,   179,
    88,     0,   180,     0,     0,     0,     0,     0,   181,     0,
     0,     0,     0,     0,   192,   193,   182,   183,   184,   185,
   186,     0,     0,     0,     0,   187,     0,     0,     0,   188,
     0,     0,   189,   190,     0,   191,     0,    41,    91,   194,
   195,    92,    93,    94,     0,     0,    44,     0,     0,   196,
     0,     0,     0,     0,   197,     0,   192,   193,   198,     0,
     0,     0,   199,     0,     0,     0,     0,     0,   200,     0,
     0,   201,   202,     0,     0,   203,   204,     0,     0,   788,
    91,   194,   195,    92,    93,    94,     0,     0,    44,     0,
     0,   196,   177,   178,     0,     0,   197,     0,     0,     0,
   198,     0,     0,     0,   199,     0,     0,   179,    88,     0,
   200,     0,     0,   201,   202,     0,     0,   203,   204,     0,
     0,     0,     0,     0,   182,   183,   184,   185,   186,     0,
     0,     0,     0,     0,   177,   178,     0,   188,     0,     0,
   189,   190,     0,   191,     0,     0,     0,     0,     0,   179,
    88,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   192,   193,   182,   183,   184,   185,
   186,     0,     0,     0,     0,     0,     0,     0,     0,   188,
     0,     0,   189,   190,     0,   191,     0,    41,    91,   194,
   195,    92,    93,    94,     0,     0,    44,     0,     0,   196,
     0,   756,     0,     0,   197,     0,   192,   193,   198,     0,
     0,     0,   199,     0,     0,     0,     0,     0,   200,     0,
     0,   201,   202,     0,     0,   203,   204,     0,     0,    41,
    91,   194,   195,    92,    93,    94,     0,     0,    44,     0,
     0,   196,   177,   178,     0,     0,   197,     0,     0,     0,
   348,     0,     0,     0,   199,     0,     0,   179,    88,     0,
   200,     0,     0,   201,   202,     0,     0,   203,   204,     0,
     0,     0,     0,     0,   182,   183,   184,   185,   186,     0,
     0,     0,     0,     0,   177,   178,     0,   188,     0,     0,
   189,   190,     0,   191,     0,     0,     0,     0,     0,   179,
    88,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   192,   193,   182,   183,   184,   185,
   186,     0,     0,     0,     0,     0,     0,     0,     0,   188,
     0,     0,   189,   190,     0,   191,     0,    41,    91,   194,
   195,    92,    93,    94,     0,     0,    44,     0,     0,   196,
     0,     0,     0,     0,   197,     0,   192,   193,   351,     0,
     0,     0,   199,     0,     0,     0,     0,     0,   200,     0,
     0,   201,   202,     0,     0,   203,   204,     0,     0,    41,
    91,   194,   195,    92,    93,    94,     0,     0,    44,     0,
     0,   196,   177,   178,     0,     0,   197,     0,     0,     0,
   198,     0,     0,     0,   199,     0,     0,   179,    88,     0,
   200,     0,     0,   201,   202,     0,     0,   203,   204,     0,
     0,     0,     0,     0,   182,   183,   184,   185,   186,     0,
     0,     0,     0,     0,     0,     0,     0,   188,     0,     0,
   189,   190,     0,   191,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   192,   193,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    41,    91,   194,
   195,    92,    93,    94,     0,     0,    44,     0,     0,   196,
     0,     0,     0,     0,   197,     0,     0,     0,   994,     0,
     0,     0,   199,     0,     0,     0,     0,     0,   200,     0,
     0,   201,   202,     0,     0,   203,   204
};

static short yycheck[] = {     0,
    70,   118,   198,   168,   126,   382,   170,   155,   125,    73,
    73,   385,    70,   306,   307,   384,   309,   468,   139,   180,
    21,   387,   155,   181,    25,   181,   109,   110,   155,   355,
   337,   388,   389,   432,   278,   176,   626,   810,   811,   489,
   390,   391,   392,   393,   807,   241,   116,    48,   548,    21,
     5,     6,    82,    25,   106,    48,    57,   963,   116,   841,
   266,   120,    63,    64,    65,   280,    67,   106,   100,    62,
   129,   485,    73,    74,   418,   139,   139,    17,     0,   394,
   395,   374,   396,   397,   101,   102,   149,   151,   151,    67,
   872,    63,    64,    65,   245,    67,   546,   511,   150,    21,
   138,    73,   553,    25,   243,   555,   321,   506,   140,   147,
   148,   150,   113,   114,   118,   266,   146,   552,   881,   151,
   122,   197,   139,   140,   200,   201,   127,   128,   129,   122,
   131,   132,   133,   134,   120,    57,   556,   122,   139,   143,
   120,    63,    64,    65,   220,    67,   646,  1053,   149,   127,
   151,    73,   348,   139,   350,   351,   134,   158,   100,   152,
   146,   146,   101,   102,   329,   120,   756,   139,   136,   133,
   366,   141,   337,   561,   129,   120,    26,   149,    57,   151,
   120,   149,   463,   128,   332,   346,   530,   531,   532,   971,
   972,   113,   114,   120,   136,   248,   978,   122,   140,     0,
   139,   140,   129,   344,   485,   127,   128,   129,   266,   131,
   132,   133,   134,   137,   141,   279,   279,   139,   145,   120,
    21,   146,   133,  1129,    25,   136,   284,   149,   129,   151,
   127,   651,   156,   157,   113,   114,   139,  1162,   137,    89,
   141,    26,   243,   306,   307,  1170,   309,   144,   127,   128,
   129,   101,   131,   132,   133,   134,    57,   156,   157,   566,
   120,   120,    63,    64,    65,   653,    67,  1192,  1193,   689,
  1195,   432,    73,   326,   133,   120,   482,  1059,   279,   139,
  1205,  1063,  1207,   142,   277,   136,   501,   146,   687,   133,
   343,   139,   727,   127,   139,   146,   297,   141,   415,   505,
   626,   139,   419,   468,    89,   306,   307,   279,   309,   147,
   144,   374,   113,   114,   431,   308,   101,   456,   457,   458,
   120,   243,   398,   399,   400,   297,   127,   128,   129,   129,
   131,   132,   133,   134,   306,   307,   580,   309,   139,   340,
   775,   141,   291,   141,   120,   506,   136,   120,   149,   298,
   151,    76,   548,   129,   698,   136,   146,   279,   134,   133,
   133,    55,   782,   136,   131,   146,   139,   787,   451,   713,
   120,   949,   139,   374,   141,   297,   796,   227,   128,   129,
   130,   148,   119,   233,   306,   307,  1159,   309,   553,   239,
   120,   779,   970,   843,   136,   783,   142,   136,   128,   129,
   130,   566,   374,   137,   146,   151,   805,   146,   151,   143,
   798,   141,   155,   535,   834,   741,   150,   538,   148,  1041,
   142,   714,   842,   142,   482,   136,   141,   485,   147,   151,
   756,   627,   134,   629,  1056,   146,   141,    86,   873,   141,
   136,   876,   227,   148,   134,   230,   142,   505,   233,    98,
   646,   886,   374,   511,   239,   456,   457,   458,   133,   522,
   543,   625,   668,   138,   465,   142,   115,   136,   143,   133,
   147,   534,   136,   142,   538,   538,   682,   120,   279,  1057,
  1058,   482,   136,   484,  1062,   128,   129,   130,   142,    20,
    21,   879,   656,   494,   136,   496,   297,   741,   141,   151,
   142,   119,   890,   155,   505,   306,   307,   671,   309,   657,
   136,  1133,  1134,   136,   141,  1137,   142,   593,   133,   142,
   245,   522,   136,   136,   672,   136,   687,   133,   142,   142,
   657,   142,   134,   534,   456,   457,   458,   538,   973,   672,
   139,   266,   134,   869,   979,   672,   945,   120,   121,   198,
   522,  1173,   122,   131,  1176,   128,     0,  1135,   723,   284,
  1138,   139,   534,   141,   139,   133,   538,   120,   136,   134,
   148,   719,   494,   374,   496,   128,   129,   130,    22,   120,
   728,   134,    26,   433,    28,   534,   120,   136,   237,  1040,
   748,   441,   748,   142,   128,   129,   130,   120,   121,   760,
   522,   135,   251,   137,    48,   128,   133,   851,   136,   136,
   668,   141,   534,    57,   142,   494,   538,   496,    62,   133,
   737,   136,  1042,  1000,   682,   869,    70,   685,    72,  1003,
  1004,    75,   925,  1002,   138,   752,   753,   720,   133,  1005,
    84,   136,   564,   969,   805,    89,   127,   296,   433,  1006,
  1007,   714,   716,   716,   655,   141,   441,   101,  1008,  1009,
  1010,  1011,   136,   133,   449,   131,   136,   142,   142,   113,
   114,   136,   116,   139,   675,   141,   133,   142,   122,    96,
    97,    98,   148,   127,   128,   129,   136,   131,   132,   133,
   134,  1035,   142,   494,   136,   496,   133,  1012,  1013,   348,
  1014,  1015,   351,    96,    97,    98,   999,   141,   152,   905,
   763,   141,    96,   714,   363,   716,   136,  1120,   133,   134,
   133,   522,   142,   136,   141,   969,   120,   780,   136,  1132,
   147,   148,   176,   534,   383,   129,   461,   538,   135,   133,
   136,   794,   714,   137,   716,   136,   142,   141,   141,   143,
   138,   142,   701,   136,   147,   148,   150,   482,   133,   142,
   136,   136,   958,   147,   148,   825,   142,    62,  1171,  1172,
   136,   420,  1175,   141,   133,   897,   142,   136,   133,   133,
   505,   136,   136,   227,   945,   133,   230,   105,   136,   233,
   640,  1194,   714,  1196,   716,   239,   133,   134,   994,   800,
   996,   103,   104,   951,    17,    18,    19,    86,    87,    88,
   141,   733,   107,   108,   109,   110,   111,   112,   113,   114,
   115,   116,   266,   456,   457,   458,    99,   100,   141,   120,
   906,    92,    93,   277,   892,   141,   953,   128,   129,   130,
   284,   901,   286,   138,   141,   289,   137,   141,   924,  1045,
   141,   636,   143,   141,   238,   640,  1149,   301,   141,   150,
     5,     6,   925,   812,   308,   141,   515,   516,    18,   818,
   519,    41,   256,   522,   141,  1040,   135,   136,   800,   141,
    77,    78,    79,    80,    81,    22,    23,   177,   126,   179,
   180,   181,   141,   894,    91,    92,    93,   152,   135,   136,
   344,   153,   192,   193,   135,   136,   144,   197,   153,   154,
   200,   201,   154,   714,   134,   716,   986,   155,   103,   104,
   127,   800,    99,   100,   925,   135,   136,   120,   986,  1125,
   220,   135,   136,   993,   120,   105,   999,   135,   136,   999,
  1016,  1017,  1018,   668,   120,   141,   120,   117,   140,   120,
   120,   121,   135,   925,   124,   125,   126,   682,   128,   129,
   685,  1021,   142,   156,   134,   815,   135,   137,   135,   135,
   135,   141,   894,   134,   144,   145,   134,   147,   148,   141,
   929,   141,   141,   932,   154,   133,   133,  1148,   141,   433,
   146,   135,   141,  1157,   151,   138,   120,   441,   999,   800,
  1076,   120,   120,   925,   242,   449,   244,   297,   142,  1067,
   129,   129,   661,   131,   146,   894,   142,  1077,   137,   137,
   149,   127,   141,   141,   143,   143,   131,   999,  1145,   151,
   815,   150,   150,   135,   106,   120,  1200,   141,   482,   423,
   140,   485,   991,   142,   282,   139,   135,   137,   140,   140,
   494,   141,   496,   143,   703,   704,   346,   136,   148,   146,
   150,   505,   142,   136,   142,   135,   141,   511,   136,   120,
   134,   142,  1142,   136,   141,  1024,  1025,   999,    47,  1028,
  1029,   133,  1031,   136,  1142,   278,  1149,   141,   134,  1149,
   146,    30,   382,   894,   384,   385,   386,   387,   388,   389,
   390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
   400,   133,    45,   141,   141,   151,    82,   142,   142,   142,
  1180,   142,   136,   142,   925,   120,   146,   142,   512,   513,
   136,   136,   136,    25,    26,   136,   122,   136,   135,   142,
   142,   149,   432,   336,   142,   135,   142,   134,  1149,    41,
   142,   142,   133,   142,  1103,   149,    46,  1106,   142,  1108,
  1109,   141,   355,   142,   135,   358,   359,   360,   361,   362,
   819,   820,   365,   822,   141,   824,   134,  1149,   133,   142,
   142,   142,   133,   135,   377,    83,   140,   380,   134,   139,
    25,   120,   636,   146,   142,   120,   640,   142,   999,   848,
   142,   136,   149,    48,   142,  1154,   142,   134,   401,   149,
    41,   142,   142,   105,   134,   141,   506,   135,   142,   133,
   413,   133,   133,   461,   668,   418,   141,  1149,   120,   121,
   146,    90,   124,   125,   126,   142,   128,   129,   682,    70,
    41,   685,   134,   127,   482,   137,   142,   142,   141,   141,
   694,   489,   144,   145,   136,   142,   905,   142,   133,   151,
   121,   142,   154,   155,   142,   142,   158,   159,   135,   462,
   134,   142,   135,    28,   134,   141,   146,   105,   152,   105,
   664,   135,   931,   141,   133,   934,   935,    85,   136,   120,
   121,   122,   123,   124,   125,   126,    25,   535,   129,   141,
   136,   135,   135,   593,   105,   135,   135,   122,   546,   133,
   141,   122,   121,   135,   145,   142,   117,   555,   141,   120,
   121,   142,    41,   124,   125,   126,   142,   128,   129,   141,
   135,   134,   142,   134,   136,   142,   137,   530,   531,   532,
   141,   133,   535,   144,   145,   994,   147,   148,  1149,    89,
   141,   120,  1001,   154,   135,   142,   800,   136,   142,   128,
   129,   130,   133,   122,   142,   142,   134,   142,   137,     0,
  1019,   815,   141,     0,   143,  1067,  1142,   125,   667,   148,
    39,   150,   282,   277,  1033,   829,   105,   580,    75,   685,
   733,    49,  1040,   169,   728,   723,  1045,   687,   117,  1048,
   434,   120,   121,    41,   636,   124,   125,   126,   449,   128,
   129,   386,   964,  1050,   239,   134,   815,  1145,   137,   657,
    -1,    -1,   141,   367,    -1,   144,   145,    -1,    -1,    -1,
   668,    -1,    -1,   626,   672,   154,   120,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   128,   129,   130,    -1,   892,    -1,
   894,    -1,    -1,   137,    -1,    -1,    -1,   141,   748,   143,
    -1,    -1,   146,    -1,    -1,   658,   150,   105,    -1,    -1,
   760,    -1,   665,    -1,    -1,    -1,    -1,    -1,    -1,   117,
   673,    -1,   120,   121,    -1,    -1,   124,   125,   126,    -1,
   128,   129,    -1,    -1,    -1,    -1,   134,    -1,    -1,   137,
    -1,    -1,    -1,   141,    -1,   698,   144,   145,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   805,   154,    -1,    -1,    -1,
   713,    -1,    -1,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,   986,    -1,    24,    -1,    -1,    -1,   741,    -1,
    -1,   744,   745,    41,   747,    -1,    -1,    37,    38,    39,
    40,    -1,    42,   756,    -1,    -1,   759,    -1,    -1,   807,
    50,   120,    -1,    -1,    -1,    55,    -1,    -1,    -1,   128,
   129,   130,   131,    63,    64,    65,    -1,    -1,   137,    -1,
    -1,    -1,   141,    -1,   143,    75,    -1,    -1,    -1,    -1,
    -1,   150,    -1,    -1,    -1,   843,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   903,    94,    95,   906,   105,    -1,    -1,
    -1,    -1,    -1,  1067,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   120,   121,   924,    -1,   124,   125,   126,    -1,
   128,   129,    -1,   881,    -1,    -1,   134,   127,   128,   137,
   130,   131,    -1,   141,   134,   945,   144,   145,   851,   897,
    -1,    -1,    -1,    -1,   144,   145,   154,    41,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   869,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1142,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
  1000,    -1,  1002,  1003,  1004,  1005,  1006,  1007,  1008,  1009,
  1010,  1011,  1012,  1013,  1014,  1015,  1016,  1017,  1018,    -1,
    -1,   105,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,    -1,    -1,
   124,   125,   126,    -1,   128,   129,    -1,    -1,    -1,    -1,
   134,    -1,    -1,   137,    -1,    -1,    -1,   141,    -1,    -1,
   144,   145,    -1,    -1,    -1,    -1,   969,    -1,    -1,    -1,
   154,    -1,    -1,    -1,    -1,    -1,  1076,    -1,    -1,    -1,
    -1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    -1,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    -1,    -1,    -1,    -1,    49,    50,
    51,    52,  1035,    -1,    55,    56,    57,    58,    59,    60,
    61,    -1,    63,    64,    65,    66,    -1,    -1,  1148,    70,
    -1,    -1,    73,    74,    75,    76,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    94,    95,    -1,    97,    98,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,
   121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,    -1,    -1,   137,    -1,    -1,    -1,
   141,    -1,    -1,   144,   145,    -1,    -1,    -1,    -1,    -1,
   151,    -1,    -1,   154,   155,    -1,    -1,   158,   159,     3,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
    24,    25,    26,    27,    -1,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    -1,    -1,    -1,    -1,    49,    50,    51,    52,    -1,
    -1,    55,    56,    57,    58,    59,    60,    61,    -1,    63,
    64,    65,    66,    -1,    -1,    -1,    70,    -1,    -1,    73,
    74,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    94,    95,    -1,    97,    98,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
   134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,    -1,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,    -1,    -1,
   154,   155,    -1,    -1,   158,   159,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    -1,    -1,    24,    25,    26,
    27,    -1,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    -1,    -1,
    -1,    -1,    49,    50,    51,    52,    -1,    -1,    55,    56,
    57,    58,    59,    60,    61,    -1,    63,    64,    65,    66,
    -1,    -1,    -1,    70,    -1,    -1,    73,    74,    75,    76,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    -1,
    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,    -1,    -1,
   137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,    -1,
    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,    -1,
    -1,   158,   159,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    -1,    -1,    24,    25,    26,    27,    -1,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    -1,    -1,    -1,    -1,    49,
    50,    51,    52,    -1,    -1,    55,    56,    57,    58,    59,
    60,    61,    -1,    63,    64,    65,    66,    -1,    -1,    -1,
    70,    -1,    -1,    73,    74,    75,    76,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    -1,    97,    98,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,    -1,    -1,   137,    -1,    -1,
    -1,   141,    -1,    -1,   144,   145,    -1,    -1,    -1,    -1,
    -1,   151,    -1,    -1,   154,   155,    -1,    -1,   158,   159,
     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    -1,
    -1,    24,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    37,    38,    39,    40,    41,    42,
    43,    -1,    -1,    -1,    -1,    -1,    49,    50,    -1,    -1,
    -1,    -1,    55,    -1,    57,    58,    59,    60,    61,    -1,
    63,    64,    65,    66,    -1,    -1,    -1,    70,    -1,    -1,
    73,    74,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    94,    95,    -1,    97,    98,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,    -1,
    -1,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,    -1,
    -1,   154,   155,    -1,    -1,   158,   159,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    -1,    -1,    24,    25,
    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    37,    38,    39,    40,    41,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    55,
    -1,    57,    58,    59,    60,    61,    -1,    63,    64,    -1,
    -1,    -1,    -1,    -1,    70,    -1,    -1,    73,    74,    75,
    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
    -1,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,    -1,    -1,    -1,
    -1,   137,    -1,    -1,    -1,   141,    -1,    -1,   144,   145,
    -1,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
    -1,    -1,   158,   159,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
    -1,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    37,    38,    39,    40,    41,    -1,    43,
    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,
    -1,    55,    -1,    57,    58,    59,    60,    61,    -1,    63,
    64,    -1,    66,    -1,    -1,    -1,    70,    -1,    -1,    73,
    74,    75,    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    94,    95,    -1,    97,    98,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,   123,
   124,   125,   126,   127,   128,   129,   130,   131,   132,    -1,
   134,    -1,    -1,   137,    -1,    -1,    -1,   141,    -1,    -1,
   144,   145,    -1,    -1,    -1,    -1,    -1,   151,    -1,    -1,
   154,   155,    -1,    -1,   158,   159,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    -1,    -1,    -1,    25,    26,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    37,    38,    39,    40,    41,
    -1,    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,
    -1,    -1,    -1,    55,    -1,    57,    58,    59,    60,    61,
    -1,    63,    64,    -1,    66,    -1,    -1,    -1,    70,    -1,
    -1,    73,    74,    75,    76,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    94,    95,    -1,    97,    98,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,
    -1,    -1,   144,   145,    -1,    -1,    -1,    -1,    -1,   151,
    -1,    -1,   154,   155,    -1,    -1,   158,   159,     0,     1,
    -1,     3,     4,     5,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    37,    38,    39,    40,    -1,
    42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,
    -1,    53,    54,    55,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    63,    64,    65,    -1,    -1,    68,    69,    -1,    71,
    72,    -1,    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,
    -1,    -1,    -1,    -1,    -1,   127,   128,   129,   130,   131,
    -1,    -1,    -1,   135,    -1,   137,    -1,    -1,    -1,   141,
    -1,   143,   144,   145,    -1,    -1,     0,     1,   150,     3,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    37,    38,    39,    40,    -1,    42,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    53,
    54,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
    64,    65,    -1,    -1,    68,    69,    -1,    71,    72,    -1,
    -1,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,
    -1,    -1,    -1,   127,   128,   129,   130,   131,    -1,    -1,
    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,    -1,   143,
   144,   145,    -1,    -1,    -1,     1,   150,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    -1,    -1,    24,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    37,    38,    39,    40,    -1,    42,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    50,    -1,    -1,    53,    54,    55,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,    64,    65,
    -1,    -1,    68,    69,    -1,    71,    72,    -1,    -1,    75,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,    -1,
    -1,   127,   128,   129,   130,   131,    -1,    -1,    -1,   135,
    -1,   137,    -1,    -1,    -1,   141,    -1,   143,   144,   145,
    -1,    -1,    -1,    -1,   150,     3,     4,     5,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
    18,    19,    20,    21,    -1,    -1,    24,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,
    38,    39,    40,    -1,    42,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    50,    25,    26,    -1,    -1,    55,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    63,    64,    65,    40,    41,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    57,    58,    59,    60,    61,
    -1,    -1,    -1,    -1,    -1,    -1,    94,    95,    70,    -1,
    -1,    73,    74,    -1,    76,    -1,    -1,    -1,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    -1,    -1,    -1,    97,    98,    -1,    -1,   127,
   128,    -1,   130,   131,    -1,    -1,   134,    37,    38,    39,
   138,    -1,    -1,    -1,    -1,    -1,   144,   145,   120,   121,
   122,   123,   124,   125,   126,    55,    -1,   129,    -1,    -1,
   132,    -1,   134,    63,    64,   137,    -1,    -1,    -1,   141,
    -1,    -1,    -1,   145,    -1,    75,    -1,    -1,    -1,   151,
    -1,    -1,   154,   155,    -1,    -1,   158,   159,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,
   120,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,   129,
   130,   131,    -1,   133,    -1,    -1,    -1,   137,    -1,    -1,
    -1,   141,    -1,   143,   144,   145,    -1,    -1,   148,    -1,
   150,     3,     4,     5,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    37,    38,    39,    40,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,
    -1,    -1,    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    75,    -1,    -1,    -1,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    -1,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    55,   127,   128,    -1,   130,   131,
    -1,    -1,    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   144,   145,    75,    -1,    -1,    -1,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    -1,    94,    95,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    38,    39,
    -1,    -1,    -1,    -1,    -1,    -1,   117,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    55,   127,   128,    -1,   130,
   131,    -1,   133,    63,    64,    -1,   137,    -1,    -1,    -1,
   141,    -1,   143,   144,   145,    75,    -1,   148,    -1,   150,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
   120,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,   129,
   130,   131,    -1,    37,    38,    39,    -1,   137,    -1,    -1,
    -1,   141,    -1,   143,   144,   145,    -1,    -1,    -1,    -1,
   150,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    75,    -1,    -1,    -1,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    -1,
    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    37,    38,    39,    -1,    -1,    -1,
    -1,    -1,    -1,   117,    -1,    -1,   120,    -1,    -1,    -1,
    -1,    -1,    55,   127,   128,    -1,   130,   131,    -1,   133,
    63,    64,    -1,    -1,    67,    -1,    -1,    -1,    -1,    -1,
   144,   145,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   127,   128,    -1,   130,   131,    -1,
    -1,   134,    37,    38,    39,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   145,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,    64,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    75,    -1,    -1,    -1,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    -1,    94,
    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    37,    38,    39,    -1,    -1,    -1,    -1,
    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    55,   127,   128,    -1,   130,   131,    -1,   133,    63,
    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,
   145,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   127,   128,    -1,   130,   131,    37,    38,
    39,   135,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   144,   145,    -1,    -1,    -1,    -1,    55,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    63,    64,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    75,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    94,    95,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   127,   128,
    -1,   130,   131,    37,    38,    39,   135,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   144,   145,    -1,    -1,    -1,
    -1,    55,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    63,
    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    75,    -1,    -1,    -1,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    -1,
    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    37,    38,    39,    -1,    -1,    -1,
    -1,    -1,    -1,   117,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    55,   127,   128,    -1,   130,   131,    -1,    -1,
    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   144,   145,    75,    -1,    -1,    -1,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    -1,    94,    95,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    37,    38,    39,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    55,   127,   128,    -1,   130,   131,    -1,
    -1,    63,    64,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   144,   145,    75,    -1,    -1,    -1,    -1,    -1,    25,
    26,    27,    -1,    29,    30,    31,    32,    33,    34,    35,
    36,    -1,    94,    95,    40,    41,    -1,    43,    44,    -1,
    -1,    -1,    -1,    49,    -1,    51,    52,    -1,    -1,    -1,
    56,    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,
    66,    -1,    -1,    -1,    70,   127,    -1,    73,    74,   131,
    76,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   144,   145,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    97,    98,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   120,   121,   122,   123,   124,   125,
   126,    -1,    -1,   129,    -1,    -1,   132,   133,   134,    -1,
    -1,   137,    -1,    -1,    -1,   141,    -1,    -1,    -1,   145,
    25,    26,    -1,    -1,    -1,   151,    -1,    32,   154,   155,
    -1,    -1,   158,   159,    -1,    40,    41,    -1,    43,    -1,
    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    57,    58,    59,    60,    61,    -1,    -1,    -1,
    -1,    66,    25,    26,    -1,    70,    -1,    -1,    73,    74,
    -1,    76,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,
    -1,    -1,    97,    98,    57,    58,    59,    60,    61,    -1,
    -1,    -1,    -1,    66,    -1,    -1,    -1,    70,    -1,    -1,
    73,    74,    -1,    76,    -1,   120,   121,   122,   123,   124,
   125,   126,    -1,   128,   129,    -1,    -1,   132,    -1,   134,
   135,    -1,   137,    -1,    97,    98,   141,    -1,    -1,    -1,
   145,    -1,   147,   148,    -1,    -1,   151,    -1,    -1,   154,
   155,    -1,    -1,   158,   159,    -1,    -1,   120,   121,   122,
   123,   124,   125,   126,    -1,   128,   129,    -1,    -1,   132,
    -1,   134,   135,    -1,   137,    -1,    -1,    -1,   141,    -1,
    -1,    -1,   145,    -1,   147,   148,    25,    26,   151,    -1,
    -1,   154,   155,    -1,    -1,   158,   159,    -1,    -1,    -1,
    -1,    40,    41,    -1,    43,    -1,    -1,    -1,    -1,    -1,
    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,    58,
    59,    60,    61,    -1,    -1,    -1,    -1,    66,    25,    26,
    -1,    70,    -1,    -1,    73,    74,    -1,    76,    -1,    -1,
    -1,    -1,    -1,    40,    41,    -1,    43,    -1,    -1,    -1,
    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    97,    98,
    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,    66,
    -1,    -1,    -1,    70,    -1,    -1,    73,    74,    -1,    76,
    -1,   120,   121,   122,   123,   124,   125,   126,    -1,   128,
   129,    -1,    -1,   132,    -1,   134,   135,    -1,   137,    -1,
    97,    98,   141,    -1,    -1,    -1,   145,    -1,   147,   148,
    -1,    -1,   151,    -1,    -1,   154,   155,    -1,    -1,   158,
   159,    -1,    -1,   120,   121,   122,   123,   124,   125,   126,
    -1,   128,   129,    -1,    -1,   132,    -1,   134,   135,    -1,
   137,    -1,    -1,    -1,   141,    -1,    -1,    -1,   145,    -1,
   147,   148,    25,    26,   151,    -1,    -1,   154,   155,    -1,
    -1,   158,   159,    -1,    -1,    -1,    -1,    40,    41,    -1,
    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    57,    58,    59,    60,    61,    -1,
    -1,    -1,    -1,    66,    25,    26,    -1,    70,    -1,    -1,
    73,    74,    -1,    76,    -1,    -1,    -1,    -1,    -1,    40,
    41,    -1,    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,
    -1,    -1,    -1,    -1,    97,    98,    57,    58,    59,    60,
    61,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    70,
    -1,    -1,    73,    74,    -1,    76,    -1,   120,   121,   122,
   123,   124,   125,   126,    -1,   128,   129,    -1,    -1,   132,
    -1,   134,    -1,    -1,   137,    -1,    97,    98,   141,    -1,
    -1,    -1,   145,    -1,   147,   148,    -1,    -1,   151,    -1,
    -1,   154,   155,    -1,    -1,   158,   159,    -1,    -1,   120,
   121,   122,   123,   124,   125,   126,    -1,    -1,   129,    -1,
    -1,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,
   141,    -1,    -1,    -1,   145,    25,    26,    -1,   149,    -1,
   151,    -1,    -1,   154,   155,    -1,    -1,   158,   159,    -1,
    40,    41,    -1,    43,    -1,    -1,    -1,    -1,    -1,    49,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,    58,    59,
    60,    61,    -1,    -1,    -1,    -1,    66,    25,    26,    -1,
    70,    -1,    -1,    73,    74,    -1,    76,    -1,    -1,    -1,
    -1,    -1,    40,    41,    -1,    43,    -1,    -1,    -1,    -1,
    -1,    49,    -1,    -1,    -1,    -1,    -1,    97,    98,    57,
    58,    59,    60,    61,    -1,    -1,    -1,    -1,    66,    -1,
    -1,    -1,    70,    -1,    -1,    73,    74,    -1,    76,    -1,
   120,   121,   122,   123,   124,   125,   126,    -1,    -1,   129,
    -1,    -1,   132,    -1,   134,    -1,    -1,   137,    -1,    97,
    98,   141,    -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,
    -1,   151,    -1,    -1,   154,   155,    -1,    -1,   158,   159,
    -1,    -1,   120,   121,   122,   123,   124,   125,   126,    -1,
    -1,   129,    -1,    -1,   132,   133,    -1,    -1,    -1,   137,
    -1,    -1,    -1,   141,    -1,    -1,    -1,   145,    25,    26,
    -1,    -1,    -1,   151,    -1,    -1,   154,   155,    -1,    -1,
   158,   159,    -1,    40,    41,    -1,    43,    -1,    -1,    -1,
    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,    66,
    25,    26,    -1,    70,    -1,    -1,    73,    74,    -1,    76,
    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    -1,
    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,
    97,    98,    57,    58,    59,    60,    61,    -1,    -1,    -1,
    -1,    66,    -1,    -1,    -1,    70,    -1,    -1,    73,    74,
    -1,    76,    -1,   120,   121,   122,   123,   124,   125,   126,
    -1,    -1,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,
   137,    -1,    97,    98,   141,   142,    -1,    -1,   145,    -1,
    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,    -1,
    -1,   158,   159,    -1,    -1,   120,   121,   122,   123,   124,
   125,   126,    -1,    -1,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,   137,    -1,    -1,    -1,   141,    -1,    -1,    -1,
   145,    25,    26,    -1,   149,    -1,   151,    -1,    -1,   154,
   155,    -1,    -1,   158,   159,    -1,    40,    41,    -1,    43,
    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    57,    58,    59,    60,    61,    -1,    -1,
    -1,    -1,    66,    25,    26,    -1,    70,    -1,    -1,    73,
    74,    -1,    76,    -1,    -1,    -1,    -1,    -1,    40,    41,
    -1,    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,
    -1,    -1,    -1,    97,    98,    57,    58,    59,    60,    61,
    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    70,    -1,
    -1,    73,    74,    -1,    76,    -1,   120,   121,   122,   123,
   124,   125,   126,    -1,    -1,   129,    -1,    -1,   132,    -1,
    -1,    -1,    -1,   137,    -1,    97,    98,   141,   142,    -1,
    -1,   145,    -1,    -1,    -1,    -1,    -1,   151,    -1,    -1,
   154,   155,    -1,    -1,   158,   159,    -1,    -1,   120,   121,
   122,   123,   124,   125,   126,    -1,    -1,   129,    -1,    -1,
   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,
    -1,    -1,    -1,   145,    25,    26,    -1,   149,    -1,   151,
    -1,    -1,   154,   155,    -1,    -1,   158,   159,    -1,    40,
    41,    -1,    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    57,    58,    59,    60,
    61,    -1,    -1,    -1,    -1,    66,    25,    26,    -1,    70,
    -1,    -1,    73,    74,    -1,    76,    -1,    -1,    -1,    -1,
    -1,    40,    41,    -1,    43,    -1,    -1,    -1,    -1,    -1,
    49,    -1,    -1,    -1,    -1,    -1,    97,    98,    57,    58,
    59,    60,    61,    -1,    -1,    -1,    -1,    66,    -1,    -1,
    -1,    70,    -1,    -1,    73,    74,    -1,    76,    -1,   120,
   121,   122,   123,   124,   125,   126,    -1,    -1,   129,    -1,
    -1,   132,    -1,    -1,    -1,    -1,   137,    -1,    97,    98,
   141,    -1,    -1,    -1,   145,    -1,    -1,    -1,   149,    -1,
   151,    -1,    -1,   154,   155,    -1,    -1,   158,   159,    -1,
    -1,   120,   121,   122,   123,   124,   125,   126,    -1,    -1,
   129,    -1,    -1,   132,   133,    -1,    -1,    -1,   137,    -1,
    -1,    -1,   141,    -1,    -1,    -1,   145,    25,    26,    -1,
    -1,    -1,   151,    -1,    -1,   154,   155,    -1,    -1,   158,
   159,    -1,    40,    41,    -1,    43,    -1,    -1,    -1,    -1,
    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,
    58,    59,    60,    61,    -1,    -1,    -1,    -1,    66,    25,
    26,    -1,    70,    -1,    -1,    73,    74,    -1,    76,    -1,
    -1,    -1,    -1,    -1,    40,    41,    -1,    43,    -1,    -1,
    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    97,
    98,    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,
    66,    -1,    -1,    -1,    70,    -1,    -1,    73,    74,    -1,
    76,    -1,   120,   121,   122,   123,   124,   125,   126,    -1,
    -1,   129,    -1,    -1,   132,   133,    -1,    -1,    -1,   137,
    -1,    97,    98,   141,    -1,    -1,    -1,   145,    -1,    -1,
    -1,    -1,    -1,   151,    -1,    -1,   154,   155,    -1,    -1,
   158,   159,    -1,    -1,   120,   121,   122,   123,   124,   125,
   126,    -1,    -1,   129,    -1,    -1,   132,    -1,    -1,    -1,
    -1,   137,    -1,    -1,    -1,   141,   142,    -1,    -1,   145,
    25,    26,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
    -1,    -1,   158,   159,    -1,    40,    41,    -1,    43,    -1,
    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    57,    58,    59,    60,    61,    -1,    -1,    -1,
    -1,    66,    25,    26,    -1,    70,    -1,    -1,    73,    74,
    -1,    76,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,
    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,
    -1,    -1,    97,    98,    57,    58,    59,    60,    61,    -1,
    -1,    -1,    -1,    66,    -1,    -1,    -1,    70,    -1,    -1,
    73,    74,    -1,    76,    -1,   120,   121,   122,   123,   124,
   125,   126,    -1,    -1,   129,    -1,    -1,   132,    -1,    -1,
    -1,    -1,   137,    -1,    97,    98,   141,   142,    -1,    -1,
   145,    -1,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,
   155,    -1,    -1,   158,   159,    -1,    -1,   120,   121,   122,
   123,   124,   125,   126,    -1,    -1,   129,    -1,    -1,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,
    -1,    -1,   145,    25,    26,    -1,    -1,    -1,   151,    -1,
    -1,   154,   155,    -1,    -1,   158,   159,    -1,    40,    41,
    -1,    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    57,    58,    59,    60,    61,
    -1,    -1,    -1,    -1,    66,    25,    26,    -1,    70,    -1,
    -1,    73,    74,    -1,    76,    -1,    -1,    -1,    -1,    -1,
    40,    41,    -1,    43,    -1,    -1,    -1,    -1,    -1,    49,
    -1,    -1,    -1,    -1,    -1,    97,    98,    57,    58,    59,
    60,    61,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,
    70,    -1,    -1,    73,    74,    -1,    76,    -1,   120,   121,
   122,   123,   124,   125,   126,    -1,    -1,   129,    -1,    -1,
   132,   133,    -1,    -1,    -1,   137,    -1,    97,    98,   141,
    -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,   151,
    -1,    -1,   154,   155,    -1,    -1,   158,   159,    -1,    -1,
   120,   121,   122,   123,   124,   125,   126,    -1,    -1,   129,
    -1,    -1,   132,    -1,    -1,    -1,    -1,   137,    -1,    -1,
    -1,   141,   142,    -1,    -1,   145,    25,    26,    -1,    -1,
    -1,   151,    -1,    -1,   154,   155,    -1,    -1,   158,   159,
    -1,    40,    41,    -1,    43,    -1,    -1,    -1,    -1,    -1,
    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    57,    58,
    59,    60,    61,    -1,    -1,    -1,    -1,    66,    25,    26,
    -1,    70,    -1,    -1,    73,    74,    -1,    76,    -1,    -1,
    -1,    -1,    -1,    40,    41,    -1,    43,    -1,    -1,    -1,
    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    97,    98,
    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,    66,
    -1,    -1,    -1,    70,    -1,    -1,    73,    74,    -1,    76,
    -1,   120,   121,   122,   123,   124,   125,   126,    -1,    -1,
   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,   137,    -1,
    97,    98,   141,   142,    -1,    -1,   145,    -1,    -1,    -1,
    -1,    -1,   151,    -1,    -1,   154,   155,    -1,    -1,   158,
   159,    -1,    -1,   120,   121,   122,   123,   124,   125,   126,
    -1,    -1,   129,    -1,    -1,   132,    -1,    -1,    -1,    -1,
   137,    -1,    -1,    -1,   141,   142,    -1,    -1,   145,    25,
    26,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,    -1,
    -1,   158,   159,    -1,    40,    41,    -1,    43,    -1,    -1,
    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    57,    58,    59,    60,    61,    -1,    -1,    -1,    -1,
    66,    25,    26,    -1,    70,    -1,    -1,    73,    74,    -1,
    76,    -1,    -1,    -1,    -1,    -1,    40,    41,    -1,    43,
    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,    -1,
    -1,    97,    98,    57,    58,    59,    60,    61,    -1,    -1,
    -1,    -1,    66,    -1,    -1,    -1,    70,    -1,    -1,    73,
    74,    -1,    76,    -1,   120,   121,   122,   123,   124,   125,
   126,    -1,    -1,   129,    -1,    -1,   132,    -1,    -1,    -1,
    -1,   137,    -1,    97,    98,   141,   142,    -1,    -1,   145,
    -1,    -1,    -1,    -1,    -1,   151,    -1,    -1,   154,   155,
    -1,    -1,   158,   159,    -1,    -1,   120,   121,   122,   123,
   124,   125,   126,    -1,    -1,   129,    -1,    -1,   132,    -1,
    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,   142,    -1,
    -1,   145,    25,    26,    -1,    -1,    -1,   151,    -1,    -1,
   154,   155,    -1,    -1,   158,   159,    -1,    40,    41,    -1,
    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    57,    58,    59,    60,    61,    -1,
    -1,    -1,    -1,    66,    25,    26,    -1,    70,    -1,    -1,
    73,    74,    -1,    76,    -1,    -1,    -1,    -1,    -1,    40,
    41,    -1,    43,    -1,    -1,    -1,    -1,    -1,    49,    -1,
    -1,    -1,    -1,    -1,    97,    98,    57,    58,    59,    60,
    61,    -1,    -1,    -1,    -1,    66,    -1,    -1,    -1,    70,
    -1,    -1,    73,    74,    -1,    76,    -1,   120,   121,   122,
   123,   124,   125,   126,    -1,    -1,   129,    -1,    -1,   132,
    -1,    -1,    -1,    -1,   137,    -1,    97,    98,   141,    -1,
    -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,   151,    -1,
    -1,   154,   155,    -1,    -1,   158,   159,    -1,    -1,   120,
   121,   122,   123,   124,   125,   126,    -1,    -1,   129,    -1,
    -1,   132,    25,    26,    -1,    -1,   137,    -1,    -1,    -1,
   141,    -1,    -1,    -1,   145,    -1,    -1,    40,    41,    -1,
   151,    -1,    -1,   154,   155,    -1,    -1,   158,   159,    -1,
    -1,    -1,    -1,    -1,    57,    58,    59,    60,    61,    -1,
    -1,    -1,    -1,    -1,    25,    26,    -1,    70,    -1,    -1,
    73,    74,    -1,    76,    -1,    -1,    -1,    -1,    -1,    40,
    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    97,    98,    57,    58,    59,    60,
    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    -1,    -1,    73,    74,    -1,    76,    -1,   120,   121,   122,
   123,   124,   125,   126,    -1,    -1,   129,    -1,    -1,   132,
    -1,   134,    -1,    -1,   137,    -1,    97,    98,   141,    -1,
    -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,   151,    -1,
    -1,   154,   155,    -1,    -1,   158,   159,    -1,    -1,   120,
   121,   122,   123,   124,   125,   126,    -1,    -1,   129,    -1,
    -1,   132,    25,    26,    -1,    -1,   137,    -1,    -1,    -1,
   141,    -1,    -1,    -1,   145,    -1,    -1,    40,    41,    -1,
   151,    -1,    -1,   154,   155,    -1,    -1,   158,   159,    -1,
    -1,    -1,    -1,    -1,    57,    58,    59,    60,    61,    -1,
    -1,    -1,    -1,    -1,    25,    26,    -1,    70,    -1,    -1,
    73,    74,    -1,    76,    -1,    -1,    -1,    -1,    -1,    40,
    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    97,    98,    57,    58,    59,    60,
    61,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    -1,    -1,    73,    74,    -1,    76,    -1,   120,   121,   122,
   123,   124,   125,   126,    -1,    -1,   129,    -1,    -1,   132,
    -1,    -1,    -1,    -1,   137,    -1,    97,    98,   141,    -1,
    -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,   151,    -1,
    -1,   154,   155,    -1,    -1,   158,   159,    -1,    -1,   120,
   121,   122,   123,   124,   125,   126,    -1,    -1,   129,    -1,
    -1,   132,    25,    26,    -1,    -1,   137,    -1,    -1,    -1,
   141,    -1,    -1,    -1,   145,    -1,    -1,    40,    41,    -1,
   151,    -1,    -1,   154,   155,    -1,    -1,   158,   159,    -1,
    -1,    -1,    -1,    -1,    57,    58,    59,    60,    61,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,
    73,    74,    -1,    76,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    97,    98,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   120,   121,   122,
   123,   124,   125,   126,    -1,    -1,   129,    -1,    -1,   132,
    -1,    -1,    -1,    -1,   137,    -1,    -1,    -1,   141,    -1,
    -1,    -1,   145,    -1,    -1,    -1,    -1,    -1,   151,    -1,
    -1,   154,   155,    -1,    -1,   158,   159
};
#define YYPURE 1

#line 1 "cycbison.simple"
/* This is a (simple) skeleton parser engine for Cyclone, adapted from
 * GNU bison's bison.simple parser engine.  The copyright information for
 * GNU bison is below.
 */
/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

/* JGM: I've cut out the stuff that allows for re-entrant parsers because
 * we need to do things slightly differently.  For example, yylex() should
 * return a tuple of the token code, the yylval, and the yylloc instead of
 * mutating global variables...
 */

/* Dan: Do not define YYERROR_VERBOSE -- it has not been ported */

datatype exn {Yystack_overflow(int)}; // thrown if the parsing stack overflows
datatype exn.Yystack_overflow Yystack_overflow_val = Yystack_overflow(0);

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		throw(Yyerror) 
#define YYFAIL		throw(Yyerror)
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


extern void yyerror(const char ?,int state,int token);

/* The user can define YYLEX_PARAM_ARG for the prototype to yylex 
 * and YYLEX_ARG for the actual argument to yylex -- typically
 * this will be some part of YYPARSE_PARAM_ARG.
 */
#ifndef YYLEX_PARAM_ARG
#define YYLEX_PARAM_ARG
#define YYLEX_ARG
#endif
extern int yylex(YYLEX_PARAM_ARG);


#ifndef YYPURE
/*  the lookahead symbol */
static int yychar = '\000';       
/* semantic value of lookahead symbol */
union YYSTYPE yylval = {.YYINITIALSVAL = 0};
/*  number of parse errors so far */
static int yynerrs = 0;
#endif

#if YYDEBUG
 bool yydebug = true;	/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/*  sanity check */

#if YYINITDEPTH > YYMAXDEPTH
#undef YYINITDEPTH
#define YYINITDEPTH YYMAXDEPTH
#endif

/* The user can define YYPARSE_PARAM as a set of arguments to be passed
   into yyparse.  Grammar actions can access the variables.
 */
#ifndef YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_ARG 
#endif

#ifndef YYSTYPEVARS
#define YYSTYPEVARS
#endif

struct Yystacktype YYSTYPEVARS {
  union YYSTYPE YYSTYPEVARS v;
#ifdef YYLSP_NEEDED
  YYLTYPE       l;
#endif
};

/* If type variables (e.g., regions) are used with YYSTYPE this
   will already be set.
*/
int yyparse(YYPARSE_PARAM_ARG)
{
  // the arrays are allocated in this region
region yyregion; {
  int yystate;
  int yyn=0;
  int yyerrstatus;//  number of tokens to shift before error messages enabled 
  int yychar1 = 0;//  lookahead token as an internal (translated) token number 
#ifdef YYPURE
  int yychar;
  union YYSTYPE YYSTYPEVARS yylval = {.YYINITIALSVAL = 0};
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  int yyssp_offset;
  /*  the state stack     */
  short ?yyss = rcalloc(yyregion, YYINITDEPTH, sizeof(short));
  /*  the semantic value stack */
  int yyvsp_offset;
#ifdef YYLSP_NEEDED
  struct Yystacktype ? yyvs = 
    rnew(yyregion) {for i < YYINITDEPTH : Yystacktype(yylval,yynewloc())}; 
#else
  struct Yystacktype ? yyvs = 
    rnew(yyregion) {for i < YYINITDEPTH : Yystacktype(yylval)}; 
#endif
  struct Yystacktype @{YYMAXRULELENGTH }yyyvsp;
#define YYPOPSTACK   (yyvsp_offset--, yyssp_offset--)

  int yystacksize = YYINITDEPTH;

  union YYSTYPE yyval = yylval;/* the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug) 
    fprintf(stderr,"Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp_offset = -1;
  yyvsp_offset = 0;

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  yyss[++yyssp_offset] = (short)yystate;

  if (yyssp_offset >= (yystacksize-1) - YYMAXRULELENGTH) { 
    // grow the stacks
    if (yystacksize >= YYMAXDEPTH) {
      yyerror("parser stack overflow",yystate,yychar);
      throw &Yystack_overflow_val;
    }
    yystacksize *= 2;
    if (yystacksize > YYMAXDEPTH)
      yystacksize = YYMAXDEPTH;
    short ?yyss1 = rnew(yyregion) {for i < yystacksize : 
				   (i <= yyssp_offset ? yyss[i] : 0)};
#ifdef YYLSP_NEEDED
    struct Yystacktype ? yyvs1 = 
      rnew(yyregion) {for i < yystacksize :
		      (i <= yyssp_offset ? yyvs[i] : yyvs[0])};
#else
    struct Yystacktype ? yyvs1 = 
      rnew(yyregion) {for i < yystacksize : 
		      (i <= yyssp_offset ? yyvs[i] : yyvs[0])};
#endif
    yyss = yyss1;
    yyvs = yyvs1;
  }
    
#if YYDEBUG != 0
  if (yydebug) {
    fprintf(stderr,"Entering state %d\n",yystate);
  }
#endif

  goto yybackup;

yybackup:

  //#ifdef YYLSP_NEEDED
  //  yylloc = yycopyloc(yylloc);
  //#endif

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG) goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */
  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr,"Reading a token: ");
#endif
      yychar = yylex(YYLEX_ARG);
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */
  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr,"Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf(stderr,"Next token is %d (%s",yychar,yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */

#ifdef YYPRINT
	  YYPRINT (yychar, yylval);
#endif
	  fprintf(stderr,")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1) goto yydefault;

  yyn = yytable[yyn];
  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */
  if (yyn < 0)
    {
      if (yyn == YYFLAG) goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0) goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr,"Shifting token %d (%s), ",yychar,yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

#ifdef YYLSP_NEEDED
  yyvs[++yyvsp_offset] = Yystacktype(yylval,yylloc);
#else  
  yyvs[++yyvsp_offset] = Yystacktype(yylval);
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus != 0) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0) goto yyerrlab;
  // fallthru to yyreduce

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:

  yylen = yyr2[yyn];
  yyyvsp=(_@{YYMAXRULELENGTH})(yyvs + (yyvsp_offset + 1 - yylen));
  if (yylen > 0)
    yyval = yyyvsp[0].v; /* implement default value of the action */
#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf(stderr,"Reducing via rule %d (line %d), ",yyn,yyrline[yyn]);
      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf(stderr,"%s ",yytname[yyrhs[i]]);
      fprintf(stderr," -> %s\n",yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 1:
#line 1226 "src/parse.y"
 yyval = (yyyvsp[0].v);
      parse_result =  yyget_YY16(&yyyvsp[0].v);
    
break;
case 2:
#line 1232 "src/parse.y"
 yyval=YY16(List::imp_append( yyget_YY16(&yyyvsp[0].v), yyget_YY16(&yyyvsp[1].v))); 
break;
case 3:
#line 1236 "src/parse.y"
 yyval=YY16(new List(new Decl(new Using_d( yyget_QualId_tok(&yyyvsp[0].v), yyget_YY16(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[2].l)),NULL));
      Lex::leave_using();
    
break;
case 4:
#line 1240 "src/parse.y"
 yyval=YY16(new List(new Decl(new Using_d( yyget_QualId_tok(&yyyvsp[0].v), yyget_YY16(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[3].l)), yyget_YY16(&yyyvsp[4].v))); 
break;
case 5:
#line 1243 "src/parse.y"
 yyval=YY16(new List(new Decl(new Namespace_d(new  yyget_String_tok(&yyyvsp[0].v), yyget_YY16(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[2].l)),NULL));
      Lex::leave_namespace();
    
break;
case 6:
#line 1247 "src/parse.y"
 yyval=YY16(new List(new Decl(new Namespace_d(new  yyget_String_tok(&yyyvsp[0].v), yyget_YY16(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[3].l)), yyget_YY16(&yyyvsp[4].v))); 
break;
case 7:
#line 1249 "src/parse.y"
 let is_c_include =  yyget_YY31(&yyyvsp[0].v);
      list_t<decl_t> cycdecls =  yyget_YY16(&yyyvsp[4].v);
      let &$(exs, wc) =  yyget_YY53(&yyyvsp[5].v);
      let hides =  yyget_YY54(&yyyvsp[6].v);
      if(exs != NULL && hides != NULL) {
	Warn::err(LOC(yyyvsp[0].l,yyyvsp[1].l), "hide list can only be used with export { * }, or no export block");
      }
      if(hides && !wc) {
	wc = SLOC(yyyvsp[6].l);
      }
      if (!is_c_include) {
	if (exs != NULL || cycdecls != NULL) {
	  Warn::err(LOC(yyyvsp[0].l,yyyvsp[1].l),"expecting \"C include\"");
	  yyval=YY16(new List(new Decl(new ExternCinclude_d( yyget_YY16(&yyyvsp[2].v),cycdecls,exs,new $(wc, hides)),LOC(yyyvsp[0].l,yyyvsp[5].l)), yyget_YY16(&yyyvsp[7].v)));
	}
	else {
	  yyval=YY16(new List(new Decl(new ExternC_d( yyget_YY16(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[5].l)), yyget_YY16(&yyyvsp[7].v)));
	}
      }
      else {
        yyval=YY16(new List(new Decl(new ExternCinclude_d( yyget_YY16(&yyyvsp[2].v),cycdecls,exs,new $(wc, hides)),LOC(yyyvsp[0].l,yyyvsp[5].l)), yyget_YY16(&yyyvsp[7].v)));
      }
    
break;
case 8:
#line 1273 "src/parse.y"
 yyval=YY16(new List(new Decl(&Porton_d_val,SLOC(yyyvsp[0].l)), yyget_YY16(&yyyvsp[2].v))); 
break;
case 9:
#line 1275 "src/parse.y"
 yyval=YY16(new List(new Decl(&Portoff_d_val,SLOC(yyyvsp[0].l)), yyget_YY16(&yyyvsp[2].v))); 
break;
case 10:
#line 1277 "src/parse.y"
 yyval=YY16(new List(new Decl(&Tempeston_d_val,SLOC(yyyvsp[0].l)), yyget_YY16(&yyyvsp[2].v))); 
break;
case 11:
#line 1279 "src/parse.y"
 yyval=YY16(new List(new Decl(&Tempestoff_d_val,SLOC(yyyvsp[0].l)), yyget_YY16(&yyyvsp[2].v))); 
break;
case 12:
#line 1280 "src/parse.y"
 yyval=YY16(NULL); 
break;
case 13:
#line 1285 "src/parse.y"
 parsing_tempest = true; 
break;
case 14:
#line 1290 "src/parse.y"
 parsing_tempest = false; 
break;
case 15:
#line 1295 "src/parse.y"
 let two =  yyget_String_tok(&yyyvsp[1].v);
  Lex::enter_extern_c();
  if (strcmp(two,"C") == 0) 
    yyval = YY31(false);
  else if (strcmp(two,"C include") == 0)
    yyval = YY31(true);
  else {
    Warn::err(LOC(yyyvsp[0].l,yyyvsp[1].l),"expecting \"C\" or \"C include\"");
    yyval = YY31(true);
  }

break;
case 16:
#line 1309 "src/parse.y"
 Lex::leave_extern_c(); 
break;
case 17:
#line 1313 "src/parse.y"
yyval = YY54(NULL); 
break;
case 18:
#line 1314 "src/parse.y"
yyval = (yyyvsp[2].v);
break;
case 19:
#line 1318 "src/parse.y"
 yyval=YY54(new List( yyget_QualId_tok(&yyyvsp[0].v),NULL)); 
break;
case 20:
#line 1319 "src/parse.y"
 yyval=YY54(new List( yyget_QualId_tok(&yyyvsp[0].v),NULL)); 
break;
case 21:
#line 1321 "src/parse.y"
 yyval=YY54(new List( yyget_QualId_tok(&yyyvsp[0].v), yyget_YY54(&yyyvsp[2].v)));
break;
case 22:
#line 1325 "src/parse.y"
 yyval = YY53(new $(NULL, 0)); 
break;
case 23:
#line 1326 "src/parse.y"
 yyval = (yyyvsp[0].v); 
break;
case 24:
#line 1330 "src/parse.y"
 yyval= YY53(new $( yyget_YY52(&yyyvsp[2].v), 0)); 
break;
case 25:
#line 1331 "src/parse.y"
 yyval=YY53(new $(NULL, 0)); 
break;
case 26:
#line 1332 "src/parse.y"
 yyval=YY53(new $(NULL, SLOC(yyyvsp[0].l))); 
break;
case 27:
#line 1336 "src/parse.y"
 yyval=YY52(new List(new $(SLOC(yyyvsp[0].l), yyget_QualId_tok(&yyyvsp[0].v),false),NULL)); 
break;
case 28:
#line 1337 "src/parse.y"
 yyval=YY52(new List(new $(SLOC(yyyvsp[0].l), yyget_QualId_tok(&yyyvsp[0].v),false),NULL)); 
break;
case 29:
#line 1339 "src/parse.y"
 yyval=YY52(new List(new $(SLOC(yyyvsp[0].l), yyget_QualId_tok(&yyyvsp[0].v),false), yyget_YY52(&yyyvsp[2].v)));
break;
case 30:
#line 1343 "src/parse.y"
 yyval = YY16(NULL); 
break;
case 31:
#line 1344 "src/parse.y"
 yyval = (yyyvsp[2].v); 
break;
case 32:
#line 1349 "src/parse.y"
		let d = new_decl(new Fn_d( yyget_YY15(&yyyvsp[0].v)),SLOC(yyyvsp[0].l));
		yyval=YY16(new List(d,NULL));
break;
case 33:
#line 1351 "src/parse.y"
yyval=(yyyvsp[0].v);
break;
case 34:
#line 1352 "src/parse.y"
yyval=YY16(NULL);
break;
case 37:
#line 1361 "src/parse.y"
 yyval=YY15(make_function(yyr,NULL, yyget_YY27(&yyyvsp[0].v),NULL, yyget_Stmt_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 38:
#line 1363 "src/parse.y"
 let d =  yyget_YY17(&yyyvsp[0].v);
		 SLOC(yyyvsp[0].l) = SLOC(yyyvsp[1].l);
      yyval=YY15(make_function(yyr,&d, yyget_YY27(&yyyvsp[1].v),NULL, yyget_Stmt_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 39:
#line 1377 "src/parse.y"
 yyval=YY15(make_function(yyr,NULL, yyget_YY27(&yyyvsp[0].v), yyget_YY16(&yyyvsp[1].v), yyget_Stmt_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 40:
#line 1379 "src/parse.y"
 let d =  yyget_YY17(&yyyvsp[0].v);
      yyval=YY15(make_function(yyr,&d, yyget_YY27(&yyyvsp[1].v), yyget_YY16(&yyyvsp[2].v), yyget_Stmt_tok(&yyyvsp[3].v),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 41:
#line 1387 "src/parse.y"
 let d =  yyget_YY17(&yyyvsp[0].v);
      yyval=YY15(make_function(yyr,&d, yyget_YY27(&yyyvsp[1].v),NULL, yyget_Stmt_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 42:
#line 1390 "src/parse.y"
 let d =  yyget_YY17(&yyyvsp[0].v);
      yyval=YY15(make_function(yyr,&d, yyget_YY27(&yyyvsp[1].v), yyget_YY16(&yyyvsp[2].v), yyget_Stmt_tok(&yyyvsp[3].v),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 43:
#line 1395 "src/parse.y"
 Lex::enter_using( yyget_QualId_tok(&yyyvsp[1].v)); yyval=(yyyvsp[1].v); 
break;
case 44:
#line 1398 "src/parse.y"
 Lex::leave_using(); 
break;
case 45:
#line 1401 "src/parse.y"
 Lex::enter_namespace(new  yyget_String_tok(&yyyvsp[1].v)); yyval=(yyyvsp[1].v); 
break;
case 46:
#line 1404 "src/parse.y"
 Lex::leave_namespace(); 
break;
case 47:
#line 1410 "src/parse.y"
 let location=SLOC(yyyvsp[0].l);
      yyval=YY16(make_declarations( yyget_YY17(&yyyvsp[0].v),NULL,location,location)); 
break;
case 48:
#line 1413 "src/parse.y"
 let location = LOC(yyyvsp[0].l,yyyvsp[2].l);
  yyval=YY16(make_declarations( yyget_YY17(&yyyvsp[0].v), yyget_YY19(&yyyvsp[1].v),SLOC(yyyvsp[0].l),location)); 
break;
case 49:
#line 1417 "src/parse.y"
 yyval=YY16(new List(let_decl( yyget_YY9(&yyyvsp[1].v), yyget_Exp_tok(&yyyvsp[3].v),LOC(yyyvsp[0].l,yyyvsp[4].l)),NULL)); 
break;
case 50:
#line 1419 "src/parse.y"
 let vds = NULL;
      for (let ids =  yyget_YY36(&yyyvsp[1].v); ids != NULL; ids = ids->tl) {
        let id = ids->hd;
        qvar_t qv = new $(Rel_n(NULL), id);
        let vd = new_vardecl(0,qv,wildtyp(NULL),NULL);
        vds = new List(vd,vds);
      }
      vds = List::imp_rev(vds);
      yyval=YY16(new List(letv_decl(vds,LOC(yyyvsp[0].l,yyyvsp[2].l)),NULL));
    
break;
case 51:
#line 1432 "src/parse.y"
 let three =  yyget_String_tok(&yyyvsp[2].v);
    // FIX: need to check for `RC as well?  Should factor these out?
    if (zstrcmp(three,"`H") == 0)
      Warn::err(SLOC(yyyvsp[2].l),"bad occurrence of heap region");
    if (zstrcmp(three,"`U") == 0)
      Warn::err(SLOC(yyyvsp[2].l),"bad occurrence of unique region");
    tvar_t tv = new Tvar(new three,-1,Tcutil::kind_to_bound(&Tcutil::rk));
    type_t t  = var_type(tv);
    vardecl_t vd = new_vardecl(SLOC(yyyvsp[4].l), new $(Loc_n,new  yyget_String_tok(&yyyvsp[4].v)),rgn_handle_type(t),NULL);
    yyval = YY16(new List(region_decl(tv,vd,NULL,LOC(yyyvsp[0].l,yyyvsp[5].l)),NULL));
  
break;
case 52:
#line 1445 "src/parse.y"
 let two =  yyget_String_tok(&yyyvsp[1].v);
    if (zstrcmp(two,"H") == 0)
      Warn::err(SLOC(yyyvsp[1].l),"bad occurrence of heap region `H");
    if (zstrcmp(two,"U") == 0)
      Warn::err(SLOC(yyyvsp[1].l),"bad occurrence of unique region `U");
    tvar_t tv = new Tvar(new (string_t)aprintf("`%s",two), -1,
			 Tcutil::kind_to_bound(&Tcutil::rk));
    type_t t = var_type(tv);
    vardecl_t vd = new_vardecl(SLOC(yyyvsp[1].l), new $(Loc_n,new two),rgn_handle_type(t),NULL);
    yyval = YY16(new List(region_decl(tv,vd,NULL,LOC(yyyvsp[0].l,yyvs[yyvsp_offset+1].l)),NULL));
  
break;
case 53:
#line 1458 "src/parse.y"
 let two =  yyget_String_tok(&yyyvsp[1].v);
    let four =  yyget_String_tok(&yyyvsp[3].v);
    let six =  yyget_Exp_tok(&yyyvsp[5].v);
	 let ba = strcmp(four,"open") == 0;
	 let bb = strcmp(four,"xopen") == 0;
	 if( !ba && !bb )
			Warn::err(SLOC(yyyvsp[3].l),"expecting `open' or `xopen'");
	 if(ba){
    	tvar_t tv = new Tvar(new (string_t)aprintf("`%s",two), -1,
			 Tcutil::kind_to_bound(&Tcutil::rk));
	    type_t t = var_type(tv);
   	 vardecl_t vd = new_vardecl(SLOC(yyyvsp[2].l),new $(Loc_n,new two),rgn_handle_type(t),NULL);
	    yyval = YY16(new List(region_decl(tv,vd,six,LOC(yyyvsp[0].l,yyyvsp[7].l)),NULL));
	} else {
	  	tvar_t tv = new Tvar(new (string_t)aprintf("`%s",two), -2,
			 Tcutil::kind_to_bound(&Tcutil::rk));
	    type_t t = var_type(tv);
   	 vardecl_t vd = new_vardecl(SLOC(yyyvsp[2].l),new $(Loc_n,new two),rgn_handle_type(t),NULL);
	    yyval = YY16(new List(region_decl(tv,vd,six,LOC(yyyvsp[0].l,yyyvsp[7].l)),NULL));
	}
  
break;
case 54:
#line 1481 "src/parse.y"
 let two =  yyget_String_tok(&yyyvsp[1].v);
    let four =  yyget_Exp_tok(&yyyvsp[3].v);
    tvar_t tv = new Tvar(new (string_t) aprintf("`%s",two), -1,
								 Tcutil::kind_to_bound(&Tcutil::xrk));
    type_t t = Absyn::xrgn_var_type(tv); 
    vardecl_t vd = new_vardecl(SLOC(yyyvsp[2].l), // h : rgn(\rho). fresh \rho
										 new $(Loc_n,new two),
										 rgn_handle_type(t),
										 NULL);
	 // if( four->loc < 0 ) Warn::err(SLOC(@4),"Internal error");
	 //else four->loc = -four->loc; //abuse this field so that we can tell
											// whether this is an open(k) or 
											// newrgn x1 @ x2 expression
    yyval = YY16(new List(region_decl(tv,vd,four,LOC(yyyvsp[0].l,yyvs[yyvsp_offset+3].l)),NULL));
  
break;
case 55:
#line 1500 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 56:
#line 1502 "src/parse.y"
 yyval=YY16(List::imp_append( yyget_YY16(&yyyvsp[0].v), yyget_YY16(&yyyvsp[1].v))); 
break;
case 57:
#line 1508 "src/parse.y"
 yyval=YY17(Declaration_spec( yyget_YY20(&yyyvsp[0].v),empty_tqual(SLOC(yyyvsp[0].l)),
                             empty_spec(0),false,NULL)); 
break;
case 58:
#line 1511 "src/parse.y"
 let two =  yyget_YY17(&yyyvsp[1].v);
      if (two.sc != NULL)
        Warn::warn(LOC(yyyvsp[0].l,yyyvsp[1].l),
                     "Only one storage class is allowed in a declaration (missing ';' or ','?)");
      yyval=YY17(Declaration_spec( yyget_YY20(&yyyvsp[0].v),two.tq,two.type_specs,
                             two.is_inline,
                             two.attributes));
    
break;
case 59:
#line 1520 "src/parse.y"
 Warn::warn(LOC(yyyvsp[0].l,yyyvsp[0].l), "__extension__ keyword ignored in declaration");
      yyval=(yyyvsp[1].v); 
    
break;
case 60:
#line 1524 "src/parse.y"
 yyval=YY17(Declaration_spec(NULL,empty_tqual(SLOC(yyyvsp[0].l)),
                              yyget_YY21(&yyyvsp[0].v),false,NULL)); 
break;
case 61:
#line 1527 "src/parse.y"
 let two =  yyget_YY17(&yyyvsp[1].v);
    yyval=YY17(Declaration_spec(two.sc,two.tq,
                           combine_specifiers(SLOC(yyyvsp[0].l),two.type_specs, yyget_YY21(&yyyvsp[0].v)),
                           two.is_inline,
                           two.attributes));
    
break;
case 62:
#line 1534 "src/parse.y"
 yyval=YY17(Declaration_spec(NULL, yyget_YY23(&yyyvsp[0].v),empty_spec(0),false,NULL)); 
break;
case 63:
#line 1536 "src/parse.y"
 let two =  yyget_YY17(&yyyvsp[1].v);
      yyval=YY17(Declaration_spec(two.sc,combine_tqual( yyget_YY23(&yyyvsp[0].v),two.tq),
                             two.type_specs, two.is_inline,
                             two.attributes));
    
break;
case 64:
#line 1542 "src/parse.y"
 yyval=YY17(Declaration_spec(NULL,empty_tqual(SLOC(yyyvsp[0].l)),
                             empty_spec(0),true,NULL)); 
break;
case 65:
#line 1545 "src/parse.y"
 let two =  yyget_YY17(&yyyvsp[1].v);
      yyval=YY17(Declaration_spec(two.sc,two.tq,two.type_specs,true,
                             two.attributes));
    
break;
case 66:
#line 1550 "src/parse.y"
 yyval=YY17(Declaration_spec(NULL,empty_tqual(SLOC(yyyvsp[0].l)),
                             empty_spec(0),false, yyget_YY45(&yyyvsp[0].v))); 
break;
case 67:
#line 1553 "src/parse.y"
 let two =  yyget_YY17(&yyyvsp[1].v);
      yyval=YY17(Declaration_spec(two.sc,two.tq,
                             two.type_specs, two.is_inline,
                             List::imp_append( yyget_YY45(&yyyvsp[0].v),two.attributes))); 
break;
case 68:
#line 1560 "src/parse.y"
 static storage_class_t auto_sc = Auto_sc;
              yyval=YY20(&auto_sc); 
break;
case 69:
#line 1562 "src/parse.y"
 static storage_class_t register_sc = Register_sc;
              yyval=YY20(&register_sc); 
break;
case 70:
#line 1564 "src/parse.y"
 static storage_class_t static_sc = Static_sc;
              yyval=YY20(&static_sc); 
break;
case 71:
#line 1566 "src/parse.y"
 static storage_class_t extern_sc = Extern_sc;
              yyval=YY20(&extern_sc); 
break;
case 72:
#line 1569 "src/parse.y"
 static storage_class_t externC_sc = ExternC_sc;
    if (strcmp( yyget_String_tok(&yyyvsp[1].v),"C") != 0)
      Warn::err(LOC(yyyvsp[0].l,yyyvsp[1].l),"only extern or extern \"C\" is allowed");
    yyval = YY20(&externC_sc);
  
break;
case 73:
#line 1574 "src/parse.y"
 static storage_class_t typedef_sc = Typedef_sc;
              yyval=YY20(&typedef_sc); 
break;
case 74:
#line 1577 "src/parse.y"
 static storage_class_t abstract_sc = Abstract_sc;
              yyval=YY20(&abstract_sc); 
break;
case 75:
#line 1583 "src/parse.y"
 yyval=YY45(NULL); 
break;
case 76:
#line 1584 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 77:
#line 1589 "src/parse.y"
 yyval=(yyyvsp[3].v); 
break;
case 78:
#line 1593 "src/parse.y"
 yyval=YY45(new List( yyget_YY46(&yyyvsp[0].v),NULL)); 
break;
case 79:
#line 1594 "src/parse.y"
 yyval=YY45(new List( yyget_YY46(&yyyvsp[0].v), yyget_YY45(&yyyvsp[2].v))); 
break;
case 80:
#line 1598 "src/parse.y"
 yyval = YY46(parse_nullary_att(SLOC(yyyvsp[0].l), yyget_String_tok(&yyyvsp[0].v))); 
break;
case 81:
#line 1599 "src/parse.y"
 yyval = YY46(&Const_att_val); 
break;
case 82:
#line 1601 "src/parse.y"
 yyval = YY46(parse_unary_att(SLOC(yyyvsp[0].l),  yyget_String_tok(&yyyvsp[0].v), SLOC(yyyvsp[2].l),  yyget_Exp_tok(&yyyvsp[2].v))); 
break;
case 83:
#line 1603 "src/parse.y"
 yyval = YY46(parse_format_att(LOC(yyyvsp[0].l,yyyvsp[7].l), SLOC(yyyvsp[2].l),  yyget_String_tok(&yyyvsp[0].v),  yyget_String_tok(&yyyvsp[2].v),
					      cnst2uint(SLOC(yyyvsp[4].l), yyget_Int_tok(&yyyvsp[4].v)),
					      cnst2uint(SLOC(yyyvsp[6].l), yyget_Int_tok(&yyyvsp[6].v)))); 
break;
case 84:
#line 1683 "src/parse.y"
 yyval = (yyyvsp[0].v); 
break;
case 85:
#line 1685 "src/parse.y"
 yyval=YY21(type_spec(typedef_type( yyget_QualId_tok(&yyyvsp[0].v), yyget_YY40(&yyyvsp[1].v),NULL,NULL),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 86:
#line 1689 "src/parse.y"
 yyval=YY21(type_spec(void_type,SLOC(yyyvsp[0].l))); 
break;
case 87:
#line 1690 "src/parse.y"
 yyval=YY21(type_spec(char_type,SLOC(yyyvsp[0].l))); 
break;
case 88:
#line 1691 "src/parse.y"
 yyval=YY21(short_spec(SLOC(yyyvsp[0].l))); 
break;
case 89:
#line 1692 "src/parse.y"
 yyval=YY21(type_spec(sint_type,SLOC(yyyvsp[0].l))); 
break;
case 90:
#line 1693 "src/parse.y"
 yyval=YY21(long_spec(SLOC(yyyvsp[0].l))); 
break;
case 91:
#line 1694 "src/parse.y"
 yyval=YY21(type_spec(float_type,SLOC(yyyvsp[0].l))); 
break;
case 92:
#line 1695 "src/parse.y"
 yyval=YY21(type_spec(double_type,SLOC(yyyvsp[0].l))); 
break;
case 93:
#line 1696 "src/parse.y"
 yyval=YY21(signed_spec(SLOC(yyyvsp[0].l))); 
break;
case 94:
#line 1697 "src/parse.y"
 yyval=YY21(unsigned_spec(SLOC(yyyvsp[0].l))); 
break;
case 95:
#line 1698 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 96:
#line 1699 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 97:
#line 1702 "src/parse.y"
 yyval=YY21(type_spec(typeof_type( yyget_Exp_tok(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 98:
#line 1704 "src/parse.y"
 yyval=YY21(type_spec(builtin_type("__builtin_va_list",&Tcutil::bk),SLOC(yyyvsp[0].l))); 
break;
case 99:
#line 1706 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 100:
#line 1708 "src/parse.y"
 yyval=YY21(type_spec( yyget_YY44(&yyyvsp[0].v), SLOC(yyyvsp[0].l))); 
break;
case 101:
#line 1710 "src/parse.y"
 yyval=YY21(type_spec(new_evar(NULL,NULL),SLOC(yyyvsp[0].l))); 
break;
case 102:
#line 1712 "src/parse.y"
 yyval=YY21(type_spec(new_evar(Tcutil::kind_to_opt( yyget_YY43(&yyyvsp[2].v)),NULL),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 103:
#line 1714 "src/parse.y"
 yyval=YY21(type_spec(new TupleType(List::map_c(get_tqual_typ,
                                                SLOC(yyyvsp[2].l),List::imp_rev( yyget_YY38(&yyyvsp[2].v)))),
                      LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 104:
#line 1718 "src/parse.y"
 yyval=YY21(type_spec(rgn_handle_type( yyget_YY44(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 105:
#line 1720 "src/parse.y"
 yyval=YY21(type_spec(rgn_handle_type(new_evar(&Tcutil::rko, NULL)),
                      SLOC(yyyvsp[0].l))); 
break;
case 106:
#line 1723 "src/parse.y"
 yyval=YY21(type_spec(tag_type( yyget_YY44(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 107:
#line 1725 "src/parse.y"
 yyval=YY21(type_spec(tag_type(new_evar(&Tcutil::iko, NULL)),SLOC(yyyvsp[0].l))); 
break;
case 108:
#line 1727 "src/parse.y"
 yyval=YY21(type_spec(valueof_type( yyget_Exp_tok(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 109:
#line 1733 "src/parse.y"
 yyval=YY43(id_to_kind( yyget_String_tok(&yyyvsp[0].v),SLOC(yyyvsp[0].l))); 
break;
case 110:
#line 1737 "src/parse.y"
 seg_t loc = (Absyn::porting_c_code) ? SLOC(yyyvsp[0].l) : 0; 
             yyval=YY23(Tqual(true,false,false,true,loc)); 
break;
case 111:
#line 1739 "src/parse.y"
 yyval=YY23(Tqual(false,true,false,false,0)); 
break;
case 112:
#line 1740 "src/parse.y"
 yyval=YY23(Tqual(false,false,true,false,0)); 
break;
case 113:
#line 1746 "src/parse.y"
 let ed = new TypeDecl{new Enum_td(new Enumdecl(Public, yyget_QualId_tok(&yyyvsp[1].v),new Opt( yyget_YY48(&yyyvsp[3].v)))),
                           LOC(yyyvsp[0].l,yyyvsp[4].l)};
    yyval=YY21(type_spec(new TypeDeclType(ed,NULL),LOC(yyyvsp[0].l,yyyvsp[4].l)));
  
break;
case 114:
#line 1751 "src/parse.y"
 yyval=YY21(type_spec(enum_type( yyget_QualId_tok(&yyyvsp[1].v),NULL),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 115:
#line 1753 "src/parse.y"
 yyval=YY21(type_spec(anon_enum_type( yyget_YY48(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 116:
#line 1759 "src/parse.y"
 yyval = YY47(new Enumfield( yyget_QualId_tok(&yyyvsp[0].v),NULL,SLOC(yyyvsp[0].l))); 
break;
case 117:
#line 1761 "src/parse.y"
 yyval = YY47(new Enumfield( yyget_QualId_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 118:
#line 1765 "src/parse.y"
 yyval = YY48(new List( yyget_YY47(&yyyvsp[0].v),NULL)); 
break;
case 119:
#line 1766 "src/parse.y"
 yyval = YY48(new List( yyget_YY47(&yyyvsp[0].v),NULL)); 
break;
case 120:
#line 1767 "src/parse.y"
 yyval = YY48(new List( yyget_YY47(&yyyvsp[0].v), yyget_YY48(&yyyvsp[2].v))); 
break;
case 121:
#line 1773 "src/parse.y"
 yyval=YY21(type_spec(new AnonAggrType( yyget_YY22(&yyyvsp[0].v), yyget_YY24(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 122:
#line 1778 "src/parse.y"
 
      let ts = List::map_c(typ2tvar,SLOC(yyyvsp[3].l), yyget_YY40(&yyyvsp[3].v));
      let exist_ts = List::map_c(typ2tvar,SLOC(yyyvsp[5].l), yyget_YY40(&yyyvsp[5].v));
      let td = aggr_tdecl( yyget_YY22(&yyyvsp[1].v), Public,  yyget_QualId_tok(&yyyvsp[2].v), ts, 
                          aggrdecl_impl(exist_ts, yyget_YY50(&yyyvsp[6].v), yyget_YY24(&yyyvsp[7].v),true), NULL,
                          LOC(yyyvsp[0].l,yyyvsp[8].l));
      yyval = YY21(type_spec(new TypeDeclType(td,NULL), LOC(yyyvsp[0].l,yyyvsp[8].l)));
    
break;
case 123:
#line 1789 "src/parse.y"
 
      let ts = List::map_c(typ2tvar,SLOC(yyyvsp[2].l), yyget_YY40(&yyyvsp[2].v));
      let exist_ts = List::map_c(typ2tvar,SLOC(yyyvsp[4].l), yyget_YY40(&yyyvsp[4].v));
      let td = aggr_tdecl( yyget_YY22(&yyyvsp[0].v), Public,  yyget_QualId_tok(&yyyvsp[1].v), ts, 
                          aggrdecl_impl(exist_ts, yyget_YY50(&yyyvsp[5].v), yyget_YY24(&yyyvsp[6].v),false), NULL,
                          LOC(yyyvsp[0].l,yyyvsp[7].l));
      yyval = YY21(type_spec(new TypeDeclType(td,NULL), LOC(yyyvsp[0].l,yyyvsp[7].l)));
    
break;
case 124:
#line 1798 "src/parse.y"
 yyval=YY21(type_spec(aggr_type(UnknownAggr( yyget_YY22(&yyyvsp[1].v), yyget_QualId_tok(&yyyvsp[2].v),new Opt(true)), yyget_YY40(&yyyvsp[3].v)),
                      LOC(yyyvsp[0].l,yyyvsp[3].l)));
    
break;
case 125:
#line 1802 "src/parse.y"
 yyval=YY21(type_spec(aggr_type(UnknownAggr( yyget_YY22(&yyyvsp[0].v), yyget_QualId_tok(&yyyvsp[1].v),NULL), yyget_YY40(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 126:
#line 1807 "src/parse.y"
 yyval=YY40(NULL); 
break;
case 127:
#line 1809 "src/parse.y"
 yyval=YY40(List::imp_rev( yyget_YY40(&yyyvsp[1].v))); 
break;
case 128:
#line 1813 "src/parse.y"
 yyval=YY22(StructA); 
break;
case 129:
#line 1814 "src/parse.y"
 yyval=YY22(UnionA); 
break;
case 130:
#line 1819 "src/parse.y"
 yyval=YY24(NULL); 
break;
case 131:
#line 1821 "src/parse.y"
 list_t<aggrfield_t> decls = NULL;
    for (let x =  yyget_YY25(&yyyvsp[0].v); x != NULL; x = x->tl) 
      decls = List::imp_append(x->hd,decls);
    //let decls = List::flatten(List::imp_rev($1));
    let tags = get_aggrfield_tags(decls);
    if (tags != NULL)
      List::iter_c(substitute_aggrfield_tags,tags,decls);
    yyval=YY24(decls);
  
break;
case 132:
#line 1835 "src/parse.y"
 yyval=YY25(new List( yyget_YY24(&yyyvsp[0].v),NULL)); 
break;
case 133:
#line 1837 "src/parse.y"
 yyval=YY25(new List( yyget_YY24(&yyyvsp[1].v), yyget_YY25(&yyyvsp[0].v))); 
break;
case 134:
#line 1841 "src/parse.y"
 yyval=YY19(flat_imp_rev( yyget_YY19(&yyyvsp[0].v))); 
break;
case 135:
#line 1847 "src/parse.y"
 yyval=YY19(rnew(yyr) FlatList(NULL, yyget_YY18(&yyyvsp[0].v))); 
break;
case 136:
#line 1849 "src/parse.y"
 yyval=YY19(rnew(yyr) FlatList( yyget_YY19(&yyyvsp[0].v), yyget_YY18(&yyyvsp[2].v))); 
break;
case 137:
#line 1854 "src/parse.y"
 yyval=YY18($( yyget_YY27(&yyyvsp[0].v),NULL)); 
break;
case 138:
#line 1856 "src/parse.y"
 yyval=YY18($( yyget_YY27(&yyyvsp[0].v),(exp_opt_t) yyget_Exp_tok(&yyyvsp[2].v))); 
break;
case 139:
#line 1861 "src/parse.y"

      region temp; 
      let $(tq,tspecs,atts) =  yyget_YY35(&yyyvsp[0].v);
      if (tq.loc == 0) tq.loc = SLOC(yyyvsp[0].l);
      declarators_t<`temp> decls = NULL;
      list_t<$(exp_opt_t,exp_opt_t)@`temp,`temp> widths_and_reqs = NULL;
      for (let x =  yyget_YY29(&yyyvsp[1].v); x != NULL; x = x->tl) {
	let &$(d,wd,wh) = x->hd;
	decls = rnew(temp) FlatList(decls,d);
	widths_and_reqs = 
	  rnew(temp) List(rnew(temp) $(wd,wh),widths_and_reqs);
      }
      decls = flat_imp_rev(decls);
      widths_and_reqs = imp_rev(widths_and_reqs);
      let t = speclist2typ(tspecs, SLOC(yyyvsp[0].l));
      let info = List::rzip(temp,temp,
			    apply_tmss(temp,tq,t,decls,atts),
			    widths_and_reqs);
      yyval=YY24(List::map_c(make_aggr_field,LOC(yyyvsp[0].l,yyyvsp[1].l),info));
   
break;
case 140:
#line 1889 "src/parse.y"
 yyval=YY35($(empty_tqual(SLOC(yyyvsp[0].l)),  yyget_YY21(&yyyvsp[0].v), NULL)); 
break;
case 141:
#line 1891 "src/parse.y"
 let two= yyget_YY35(&yyyvsp[1].v); yyval=YY35($(two[0], combine_specifiers(SLOC(yyyvsp[0].l), yyget_YY21(&yyyvsp[0].v),two[1]), two[2]));
break;
case 142:
#line 1893 "src/parse.y"
 yyval=YY35($( yyget_YY23(&yyyvsp[0].v),empty_spec(0),NULL)); 
break;
case 143:
#line 1895 "src/parse.y"
 let two= yyget_YY35(&yyyvsp[1].v); 
      yyval=YY35($(combine_tqual( yyget_YY23(&yyyvsp[0].v),two[0]), two[1], two[2])); 
break;
case 144:
#line 1898 "src/parse.y"
 yyval=YY35($(empty_tqual(SLOC(yyyvsp[0].l)),empty_spec(0),  yyget_YY45(&yyyvsp[0].v))); 
break;
case 145:
#line 1900 "src/parse.y"
 let two= yyget_YY35(&yyyvsp[1].v); yyval=YY35($(two[0], two[1], append( yyget_YY45(&yyyvsp[0].v),two[2]))); 
break;
case 146:
#line 1906 "src/parse.y"
 yyval=YY35($(empty_tqual(SLOC(yyyvsp[0].l)),  yyget_YY21(&yyyvsp[0].v), NULL)); 
break;
case 147:
#line 1908 "src/parse.y"
 let two= yyget_YY35(&yyyvsp[1].v); yyval=YY35($(two[0], combine_specifiers(SLOC(yyyvsp[0].l), yyget_YY21(&yyyvsp[0].v),two[1]), two[2]));
break;
case 148:
#line 1910 "src/parse.y"
 yyval=YY35($( yyget_YY23(&yyyvsp[0].v),empty_spec(0),NULL)); 
break;
case 149:
#line 1912 "src/parse.y"
 let two= yyget_YY35(&yyyvsp[1].v); 
      yyval=YY35($(combine_tqual( yyget_YY23(&yyyvsp[0].v),two[0]), two[1], two[2])); 
break;
case 150:
#line 1915 "src/parse.y"
 yyval=YY35($(empty_tqual(SLOC(yyyvsp[0].l)), empty_spec(0),  yyget_YY45(&yyyvsp[0].v))); 
break;
case 151:
#line 1917 "src/parse.y"
 let two= yyget_YY35(&yyyvsp[1].v); yyval=YY35($(two[0], two[1], append( yyget_YY45(&yyyvsp[0].v),two[2]))); 
break;
case 152:
#line 1921 "src/parse.y"
 yyval=YY29(List::imp_rev( yyget_YY29(&yyyvsp[0].v))); 
break;
case 153:
#line 1927 "src/parse.y"
 yyval=YY29(rnew(yyr) List( yyget_YY28(&yyyvsp[0].v),NULL)); 
break;
case 154:
#line 1929 "src/parse.y"
 yyval=YY29(rnew(yyr) List( yyget_YY28(&yyyvsp[2].v), yyget_YY29(&yyyvsp[0].v))); 
break;
case 155:
#line 1934 "src/parse.y"
 yyval=YY28(rnew (yyr) $( yyget_YY27(&yyyvsp[0].v),NULL, yyget_YY57(&yyyvsp[1].v))); 
break;
case 156:
#line 1936 "src/parse.y"
 // HACK: give the field an empty name -- see elsewhere in the
      // compiler where we use this invariant
      yyval=YY28(rnew (yyr) $((Declarator(new $(Rel_n(NULL),new ""), 0, NULL)),(exp_opt_t) yyget_Exp_tok(&yyyvsp[1].v),NULL));
    
break;
case 157:
#line 1941 "src/parse.y"
 // HACK: give the field an empty name -- see elsewhere in the
      // compiler where we use this invariant
      yyval=YY28(rnew (yyr) $((Declarator(new $(Rel_n(NULL),new ""),0, NULL)),NULL,NULL));
    
break;
case 158:
#line 1946 "src/parse.y"
 yyval=YY28(rnew (yyr) $( yyget_YY27(&yyyvsp[0].v),(exp_opt_t) yyget_Exp_tok(&yyyvsp[2].v),NULL)); 
break;
case 159:
#line 1950 "src/parse.y"
 yyval = YY57((exp_opt_t) yyget_Exp_tok(&yyyvsp[2].v)); 
break;
case 160:
#line 1951 "src/parse.y"
 yyval = YY57(NULL); 
break;
case 161:
#line 1957 "src/parse.y"

    yyval=YY66(new List(join_eff( yyget_YY40(&yyyvsp[1].v)),NULL));

break;
case 162:
#line 1962 "src/parse.y"

  yyval=YY66(new List(join_eff( yyget_YY40(&yyyvsp[3].v)), yyget_YY66(&yyyvsp[0].v)));

break;
case 163:
#line 1969 "src/parse.y"

		 yyval=YY49(void_type);
    
break;
case 164:
#line 1972 "src/parse.y"
 yyval = YY49(NULL); 
break;
case 165:
#line 1977 "src/parse.y"

		 yyval=YY49(join_eff( yyget_YY66(&yyyvsp[2].v)));
	 
break;
case 166:
#line 1980 "src/parse.y"
 yyval = YY49(NULL); 
break;
case 167:
#line 1986 "src/parse.y"

		 yyval=YY64( yyget_YY34(&yyyvsp[2].v));
	 
break;
case 168:
#line 1990 "src/parse.y"

	   yyval=YY64(Absyn::nothrow());
	
break;
case 169:
#line 1994 "src/parse.y"

	   yyval=YY64(Absyn::throwsany());
	
break;
case 170:
#line 1997 "src/parse.y"
 yyval = YY64(Absyn::nothrow()); 
break;
case 171:
#line 2002 "src/parse.y"

	   yyval=YY65(true);
	
break;
case 172:
#line 2005 "src/parse.y"
 yyval = YY65(false); 
break;
case 173:
#line 2009 "src/parse.y"
 yyval = YY57((exp_opt_t) yyget_Exp_tok(&yyyvsp[2].v)); 
break;
case 174:
#line 2010 "src/parse.y"
 yyval = YY57(NULL); 
break;
case 175:
#line 2016 "src/parse.y"
 let is_extensible =  yyget_YY31(&yyyvsp[0].v);
      let ts = List::map_c(typ2tvar,SLOC(yyyvsp[2].l), yyget_YY40(&yyyvsp[2].v));
      let dd = datatype_tdecl(Public, yyget_QualId_tok(&yyyvsp[1].v),ts,new Opt( yyget_YY34(&yyyvsp[4].v)), 
                              is_extensible,LOC(yyyvsp[0].l,yyyvsp[5].l));
      yyval = YY21(type_spec(new TypeDeclType(dd,NULL),LOC(yyyvsp[0].l,yyyvsp[5].l)));
    
break;
case 176:
#line 2023 "src/parse.y"
 let is_extensible =  yyget_YY31(&yyyvsp[0].v);
      yyval=YY21(type_spec(datatype_type(UnknownDatatype(UnknownDatatypeInfo( yyget_QualId_tok(&yyyvsp[1].v),is_extensible)),  yyget_YY40(&yyyvsp[2].v)), LOC(yyyvsp[0].l,yyyvsp[2].l)));
    
break;
case 177:
#line 2027 "src/parse.y"
  let is_extensible =  yyget_YY31(&yyyvsp[0].v);
      yyval=YY21(type_spec(datatype_field_type(UnknownDatatypefield(UnknownDatatypeFieldInfo( yyget_QualId_tok(&yyyvsp[1].v), yyget_QualId_tok(&yyyvsp[3].v),is_extensible)), yyget_YY40(&yyyvsp[4].v)),LOC(yyyvsp[0].l,yyyvsp[4].l)));
    
break;
case 178:
#line 2033 "src/parse.y"
 yyval = YY31(false); 
break;
case 179:
#line 2034 "src/parse.y"
 yyval = YY31(true); 
break;
case 180:
#line 2038 "src/parse.y"
 yyval=YY34(new List( yyget_YY33(&yyyvsp[0].v),NULL)); 
break;
case 181:
#line 2039 "src/parse.y"
 yyval=YY34(new List( yyget_YY33(&yyyvsp[0].v),NULL)); 
break;
case 182:
#line 2040 "src/parse.y"
 yyval=YY34(new List( yyget_YY33(&yyyvsp[0].v), yyget_YY34(&yyyvsp[2].v))); 
break;
case 183:
#line 2041 "src/parse.y"
 yyval=YY34(new List( yyget_YY33(&yyyvsp[0].v), yyget_YY34(&yyyvsp[2].v))); 
break;
case 184:
#line 2045 "src/parse.y"
 yyval=YY32(Public);
break;
case 185:
#line 2046 "src/parse.y"
 yyval=YY32(Extern);
break;
case 186:
#line 2047 "src/parse.y"
 yyval=YY32(Static);
break;
case 187:
#line 2051 "src/parse.y"
 yyval=YY33(new Datatypefield( yyget_QualId_tok(&yyyvsp[1].v),NULL,LOC(yyyvsp[0].l,yyyvsp[1].l), yyget_YY32(&yyyvsp[0].v))); 
break;
case 188:
#line 2053 "src/parse.y"
 let typs = List::map_c(get_tqual_typ,SLOC(yyyvsp[3].l),List::imp_rev( yyget_YY38(&yyyvsp[3].v)));
      yyval=YY33(new Datatypefield( yyget_QualId_tok(&yyyvsp[1].v),typs,LOC(yyyvsp[0].l,yyyvsp[4].l), yyget_YY32(&yyyvsp[0].v))); 
break;
case 189:
#line 2059 "src/parse.y"

		 yyval=(yyyvsp[0].v); 
break;
case 190:
#line 2062 "src/parse.y"
 let two =  yyget_YY27(&yyyvsp[1].v);

		 SLOC(yyyvsp[0].l) = SLOC(yyyvsp[1].l);
      yyval=YY27(Declarator(two.id, two.varloc, List::imp_append( yyget_YY26(&yyyvsp[0].v),two.tms))); 
break;
case 191:
#line 2071 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 192:
#line 2073 "src/parse.y"
 let two =  yyget_YY27(&yyyvsp[1].v);
      yyval=YY27(Declarator(two.id, two.varloc, List::imp_append( yyget_YY26(&yyyvsp[0].v),two.tms))); 
break;
case 193:
#line 2079 "src/parse.y"

		 yyval=YY27(Declarator( yyget_QualId_tok(&yyyvsp[0].v), SLOC(yyyvsp[0].l),NULL)); 
	 
break;
case 194:
#line 2083 "src/parse.y"
 yyval=(yyyvsp[1].v); 
break;
case 195:
#line 2087 "src/parse.y"
 let d =  yyget_YY27(&yyyvsp[2].v);
      d.tms = rnew(yyr) List(rnew(yyr) Attributes_mod(SLOC(yyyvsp[1].l), yyget_YY45(&yyyvsp[1].v)),d.tms);
      yyval=(yyyvsp[2].v);
    
break;
case 196:
#line 2092 "src/parse.y"
 yyval=YY27(Declarator( yyget_YY27(&yyyvsp[0].v).id,  yyget_YY27(&yyyvsp[0].v).varloc, rnew(yyr) List(rnew(yyr) Carray_mod( yyget_YY51(&yyyvsp[3].v),SLOC(yyyvsp[3].l)), yyget_YY27(&yyyvsp[0].v).tms)));
break;
case 197:
#line 2094 "src/parse.y"
 yyval=YY27(Declarator( yyget_YY27(&yyyvsp[0].v).id,  yyget_YY27(&yyyvsp[0].v).varloc,
                       rnew(yyr) List(rnew(yyr) ConstArray_mod( yyget_Exp_tok(&yyyvsp[2].v), yyget_YY51(&yyyvsp[4].v),SLOC(yyyvsp[4].l)), yyget_YY27(&yyyvsp[0].v).tms)));
break;
case 198:
#line 2100 "src/parse.y"
 let &$(lis,b,c,eff,po) =  yyget_YY39(&yyyvsp[2].v);
      let req =  yyget_YY57(&yyyvsp[4].v);
      let ens =  yyget_YY57(&yyyvsp[5].v);
      let ieff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[6].v));
      let oeff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[7].v));
      let throws =  yyget_YY64(&yyyvsp[8].v);
      yyval=YY27(Declarator( yyget_YY27(&yyyvsp[0].v).id,  yyget_YY27(&yyyvsp[0].v).varloc,rnew(yyr) List(rnew(yyr) Function_mod(rnew(yyr) WithTypes(lis,b,c,eff,po,req,ens,ieff,oeff,throws, yyget_YY65(&yyyvsp[9].v))), yyget_YY27(&yyyvsp[0].v).tms)));
    
break;
case 199:
#line 2113 "src/parse.y"

		let ieff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[7].v));
		let oeff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[8].v));
		let throws =  yyget_YY64(&yyyvsp[9].v);
		 yyval=YY27(Declarator( yyget_YY27(&yyyvsp[0].v).id,  yyget_YY27(&yyyvsp[0].v).varloc,
             rnew(yyr) List(rnew(yyr) 
					Function_mod(rnew(yyr) WithTypes(NULL,
                                                false,NULL,
                                                 yyget_YY49(&yyyvsp[2].v), yyget_YY50(&yyyvsp[3].v), yyget_YY57(&yyyvsp[5].v), yyget_YY57(&yyyvsp[6].v),
																ieff,oeff,throws,
															    yyget_YY65(&yyyvsp[10].v))),
                                 yyget_YY27(&yyyvsp[0].v).tms)));
    
break;
case 200:
#line 2127 "src/parse.y"
 yyval=YY27(Declarator( yyget_YY27(&yyyvsp[0].v).id,  yyget_YY27(&yyyvsp[0].v).varloc, rnew(yyr) List(rnew(yyr) 
			Function_mod(rnew(yyr) NoTypes( yyget_YY36(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[3].l))), yyget_YY27(&yyyvsp[0].v).tms))); 
break;
case 201:
#line 2131 "src/parse.y"
 let ts = List::map_c(typ2tvar,LOC(yyyvsp[1].l,yyyvsp[3].l),List::imp_rev( yyget_YY40(&yyyvsp[2].v)));
      yyval=YY27(Declarator( yyget_YY27(&yyyvsp[0].v).id,  yyget_YY27(&yyyvsp[0].v).varloc, rnew(yyr) List(rnew(yyr) TypeParams_mod(ts,LOC(yyyvsp[0].l,yyyvsp[3].l),false), yyget_YY27(&yyyvsp[0].v).tms)));
    
break;
case 202:
#line 2135 "src/parse.y"
 yyval=YY27(Declarator( yyget_YY27(&yyyvsp[0].v).id,  yyget_YY27(&yyyvsp[0].v).varloc, rnew(yyr) List(rnew(yyr) Attributes_mod(SLOC(yyyvsp[1].l), yyget_YY45(&yyyvsp[1].v)),
                                          yyget_YY27(&yyyvsp[0].v).tms)));
  
break;
case 203:
#line 2143 "src/parse.y"
 yyval=YY27(Declarator( yyget_QualId_tok(&yyyvsp[0].v), SLOC(yyyvsp[0].l), NULL)); 
break;
case 204:
#line 2145 "src/parse.y"
 yyval=YY27(Declarator( yyget_QualId_tok(&yyyvsp[0].v), SLOC(yyyvsp[0].l),NULL)); 
break;
case 205:
#line 2147 "src/parse.y"
 yyval=(yyyvsp[1].v); 
break;
case 206:
#line 2151 "src/parse.y"
 let d =  yyget_YY27(&yyyvsp[2].v);
      d.tms = rnew(yyr) List(rnew(yyr) Attributes_mod(SLOC(yyyvsp[1].l), yyget_YY45(&yyyvsp[1].v)),d.tms);
      yyval=(yyyvsp[2].v);
    
break;
case 207:
#line 2156 "src/parse.y"
 let one= yyget_YY27(&yyyvsp[0].v);
    yyval=YY27(Declarator(one.id, one.varloc,
                       rnew(yyr) List(rnew(yyr) Carray_mod( yyget_YY51(&yyyvsp[3].v),SLOC(yyyvsp[3].l)),one.tms)));
break;
case 208:
#line 2160 "src/parse.y"
 let one= yyget_YY27(&yyyvsp[0].v);
    yyval=YY27(Declarator(one.id, one.varloc,
                       rnew(yyr) List(rnew(yyr) ConstArray_mod( yyget_Exp_tok(&yyyvsp[2].v), yyget_YY51(&yyyvsp[4].v),SLOC(yyyvsp[4].l)),
                                one.tms)));
break;
case 209:
#line 2170 "src/parse.y"
 let &$(lis,b,c,eff,po) =  yyget_YY39(&yyyvsp[2].v);
      let req =  yyget_YY57(&yyyvsp[4].v);
      let ens =  yyget_YY57(&yyyvsp[5].v);
      let one= yyget_YY27(&yyyvsp[0].v);
		let ieff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[6].v));
		let oeff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[7].v));
		let throws =  yyget_YY64(&yyyvsp[8].v);
      yyval=YY27(Declarator(one.id, one.varloc, 
					rnew(yyr) List(rnew(yyr) 
					Function_mod(rnew(yyr)
					 WithTypes(lis,b,c,eff,po,req,ens,ieff,oeff,throws, yyget_YY65(&yyyvsp[9].v))),
					 one.tms)));
    
break;
case 210:
#line 2189 "src/parse.y"
 let one= yyget_YY27(&yyyvsp[0].v);
		let ieff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[7].v));
		let oeff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[8].v));
		let throws =  yyget_YY64(&yyyvsp[9].v);
    yyval=YY27(Declarator(one.id, one.varloc,
                       rnew(yyr) List(rnew(yyr) 
								Function_mod(rnew(yyr) WithTypes(NULL,
                        	          false,NULL,
                                      yyget_YY49(&yyyvsp[2].v), yyget_YY50(&yyyvsp[3].v), yyget_YY57(&yyyvsp[5].v), yyget_YY57(&yyyvsp[6].v),
												 ieff,oeff,throws, yyget_YY65(&yyyvsp[10].v))),
                                one.tms)));
    
break;
case 211:
#line 2202 "src/parse.y"
 let one= yyget_YY27(&yyyvsp[0].v);
      yyval=YY27(Declarator(one.id,one.varloc, rnew(yyr) List(rnew(yyr) Function_mod(rnew(yyr) NoTypes( yyget_YY36(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[3].l))),one.tms))); 
break;
case 212:
#line 2206 "src/parse.y"
 let ts = List::map_c(typ2tvar,LOC(yyyvsp[1].l,yyyvsp[3].l),List::imp_rev( yyget_YY40(&yyyvsp[2].v)));
      let one= yyget_YY27(&yyyvsp[0].v);
      yyval=YY27(Declarator(one.id,one.varloc, rnew(yyr) List(rnew(yyr) TypeParams_mod(ts,LOC(yyyvsp[0].l,yyyvsp[3].l),false),one.tms)));
    
break;
case 213:
#line 2211 "src/parse.y"
 let one= yyget_YY27(&yyyvsp[0].v);
    yyval=YY27(Declarator(one.id, one.varloc, rnew(yyr) List(rnew(yyr) Attributes_mod(SLOC(yyyvsp[1].l), yyget_YY45(&yyyvsp[1].v)),one.tms)));
  
break;
case 214:
#line 2218 "src/parse.y"
 yyval = (yyyvsp[0].v); 
break;
case 215:
#line 2219 "src/parse.y"
 yyval = YY26(imp_append( yyget_YY26(&yyyvsp[0].v), yyget_YY26(&yyyvsp[1].v))); 
break;
case 216:
#line 2224 "src/parse.y"
 list_t<type_modifier_t<`yy>,`yy> ans = NULL;
    if( yyget_YY45(&yyyvsp[3].v) != NULL)
      ans = rnew(yyr) List(rnew(yyr) Attributes_mod(SLOC(yyyvsp[3].l), yyget_YY45(&yyyvsp[3].v)), ans);
    // don't put location info on every pointer -- too expensive
    ptrloc_t ptrloc = NULL;
    let $(ploc,nullable,bound) = * yyget_YY1(&yyyvsp[0].v);
    if (Absyn::porting_c_code)
      ptrloc = new PtrLoc{.ptr_loc=ploc,.rgn_loc=SLOC(yyyvsp[2].l),
                          .zt_loc=SLOC(yyyvsp[1].l)};
  //  let $(nullable,bound,zeroterm,rgn_opt) = collapse_pointer_quals(ploc,nullable,bound,$3,$2);
  //  ans = rnew(yyr) List(rnew(yyr) Pointer_mod(PtrAtts(rgn_opt,nullable,bound,zeroterm,ptrloc),$5), ans);
    let mod = make_pointer_mod(yyr,ptrloc,nullable,bound, yyget_YY44(&yyyvsp[2].v), yyget_YY56(&yyyvsp[1].v), yyget_YY23(&yyyvsp[4].v));
    ans = rnew(yyr) List(mod, ans);
    yyval = YY26(ans);
  
break;
case 217:
#line 2241 "src/parse.y"
 yyval=YY56(NULL); 
break;
case 218:
#line 2242 "src/parse.y"
 yyval=YY56(rnew(yyr) List( yyget_YY55(&yyyvsp[0].v), yyget_YY56(&yyyvsp[1].v))); 
break;
case 219:
#line 2247 "src/parse.y"
 yyval = YY55(rnew(yyr) Numelts_ptrqual( yyget_Exp_tok(&yyyvsp[2].v))); 
break;
case 220:
#line 2249 "src/parse.y"
 yyval = YY55(rnew(yyr) Region_ptrqual( yyget_YY40(&yyyvsp[2].v))); 
break;
case 221:
#line 2251 "src/parse.y"
 yyval = YY55(rnew(yyr) Thin_ptrqual); 
break;
case 222:
#line 2253 "src/parse.y"
 yyval = YY55(rnew(yyr) Fat_ptrqual); 
break;
case 223:
#line 2255 "src/parse.y"
 yyval = YY55(rnew(yyr) Zeroterm_ptrqual); 
break;
case 224:
#line 2257 "src/parse.y"
 yyval = YY55(rnew(yyr) Nozeroterm_ptrqual); 
break;
case 225:
#line 2259 "src/parse.y"
 yyval = YY55(rnew(yyr) Notnull_ptrqual); 
break;
case 226:
#line 2261 "src/parse.y"
 yyval = YY55(rnew(yyr) Nullable_ptrqual); 
break;
case 227:
#line 2266 "src/parse.y"
 // avoid putting location info on here when not porting C code
     seg_t loc = SLOC(yyyvsp[0].l);
     if (!parsing_tempest)
       yyval=YY1(new $(loc,true_type,  yyget_YY2(&yyyvsp[1].v))); 
     else 
       yyval=YY1(new $(loc,true_type, fat_bound_type)); 
   
break;
case 228:
#line 2274 "src/parse.y"
  seg_t loc = SLOC(yyyvsp[0].l);
     yyval=YY1(new $(loc, false_type,  yyget_YY2(&yyyvsp[1].v))); 
  
break;
case 229:
#line 2278 "src/parse.y"
 seg_t loc = SLOC(yyyvsp[0].l);
    yyval=YY1(new $(loc, true_type,  fat_bound_type));  
  
break;
case 230:
#line 2283 "src/parse.y"
 yyval=YY2(bounds_one()); 
break;
case 231:
#line 2284 "src/parse.y"
 yyval=YY2(thin_bounds_exp( yyget_Exp_tok(&yyyvsp[1].v))); 
break;
case 232:
#line 2287 "src/parse.y"
 yyval = YY51(Tcutil::any_bool(NULL)); 
break;
case 233:
#line 2288 "src/parse.y"
 yyval = YY51(true_type);    
break;
case 234:
#line 2289 "src/parse.y"
 yyval = YY51(false_type);   
break;
case 235:
#line 2300 "src/parse.y"
yyval = YY40(new List( yyget_YY44(&yyyvsp[0].v), NULL));
break;
case 236:
#line 2301 "src/parse.y"
yyval = YY40(new List( yyget_YY44(&yyyvsp[0].v),  yyget_YY40(&yyyvsp[2].v)));
break;
case 237:
#line 2305 "src/parse.y"
 yyval = YY44(new_evar(&Tcutil::trko,NULL)); 
break;
case 238:
#line 2306 "src/parse.y"
 let es =  yyget_YY40(&yyyvsp[0].v); 
				  if (List::length(es) == 1) 
				  {
					 yyval = YY44(es->hd);
				  } 
				  else 
				  {
					 yyval = YY44(join_eff( yyget_YY40(&yyyvsp[0].v)));
				  } 
				
break;
case 239:
#line 2316 "src/parse.y"
 yyval = YY44(new_evar(&Tcutil::trko,NULL)); 
break;
case 240:
#line 2320 "src/parse.y"
 yyval = YY23(empty_tqual(SLOC(yyvs[yyvsp_offset+1].l))); 
break;
case 241:
#line 2321 "src/parse.y"
 yyval = YY23(combine_tqual( yyget_YY23(&yyyvsp[0].v), yyget_YY23(&yyyvsp[1].v))); 
break;
case 242:
#line 2326 "src/parse.y"
 yyval=YY39(new $(List::imp_rev( yyget_YY38(&yyyvsp[0].v)),false,NULL, yyget_YY49(&yyyvsp[1].v), yyget_YY50(&yyyvsp[2].v))); 
break;
case 243:
#line 2328 "src/parse.y"
 yyval=YY39(new $(List::imp_rev( yyget_YY38(&yyyvsp[0].v)),true,NULL, yyget_YY49(&yyyvsp[3].v), yyget_YY50(&yyyvsp[4].v))); 
break;
case 244:
#line 2331 "src/parse.y"
 let &$(n,tq,t) =  yyget_YY37(&yyyvsp[2].v);
  let v = new VarargInfo {.name = n,.tq = tq,.type = t,.inject =  yyget_YY31(&yyyvsp[1].v)};
  yyval=YY39(new $(NULL,false,v, yyget_YY49(&yyyvsp[3].v), yyget_YY50(&yyyvsp[4].v))); 

break;
case 245:
#line 2337 "src/parse.y"
 let &$(n,tq,t) =  yyget_YY37(&yyyvsp[4].v);
  let v = new VarargInfo {.name = n,.tq = tq,.type = t,.inject =  yyget_YY31(&yyyvsp[3].v)};
  yyval=YY39(new $(List::imp_rev( yyget_YY38(&yyyvsp[0].v)),false,v, yyget_YY49(&yyyvsp[5].v), yyget_YY50(&yyyvsp[6].v))); 

break;
case 246:
#line 2345 "src/parse.y"
 yyval = YY44(id2type( yyget_String_tok(&yyyvsp[0].v),new Unknown_kb(NULL))); 
break;
case 247:
#line 2346 "src/parse.y"
 yyval = YY44(id2type( yyget_String_tok(&yyyvsp[0].v),Tcutil::kind_to_bound( yyget_YY43(&yyyvsp[2].v)))); 
break;
case 248:
#line 2349 "src/parse.y"
 yyval=YY49(NULL); 
break;
case 249:
#line 2350 "src/parse.y"
 yyval = YY49(join_eff( yyget_YY40(&yyyvsp[1].v))); 
break;
case 250:
#line 2354 "src/parse.y"
 yyval = YY50(NULL); 
break;
case 251:
#line 2355 "src/parse.y"
 yyval = (yyyvsp[1].v); 
break;
case 252:
#line 2360 "src/parse.y"
 // FIX: if we replace the following with:
    // $$ = ^$(new List(new $(join_eff($1),id2type(id,new Less_kb(NULL,TopRgnKind))), NULL));
    // then we get a core-dump.  I think it must be the gcc bug...
    let kb = new Less_kb(NULL,&Tcutil::trk);
    let id =  yyget_String_tok(&yyyvsp[2].v);
    let t = id2type(id,kb);
    yyval = YY50(new List(new $(join_eff( yyget_YY40(&yyyvsp[0].v)),t), NULL));
  
break;
case 253:
#line 2369 "src/parse.y"
 
    let kb = new Less_kb(NULL,&Tcutil::trk);
    let id =  yyget_String_tok(&yyyvsp[2].v);
    let t = id2type(id,kb);
    yyval = YY50(new List(new $(join_eff( yyget_YY40(&yyyvsp[0].v)),t), yyget_YY50(&yyyvsp[4].v))); 
  
break;
case 254:
#line 2379 "src/parse.y"
yyval = YY31(false);
break;
case 255:
#line 2381 "src/parse.y"
 if (zstrcmp( yyget_String_tok(&yyyvsp[0].v),"inject") != 0) 
         Warn::err(SLOC(yyyvsp[0].l),"missing type in function declaration");
       yyval = YY31(true);
     
break;
case 256:
#line 2388 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 257:
#line 2389 "src/parse.y"
 yyval=YY40(List::imp_append( yyget_YY40(&yyyvsp[0].v), yyget_YY40(&yyyvsp[2].v))); 
break;
case 258:
#line 2393 "src/parse.y"
 yyval=YY40(NULL); 
break;
case 259:
#line 2394 "src/parse.y"
 yyval=(yyyvsp[1].v); 
break;
case 260:
#line 2396 "src/parse.y"
 yyval=YY40(new List(regionsof_eff( yyget_YY44(&yyyvsp[2].v)), NULL)); 
break;
case 261:
#line 2398 "src/parse.y"
 set_vartyp_kind( yyget_YY44(&yyyvsp[0].v),&Tcutil::ek,false);
    yyval = YY40(new List( yyget_YY44(&yyyvsp[0].v),NULL)); 
  
break;
case 262:
#line 2418 "src/parse.y"
 yyval = YY40(new List(access_eff(type_name_to_type( yyget_YY37(&yyyvsp[0].v),SLOC(yyyvsp[0].l))),NULL)); 
break;
case 263:
#line 2420 "src/parse.y"
 yyval = YY40(new List(access_eff(type_name_to_type( yyget_YY37(&yyyvsp[0].v),SLOC(yyyvsp[0].l))), yyget_YY40(&yyyvsp[2].v))); 
break;
case 264:
#line 2426 "src/parse.y"
 yyval=YY38(new List( yyget_YY37(&yyyvsp[0].v),NULL)); 
break;
case 265:
#line 2428 "src/parse.y"
 yyval=YY38(new List( yyget_YY37(&yyyvsp[2].v), yyget_YY38(&yyyvsp[0].v))); 
break;
case 266:
#line 2434 "src/parse.y"
 let $(tq,tspecs,atts) =  yyget_YY35(&yyyvsp[0].v); 
      if (tq.loc == 0) tq.loc = SLOC(yyyvsp[0].l);
      let Declarator(qv,varloc,tms) =  yyget_YY27(&yyyvsp[1].v);
      let t = speclist2typ(tspecs, SLOC(yyyvsp[0].l));
      let $(tq2,t2,tvs,atts2) = apply_tms(tq,t,atts,tms);
      if (tvs != NULL)
        Warn::err(SLOC(yyyvsp[1].l),"parameter with bad type params");
      if(is_qvar_qualified(qv))
        Warn::err(SLOC(yyyvsp[0].l),"parameter cannot be qualified with a namespace");
      var_opt_t idopt = (*qv)[1];
      if (atts2 != NULL)
        Warn::warn(LOC(yyyvsp[0].l,yyyvsp[1].l),"extra attributes on parameter, ignoring");
      yyval=YY37(new $(idopt,tq2,t2));
    
break;
case 267:
#line 2449 "src/parse.y"
 let $(tq,tspecs,atts) =  yyget_YY35(&yyyvsp[0].v); 
      if (tq.loc == 0) tq.loc = SLOC(yyyvsp[0].l);
      let t = speclist2typ(tspecs, SLOC(yyyvsp[0].l));
      if (atts != NULL)
        Warn::warn(SLOC(yyyvsp[0].l),"bad attributes on parameter, ignoring");
      yyval=YY37(new $(NULL,tq,t));
    
break;
case 268:
#line 2457 "src/parse.y"
 let $(tq,tspecs,atts) =  yyget_YY35(&yyyvsp[0].v); 
      if (tq.loc == 0) tq.loc = SLOC(yyyvsp[0].l);
      let t = speclist2typ(tspecs, SLOC(yyyvsp[0].l));
      let tms =  yyget_YY30(&yyyvsp[1].v).tms;
      let $(tq2,t2,tvs,atts2) = apply_tms(tq,t,atts,tms);
      if (tvs != NULL) // Ex: int (@)<`a>
        Warn::warn(LOC(yyyvsp[0].l,yyyvsp[1].l),
                     "bad type parameters on formal argument, ignoring");
      if (atts2 != NULL)
        Warn::warn(LOC(yyyvsp[0].l,yyyvsp[1].l),"bad attributes on parameter, ignoring");
      yyval=YY37(new $(NULL,tq2,t2));
    
break;
case 269:
#line 2473 "src/parse.y"
 yyval=YY36(List::imp_rev( yyget_YY36(&yyyvsp[0].v))); 
break;
case 270:
#line 2477 "src/parse.y"
 yyval=YY36(new List(new  yyget_String_tok(&yyyvsp[0].v),NULL)); 
break;
case 271:
#line 2479 "src/parse.y"
 yyval=YY36(new List(new  yyget_String_tok(&yyyvsp[2].v), yyget_YY36(&yyyvsp[0].v))); 
break;
case 272:
#line 2483 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 273:
#line 2484 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 274:
#line 2489 "src/parse.y"
 yyval=Exp_tok(new_exp(new UnresolvedMem_e(NULL,NULL),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 275:
#line 2491 "src/parse.y"
 yyval=Exp_tok(new_exp(new UnresolvedMem_e(NULL,List::imp_rev( yyget_YY5(&yyyvsp[1].v))),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 276:
#line 2493 "src/parse.y"
 yyval=Exp_tok(new_exp(new UnresolvedMem_e(NULL,List::imp_rev( yyget_YY5(&yyyvsp[1].v))),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 277:
#line 2495 "src/parse.y"
 let vd = new_vardecl(SLOC(yyyvsp[2].l),new $(Loc_n,new  yyget_String_tok(&yyyvsp[2].v)), uint_type,
                           uint_exp(0,SLOC(yyyvsp[2].l)));
      // make the index variable const
      vd->tq.real_const = true;
      yyval=Exp_tok(new_exp(new Comprehension_e(vd,  yyget_Exp_tok(&yyyvsp[4].v),  yyget_Exp_tok(&yyyvsp[6].v), false),LOC(yyyvsp[0].l,yyyvsp[7].l)));
    
break;
case 278:
#line 2502 "src/parse.y"
 // DJG: notice the parser drops the IDENTIFIER on the floor.
      let t = type_name_to_type( yyget_YY37(&yyyvsp[6].v),SLOC(yyyvsp[6].l));
      yyval=Exp_tok(new_exp(new ComprehensionNoinit_e( yyget_Exp_tok(&yyyvsp[4].v), t, false),LOC(yyyvsp[0].l,yyyvsp[7].l)));
    
break;
case 279:
#line 2511 "src/parse.y"
 yyval=YY5(new List(new $(NULL, yyget_Exp_tok(&yyyvsp[0].v)),NULL)); 
break;
case 280:
#line 2513 "src/parse.y"
 yyval=YY5(new List(new $( yyget_YY41(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[1].v)),NULL)); 
break;
case 281:
#line 2515 "src/parse.y"
 yyval=YY5(new List(new $(NULL, yyget_Exp_tok(&yyyvsp[2].v)), yyget_YY5(&yyyvsp[0].v))); 
break;
case 282:
#line 2517 "src/parse.y"
 yyval=YY5(new List(new $( yyget_YY41(&yyyvsp[2].v), yyget_Exp_tok(&yyyvsp[3].v)), yyget_YY5(&yyyvsp[0].v))); 
break;
case 283:
#line 2521 "src/parse.y"
 yyval=YY41(List::imp_rev( yyget_YY41(&yyyvsp[0].v))); 
break;
case 284:
#line 2522 "src/parse.y"
 yyval=YY41(new List(new FieldName(new  yyget_String_tok(&yyyvsp[0].v)),NULL)); 
break;
case 285:
#line 2527 "src/parse.y"
 yyval=YY41(new List( yyget_YY42(&yyyvsp[0].v),NULL)); 
break;
case 286:
#line 2528 "src/parse.y"
 yyval=YY41(new List( yyget_YY42(&yyyvsp[1].v), yyget_YY41(&yyyvsp[0].v)));   
break;
case 287:
#line 2532 "src/parse.y"
yyval = YY42(new ArrayElement( yyget_Exp_tok(&yyyvsp[1].v)));
break;
case 288:
#line 2533 "src/parse.y"
yyval = YY42(new FieldName(new  yyget_String_tok(&yyyvsp[1].v)));
break;
case 289:
#line 2538 "src/parse.y"
 let $(tq,tss,atts) =  yyget_YY35(&yyyvsp[0].v);
      let t = speclist2typ(tss, SLOC(yyyvsp[0].l));
      if (atts != NULL)
        Warn::warn(SLOC(yyyvsp[0].l),"ignoring attributes in type");
      yyval=YY37(new $(NULL,tq,t));
    
break;
case 290:
#line 2545 "src/parse.y"
 let $(tq,tss,atts) =  yyget_YY35(&yyyvsp[0].v);
      let t = speclist2typ(tss, SLOC(yyyvsp[0].l));
      let tms =  yyget_YY30(&yyyvsp[1].v).tms;
      let t_info = apply_tms(tq,t,atts,tms);
      if (t_info[2] != NULL)
        // Ex: int (@)<`a>
        Warn::warn(SLOC(yyyvsp[1].l),"bad type params, ignoring");
      if (t_info[3] != NULL)
        Warn::warn(SLOC(yyyvsp[1].l),"bad specifiers, ignoring");
      yyval=YY37(new $(NULL,t_info[0],t_info[1]));
    
break;
case 291:
#line 2559 "src/parse.y"
 yyval = YY44(type_name_to_type( yyget_YY37(&yyyvsp[0].v),SLOC(yyyvsp[0].l))); 
break;
case 292:
#line 2560 "src/parse.y"
 yyval = YY44(join_eff(NULL)); 
break;
case 293:
#line 2561 "src/parse.y"
 yyval = YY44(join_eff( yyget_YY40(&yyyvsp[1].v))); 
break;
case 294:
#line 2562 "src/parse.y"
 yyval = YY44(regionsof_eff( yyget_YY44(&yyyvsp[2].v))); 
break;
case 295:
#line 2563 "src/parse.y"
 yyval = YY44(join_eff(new List( yyget_YY44(&yyyvsp[0].v), yyget_YY40(&yyyvsp[2].v)))); 
break;
case 296:
#line 2569 "src/parse.y"
 yyval=YY40(new List( yyget_YY44(&yyyvsp[0].v),NULL)); 
break;
case 297:
#line 2570 "src/parse.y"
yyval=YY40(new List( yyget_YY44(&yyyvsp[2].v), yyget_YY40(&yyyvsp[0].v))); 
break;
case 298:
#line 2575 "src/parse.y"
 yyval=YY30(Abstractdeclarator( yyget_YY26(&yyyvsp[0].v))); 
break;
case 299:
#line 2577 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 300:
#line 2579 "src/parse.y"
 yyval=YY30(Abstractdeclarator(List::imp_append( yyget_YY26(&yyyvsp[0].v), yyget_YY30(&yyyvsp[1].v).tms))); 
break;
case 301:
#line 2584 "src/parse.y"
 yyval=(yyyvsp[1].v); 
break;
case 302:
#line 2586 "src/parse.y"
 yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) Carray_mod( yyget_YY51(&yyyvsp[2].v),SLOC(yyyvsp[2].l)),NULL))); 
break;
case 303:
#line 2588 "src/parse.y"
 yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) Carray_mod( yyget_YY51(&yyyvsp[3].v),SLOC(yyyvsp[3].l)), yyget_YY30(&yyyvsp[0].v).tms)));
break;
case 304:
#line 2590 "src/parse.y"
 yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) ConstArray_mod( yyget_Exp_tok(&yyyvsp[1].v), yyget_YY51(&yyyvsp[3].v),SLOC(yyyvsp[3].l)),NULL)));
break;
case 305:
#line 2592 "src/parse.y"
 yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) ConstArray_mod( yyget_Exp_tok(&yyyvsp[2].v), yyget_YY51(&yyyvsp[4].v),SLOC(yyyvsp[4].l)),
                                             yyget_YY30(&yyyvsp[0].v).tms)));
    
break;
case 306:
#line 2600 "src/parse.y"

		let ieff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[6].v));
		let oeff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[7].v));
		let throws =  yyget_YY64(&yyyvsp[8].v);
		 yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) 
										   Function_mod(rnew(yyr) 
											WithTypes(NULL,false,NULL, yyget_YY49(&yyyvsp[1].v), yyget_YY50(&yyyvsp[2].v), yyget_YY57(&yyyvsp[4].v), yyget_YY57(&yyyvsp[5].v),
											ieff,oeff,throws, yyget_YY65(&yyyvsp[9].v))),NULL)));
    
break;
case 307:
#line 2613 "src/parse.y"
 let &$(lis,b,c,eff,po) =  yyget_YY39(&yyyvsp[1].v);
		let ieff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[5].v));
		let oeff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[6].v));
		let throws =  yyget_YY64(&yyyvsp[7].v);
      yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) 
											Function_mod(rnew(yyr) 
											WithTypes(lis,b,c,eff,po, yyget_YY57(&yyyvsp[3].v), yyget_YY57(&yyyvsp[4].v),
															ieff,oeff,throws, yyget_YY65(&yyyvsp[8].v))),NULL)));
    
break;
case 308:
#line 2626 "src/parse.y"

		let ieff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[7].v));
		let oeff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[8].v));
		let throws =  yyget_YY64(&yyyvsp[9].v);
		 yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) 
											Function_mod(rnew(yyr) 
											WithTypes(NULL,false,NULL,
														 yyget_YY49(&yyyvsp[2].v), yyget_YY50(&yyyvsp[3].v), yyget_YY57(&yyyvsp[5].v), yyget_YY57(&yyyvsp[6].v),
														ieff,oeff,throws, yyget_YY65(&yyyvsp[10].v))),
									       yyget_YY30(&yyyvsp[0].v).tms)));
    
break;
case 309:
#line 2643 "src/parse.y"
 let &$(lis,b,c,eff,po) =  yyget_YY39(&yyyvsp[2].v);
		let ieff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[6].v));
		let oeff = Absyn::parse_rgneffects(SLOC(yyyvsp[0].l), yyget_YY49(&yyyvsp[7].v));
		let throws =  yyget_YY64(&yyyvsp[8].v);
      yyval=YY30(Abstractdeclarator(rnew(yyr)
											 List(rnew(yyr) 
												Function_mod(rnew(yyr) 
												 WithTypes(lis,b,c,eff,po, yyget_YY57(&yyyvsp[4].v), yyget_YY57(&yyyvsp[5].v),
															 ieff,oeff,throws, yyget_YY65(&yyyvsp[9].v))), yyget_YY30(&yyyvsp[0].v).tms)));
    
break;
case 310:
#line 2655 "src/parse.y"
 let ts = List::map_c(typ2tvar,LOC(yyyvsp[1].l,yyyvsp[3].l),List::imp_rev( yyget_YY40(&yyyvsp[2].v)));
      yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) TypeParams_mod(ts,LOC(yyyvsp[1].l,yyyvsp[3].l),false),
                                       yyget_YY30(&yyyvsp[0].v).tms)));
    
break;
case 311:
#line 2660 "src/parse.y"
 yyval=YY30(Abstractdeclarator(rnew(yyr) List(rnew(yyr) Attributes_mod(SLOC(yyyvsp[1].l), yyget_YY45(&yyyvsp[1].v)), yyget_YY30(&yyyvsp[0].v).tms)));
    
break;
case 312:
#line 2666 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 313:
#line 2667 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 314:
#line 2668 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 315:
#line 2669 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 316:
#line 2670 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 317:
#line 2671 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 318:
#line 2672 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 319:
#line 2673 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 320:
#line 2680 "src/parse.y"
 
    let ve = Absyn::var_exp( yyget_QualId_tok(&yyyvsp[4].v), LOC(yyyvsp[4].l,yyyvsp[4].l));
     yyval=Stmt_tok(Absyn::spawn_stmt( yyget_YY4(&yyyvsp[2].v),ve, yyget_YY4(&yyyvsp[6].v),LOC(yyyvsp[0].l,yyyvsp[8].l))); 
   
break;
case 321:
#line 2686 "src/parse.y"
 
     let ve = Absyn::var_exp( yyget_QualId_tok(&yyyvsp[1].v), LOC(yyyvsp[1].l,yyyvsp[1].l));
      yyval=Stmt_tok(Absyn::spawn_stmt(NULL,ve, yyget_YY4(&yyyvsp[3].v),LOC(yyyvsp[0].l,yyyvsp[5].l))); 
   
break;
case 322:
#line 2692 "src/parse.y"

     let ve = Absyn::var_exp( yyget_QualId_tok(&yyyvsp[1].v), LOC(yyyvsp[1].l,yyyvsp[1].l));
     yyval=Stmt_tok(Absyn::spawn_stmt(NULL,ve,NULL,LOC(yyyvsp[0].l,yyyvsp[4].l))); 
   
break;
case 323:
#line 2698 "src/parse.y"

     let ve = Absyn::var_exp( yyget_QualId_tok(&yyyvsp[4].v), LOC(yyyvsp[4].l,yyyvsp[4].l));
     yyval=Stmt_tok(Absyn::spawn_stmt( yyget_YY4(&yyyvsp[2].v),ve,NULL,LOC(yyyvsp[0].l,yyyvsp[7].l))); 
   
break;
case 324:
#line 2706 "src/parse.y"
  
           yyval=Stmt_tok(cap_stmt( yyget_YY4(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
   
break;
case 325:
#line 2714 "src/parse.y"
 yyval=Stmt_tok(new_stmt(new Label_s(new  yyget_String_tok(&yyyvsp[0].v), yyget_Stmt_tok(&yyyvsp[2].v)),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 326:
#line 2718 "src/parse.y"
 yyval=Stmt_tok(skip_stmt(SLOC(yyyvsp[0].l))); 
break;
case 327:
#line 2719 "src/parse.y"
 yyval=Stmt_tok(exp_stmt( yyget_Exp_tok(&yyyvsp[0].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 328:
#line 2724 "src/parse.y"
 yyval=Stmt_tok(skip_stmt(LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 329:
#line 2725 "src/parse.y"
 yyval=(yyyvsp[1].v); 
break;
case 330:
#line 2730 "src/parse.y"
 yyval=Stmt_tok(flatten_declarations( yyget_YY16(&yyyvsp[0].v),skip_stmt(SLOC(yyyvsp[0].l)))); 
break;
case 331:
#line 2731 "src/parse.y"
 yyval=Stmt_tok(flatten_declarations( yyget_YY16(&yyyvsp[0].v), yyget_Stmt_tok(&yyyvsp[1].v))); 
break;
case 332:
#line 2732 "src/parse.y"
 yyval=Stmt_tok(new_stmt(new Label_s(new  yyget_String_tok(&yyyvsp[0].v),flatten_declarations( yyget_YY16(&yyyvsp[2].v),skip_stmt(DUMMYLOC))),SLOC(yyyvsp[0].l))
					      ); 
break;
case 333:
#line 2734 "src/parse.y"
 yyval=Stmt_tok(new_stmt(new Label_s(new  yyget_String_tok(&yyyvsp[0].v),flatten_declarations( yyget_YY16(&yyyvsp[2].v), yyget_Stmt_tok(&yyyvsp[3].v))),SLOC(yyyvsp[0].l))
						     ); 
break;
case 334:
#line 2736 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 335:
#line 2737 "src/parse.y"
 yyval=Stmt_tok(seq_stmt( yyget_Stmt_tok(&yyyvsp[0].v), yyget_Stmt_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 336:
#line 2738 "src/parse.y"
 yyval=Stmt_tok(flatten_decl(new_decl(new Fn_d( yyget_YY15(&yyyvsp[0].v)),SLOC(yyyvsp[0].l)),
					    skip_stmt(DUMMYLOC))); 
break;
case 337:
#line 2741 "src/parse.y"
 yyval=Stmt_tok(flatten_decl(new_decl(new Fn_d( yyget_YY15(&yyyvsp[0].v)),SLOC(yyyvsp[0].l)),  yyget_Stmt_tok(&yyyvsp[1].v))); 
break;
case 338:
#line 2746 "src/parse.y"
 yyval=Stmt_tok(ifthenelse_stmt( yyget_Exp_tok(&yyyvsp[2].v), yyget_Stmt_tok(&yyyvsp[4].v),skip_stmt(DUMMYLOC),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 339:
#line 2748 "src/parse.y"
 yyval=Stmt_tok(ifthenelse_stmt( yyget_Exp_tok(&yyyvsp[2].v), yyget_Stmt_tok(&yyyvsp[4].v), yyget_Stmt_tok(&yyyvsp[6].v),LOC(yyyvsp[0].l,yyyvsp[6].l))); 
break;
case 340:
#line 2754 "src/parse.y"
 yyval=Stmt_tok(switch_stmt( yyget_Exp_tok(&yyyvsp[2].v), yyget_YY8(&yyyvsp[5].v),LOC(yyyvsp[0].l,yyyvsp[6].l))); 
break;
case 341:
#line 2757 "src/parse.y"
 let e = unknownid_exp( yyget_QualId_tok(&yyyvsp[1].v),SLOC(yyyvsp[1].l));
      yyval=Stmt_tok(switch_stmt(e, yyget_YY8(&yyyvsp[3].v),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 342:
#line 2761 "src/parse.y"
 let e = tuple_exp( yyget_YY4(&yyyvsp[3].v),LOC(yyyvsp[1].l,yyyvsp[4].l));
      yyval=Stmt_tok(switch_stmt(e, yyget_YY8(&yyyvsp[6].v),LOC(yyyvsp[0].l,yyyvsp[7].l))); 
    
break;
case 343:
#line 2767 "src/parse.y"
 yyval=Stmt_tok(trycatch_stmt( yyget_Stmt_tok(&yyyvsp[1].v), yyget_YY8(&yyyvsp[4].v),LOC(yyyvsp[0].l,yyyvsp[5].l))); 
break;
case 344:
#line 2781 "src/parse.y"
 yyval=YY8(NULL); 
break;
case 345:
#line 2783 "src/parse.y"
 // JGM: some linux code has defaults coming before other
      // cases.
      yyval=YY8(new List(new Switch_clause(new_pat(&Wild_p_val,SLOC(yyyvsp[0].l)),NULL,
                                       NULL, yyget_Stmt_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)),
		      yyget_YY8(&yyyvsp[3].v)));
break;
case 346:
#line 2789 "src/parse.y"
 yyval=YY8(new List(new Switch_clause( yyget_YY9(&yyyvsp[1].v),NULL,NULL,
                                       fallthru_stmt(NULL,SLOC(yyyvsp[2].l)),
                                       LOC(yyyvsp[0].l,yyyvsp[3].l)), yyget_YY8(&yyyvsp[3].v))); 
break;
case 347:
#line 2793 "src/parse.y"
 yyval=YY8(new List(new Switch_clause( yyget_YY9(&yyyvsp[1].v),NULL,NULL, yyget_Stmt_tok(&yyyvsp[3].v),LOC(yyyvsp[0].l,yyyvsp[3].l)), yyget_YY8(&yyyvsp[4].v))); 
break;
case 348:
#line 2795 "src/parse.y"
 yyval=YY8(new List(new Switch_clause( yyget_YY9(&yyyvsp[1].v),NULL, yyget_Exp_tok(&yyyvsp[3].v),
                                       fallthru_stmt(NULL,SLOC(yyyvsp[4].l)),
                                       LOC(yyyvsp[0].l,yyyvsp[5].l)), yyget_YY8(&yyyvsp[5].v))); 
break;
case 349:
#line 2799 "src/parse.y"
 yyval=YY8(new List(new Switch_clause( yyget_YY9(&yyyvsp[1].v),NULL, yyget_Exp_tok(&yyyvsp[3].v), yyget_Stmt_tok(&yyyvsp[5].v),LOC(yyyvsp[0].l,yyyvsp[6].l)), yyget_YY8(&yyyvsp[6].v))); 
break;
case 350:
#line 2806 "src/parse.y"
 yyval=Stmt_tok(while_stmt( yyget_Exp_tok(&yyyvsp[2].v), yyget_Stmt_tok(&yyyvsp[4].v),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 351:
#line 2810 "src/parse.y"
 yyval=Stmt_tok(do_stmt( yyget_Stmt_tok(&yyyvsp[1].v), yyget_Exp_tok(&yyyvsp[4].v),LOC(yyyvsp[0].l,yyyvsp[6].l))); 
break;
case 352:
#line 2814 "src/parse.y"
 yyval=Stmt_tok(for_stmt(false_exp(DUMMYLOC),true_exp(DUMMYLOC),false_exp(DUMMYLOC),
		      yyget_Stmt_tok(&yyyvsp[5].v),LOC(yyyvsp[0].l,yyyvsp[5].l))); 
break;
case 353:
#line 2817 "src/parse.y"
 yyval=Stmt_tok(for_stmt(false_exp(DUMMYLOC),true_exp(DUMMYLOC), yyget_Exp_tok(&yyyvsp[4].v),
		      yyget_Stmt_tok(&yyyvsp[6].v),LOC(yyyvsp[0].l,yyyvsp[6].l))); 
break;
case 354:
#line 2820 "src/parse.y"
 yyval=Stmt_tok(for_stmt(false_exp(DUMMYLOC), yyget_Exp_tok(&yyyvsp[3].v),false_exp(DUMMYLOC),
		      yyget_Stmt_tok(&yyyvsp[6].v),LOC(yyyvsp[0].l,yyyvsp[6].l)));
break;
case 355:
#line 2823 "src/parse.y"
 yyval=Stmt_tok(for_stmt(false_exp(DUMMYLOC), yyget_Exp_tok(&yyyvsp[3].v), yyget_Exp_tok(&yyyvsp[5].v),
		      yyget_Stmt_tok(&yyyvsp[7].v),LOC(yyyvsp[0].l,yyyvsp[6].l))); 
break;
case 356:
#line 2826 "src/parse.y"
 yyval=Stmt_tok(for_stmt( yyget_Exp_tok(&yyyvsp[2].v),true_exp(DUMMYLOC),false_exp(DUMMYLOC),
		      yyget_Stmt_tok(&yyyvsp[6].v),LOC(yyyvsp[0].l,yyyvsp[6].l))); 
break;
case 357:
#line 2829 "src/parse.y"
 yyval=Stmt_tok(for_stmt( yyget_Exp_tok(&yyyvsp[2].v),true_exp(DUMMYLOC), yyget_Exp_tok(&yyyvsp[5].v),
		      yyget_Stmt_tok(&yyyvsp[7].v),LOC(yyyvsp[0].l,yyyvsp[7].l))); 
break;
case 358:
#line 2832 "src/parse.y"
 yyval=Stmt_tok(for_stmt( yyget_Exp_tok(&yyyvsp[2].v), yyget_Exp_tok(&yyyvsp[4].v),false_exp(DUMMYLOC),
		      yyget_Stmt_tok(&yyyvsp[7].v),LOC(yyyvsp[0].l,yyyvsp[7].l))); 
break;
case 359:
#line 2835 "src/parse.y"
 yyval=Stmt_tok(for_stmt( yyget_Exp_tok(&yyyvsp[2].v), yyget_Exp_tok(&yyyvsp[4].v), yyget_Exp_tok(&yyyvsp[6].v),
		      yyget_Stmt_tok(&yyyvsp[8].v),LOC(yyyvsp[0].l,yyyvsp[8].l))); 
break;
case 360:
#line 2838 "src/parse.y"
 let decls =  yyget_YY16(&yyyvsp[2].v);
      let s = for_stmt(false_exp(DUMMYLOC),true_exp(DUMMYLOC),false_exp(DUMMYLOC),
		      yyget_Stmt_tok(&yyyvsp[5].v),LOC(yyyvsp[0].l,yyyvsp[5].l));
      yyval=Stmt_tok(flatten_declarations(decls,s));
    
break;
case 361:
#line 2844 "src/parse.y"
 let decls =  yyget_YY16(&yyyvsp[2].v);
      let s     = for_stmt(false_exp(DUMMYLOC), yyget_Exp_tok(&yyyvsp[3].v),false_exp(DUMMYLOC),
                            yyget_Stmt_tok(&yyyvsp[6].v),LOC(yyyvsp[0].l,yyyvsp[6].l));
      yyval=Stmt_tok(flatten_declarations(decls,s));
    
break;
case 362:
#line 2850 "src/parse.y"
 let decls =  yyget_YY16(&yyyvsp[2].v);
      let s     = for_stmt(false_exp(DUMMYLOC),true_exp(DUMMYLOC), yyget_Exp_tok(&yyyvsp[4].v),
                            yyget_Stmt_tok(&yyyvsp[6].v),LOC(yyyvsp[0].l,yyyvsp[6].l));
      yyval=Stmt_tok(flatten_declarations(decls,s));
    
break;
case 363:
#line 2856 "src/parse.y"
 let decls =  yyget_YY16(&yyyvsp[2].v);
      let s     = for_stmt(false_exp(DUMMYLOC), yyget_Exp_tok(&yyyvsp[3].v), yyget_Exp_tok(&yyyvsp[5].v),
                            yyget_Stmt_tok(&yyyvsp[7].v),LOC(yyyvsp[0].l,yyyvsp[7].l));
      yyval=Stmt_tok(flatten_declarations(decls,s));
    
break;
case 364:
#line 2866 "src/parse.y"
 yyval=Stmt_tok(goto_stmt(new  yyget_String_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 365:
#line 2867 "src/parse.y"
 yyval=Stmt_tok(continue_stmt(SLOC(yyyvsp[0].l)));
break;
case 366:
#line 2868 "src/parse.y"
 yyval=Stmt_tok(break_stmt(SLOC(yyyvsp[0].l)));
break;
case 367:
#line 2869 "src/parse.y"
 yyval=Stmt_tok(return_stmt(NULL,SLOC(yyyvsp[0].l)));
break;
case 368:
#line 2870 "src/parse.y"
 yyval=Stmt_tok(return_stmt( yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l)));
break;
case 369:
#line 2872 "src/parse.y"
 yyval=Stmt_tok(fallthru_stmt(NULL,SLOC(yyyvsp[0].l)));
break;
case 370:
#line 2873 "src/parse.y"
 yyval=Stmt_tok(fallthru_stmt(NULL,SLOC(yyyvsp[0].l)));
break;
case 371:
#line 2875 "src/parse.y"
 yyval=Stmt_tok(fallthru_stmt( yyget_YY4(&yyyvsp[2].v),SLOC(yyyvsp[0].l)));
break;
case 372:
#line 2884 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 373:
#line 2887 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 374:
#line 2889 "src/parse.y"
 yyval=YY9(exp_pat(conditional_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v), yyget_Exp_tok(&yyyvsp[4].v),LOC(yyyvsp[0].l,yyyvsp[4].l)))); 
break;
case 375:
#line 2892 "src/parse.y"
yyval=(yyyvsp[0].v); 
break;
case 376:
#line 2894 "src/parse.y"
 yyval=YY9(exp_pat(or_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 377:
#line 2897 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 378:
#line 2899 "src/parse.y"
 yyval=YY9(exp_pat(and_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 379:
#line 2902 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 380:
#line 2904 "src/parse.y"
 yyval=YY9(exp_pat(prim2_exp(Bitor,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 381:
#line 2907 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 382:
#line 2909 "src/parse.y"
 yyval=YY9(exp_pat(prim2_exp(Bitxor,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 383:
#line 2912 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 384:
#line 2914 "src/parse.y"
 yyval=YY9(exp_pat(prim2_exp(Bitand,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 385:
#line 2917 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 386:
#line 2919 "src/parse.y"
 yyval=YY9(exp_pat(eq_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 387:
#line 2921 "src/parse.y"
 yyval=YY9(exp_pat(neq_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 388:
#line 2924 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 389:
#line 2926 "src/parse.y"
 yyval=YY9(exp_pat(lt_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 390:
#line 2928 "src/parse.y"
 yyval=YY9(exp_pat(gt_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 391:
#line 2930 "src/parse.y"
 yyval=YY9(exp_pat(lte_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 392:
#line 2932 "src/parse.y"
 yyval=YY9(exp_pat(gte_exp(pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 393:
#line 2935 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 394:
#line 2937 "src/parse.y"
yyval=YY9(exp_pat(prim2_exp(Bitlshift,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l)))); 
break;
case 395:
#line 2939 "src/parse.y"
yyval=YY9(exp_pat(prim2_exp(Bitlrshift,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))));
break;
case 396:
#line 2942 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 397:
#line 2944 "src/parse.y"
yyval=YY9(exp_pat(prim2_exp(Plus,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))));
break;
case 398:
#line 2946 "src/parse.y"
yyval=YY9(exp_pat(prim2_exp(Minus,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))));
break;
case 399:
#line 2949 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 400:
#line 2951 "src/parse.y"
yyval=YY9(exp_pat(prim2_exp(Times,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))));
break;
case 401:
#line 2953 "src/parse.y"
yyval=YY9(exp_pat(prim2_exp(Div,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))));
break;
case 402:
#line 2955 "src/parse.y"
yyval=YY9(exp_pat(prim2_exp(Mod,pat2exp( yyget_YY9(&yyyvsp[0].v)), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))));
break;
case 403:
#line 2958 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 404:
#line 2960 "src/parse.y"
  let t = type_name_to_type( yyget_YY37(&yyyvsp[1].v),SLOC(yyyvsp[1].l));
   yyval=YY9(exp_pat(cast_exp(t, yyget_Exp_tok(&yyyvsp[3].v),true,Unknown_coercion,LOC(yyyvsp[0].l,yyyvsp[3].l)))); 

break;
case 405:
#line 2966 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 406:
#line 2969 "src/parse.y"
 yyval=YY9(exp_pat( yyget_Exp_tok(&yyyvsp[1].v))); 
break;
case 407:
#line 2971 "src/parse.y"
 yyval=YY9(exp_pat(prim1_exp( yyget_YY6(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l)))); 
break;
case 408:
#line 2973 "src/parse.y"
 let t = type_name_to_type( yyget_YY37(&yyyvsp[2].v),SLOC(yyyvsp[2].l)); 
    yyval=YY9(exp_pat(sizeoftype_exp(t,LOC(yyyvsp[0].l,yyyvsp[3].l)))); 
  
break;
case 409:
#line 2977 "src/parse.y"
 yyval=YY9(exp_pat(sizeofexp_exp( yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l)))); 
break;
case 410:
#line 2979 "src/parse.y"
 yyval=YY9(exp_pat(offsetof_exp((* yyget_YY37(&yyyvsp[2].v))[2],List::imp_rev( yyget_YY3(&yyyvsp[4].v)),LOC(yyyvsp[0].l,yyyvsp[5].l)))); 
break;
case 411:
#line 2984 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 412:
#line 2992 "src/parse.y"
 yyval=(yyyvsp[0].v);
break;
case 413:
#line 2997 "src/parse.y"
 yyval=YY9(new_pat(&Wild_p_val,SLOC(yyyvsp[0].l)));
break;
case 414:
#line 2999 "src/parse.y"
 yyval=YY9(exp_pat( yyget_Exp_tok(&yyyvsp[1].v))); 
break;
case 415:
#line 3001 "src/parse.y"
 exp_t e =  yyget_Exp_tok(&yyyvsp[0].v);
    switch (e->r) {
    /* FIX: need patterns for wchar_t */
    case &Const_e({.Char_c = $(s,i)}): 
      yyval=YY9(new_pat(new Char_p(i),e->loc)); break;
    case &Const_e({.Short_c = $(s,i)}):
      yyval=YY9(new_pat(new Int_p(s,i),e->loc)); break;
    case &Const_e({.Int_c = $(s,i)}):
      yyval=YY9(new_pat(new Int_p(s,i),e->loc)); break;
    case &Const_e({.Float_c = $(s,i)}):
      yyval=YY9(new_pat(new Float_p(s,i),e->loc)); break;
    case &Const_e({.Null_c = _}):
      yyval=YY9(new_pat(&Null_p_val,e->loc)); break;
    case &Const_e({.String_c = _}): 
      Warn::err(SLOC(yyyvsp[0].l),"strings cannot occur within patterns"); break;
    case &Const_e({.Wstring_c = _}): 
      Warn::err(SLOC(yyyvsp[0].l),"strings cannot occur within patterns"); break;
    case &Const_e({.LongLong_c = _}): 
      Warn::err(SLOC(yyyvsp[0].l),"long long's in patterns not yet implemented"); break;
    default: 
      Warn::err(SLOC(yyyvsp[0].l),"bad constant in case");
    }
  
break;
case 416:
#line 3025 "src/parse.y"
 yyval=YY9(new_pat(new UnknownId_p( yyget_QualId_tok(&yyyvsp[0].v)),SLOC(yyyvsp[0].l))); 
break;
case 417:
#line 3027 "src/parse.y"
 if (strcmp( yyget_String_tok(&yyyvsp[1].v),"as") != 0) 
        Warn::err(SLOC(yyyvsp[1].l),"expecting `as'");
      yyval=YY9(new_pat(new Var_p(new_vardecl(SLOC(yyyvsp[0].l),new $(Loc_n, new  yyget_String_tok(&yyyvsp[0].v)),void_type,NULL),
                               yyget_YY9(&yyyvsp[2].v)),SLOC(yyyvsp[0].l))); 
    
break;
case 418:
#line 3033 "src/parse.y"
 if (strcmp( yyget_String_tok(&yyyvsp[0].v),"alias") != 0) 
        Warn::err(SLOC(yyyvsp[1].l),"expecting `alias'");
      let location = LOC(yyyvsp[0].l,yyyvsp[5].l);
      tvar_t tv = new Tvar(new  yyget_String_tok(&yyyvsp[2].v),-1,new Eq_kb(&Tcutil::rk));
      vardecl_t vd = new_vardecl(SLOC(yyyvsp[0].l),new $(Loc_n, new  yyget_String_tok(&yyyvsp[5].v)),
				 type_name_to_type( yyget_YY37(&yyyvsp[4].v),SLOC(yyyvsp[4].l)),NULL);
      yyval = YY9(new_pat(new AliasVar_p(tv,vd),location));
    
break;
case 419:
#line 3042 "src/parse.y"
 if (strcmp( yyget_String_tok(&yyyvsp[0].v),"alias") != 0) 
        Warn::err(SLOC(yyyvsp[1].l),"expecting `alias'");
      let location = LOC(yyyvsp[0].l,yyyvsp[5].l);
      tvar_t tv = new Tvar(new  yyget_String_tok(&yyyvsp[2].v),-1,new Eq_kb(&Tcutil::rk));
      vardecl_t vd = new_vardecl(SLOC(yyyvsp[0].l),new $(Loc_n, new  yyget_String_tok(&yyyvsp[5].v)),
				 type_name_to_type( yyget_YY37(&yyyvsp[4].v),SLOC(yyyvsp[4].l)),NULL);
      yyval = YY9(new_pat(new AliasVar_p(tv,vd),location));
    
break;
case 420:
#line 3051 "src/parse.y"
 let $(ps, dots) = *( yyget_YY10(&yyyvsp[2].v));
      yyval=YY9(new_pat(new Tuple_p(ps,dots),LOC(yyyvsp[0].l,yyyvsp[3].l)));
    
break;
case 421:
#line 3055 "src/parse.y"
 let $(ps, dots) = *( yyget_YY10(&yyyvsp[2].v));
      yyval=YY9(new_pat(new UnknownCall_p( yyget_QualId_tok(&yyyvsp[0].v),ps,dots),LOC(yyyvsp[0].l,yyyvsp[3].l)));
    
break;
case 422:
#line 3059 "src/parse.y"

	  let $(fps, dots) = *( yyget_YY14(&yyyvsp[3].v)); 
      let exist_ts =  List::map_c(typ2tvar,SLOC(yyyvsp[2].l), yyget_YY40(&yyyvsp[2].v));
      yyval=YY9(new_pat(new Aggr_p(new UnknownAggr(StructA, yyget_QualId_tok(&yyyvsp[0].v),NULL),
			       exist_ts,fps,dots),LOC(yyyvsp[0].l,yyyvsp[4].l)));
   
break;
case 423:
#line 3066 "src/parse.y"
  
		let $(fps, dots) = *( yyget_YY14(&yyyvsp[2].v)); 
      let exist_ts = List::map_c(typ2tvar,SLOC(yyyvsp[1].l), yyget_YY40(&yyyvsp[1].v));
      yyval=YY9(new_pat(new Aggr_p(NULL,exist_ts,fps,dots),LOC(yyyvsp[0].l,yyyvsp[3].l)));
   
break;
case 424:
#line 3072 "src/parse.y"
 yyval=YY9(new_pat(new Pointer_p( yyget_YY9(&yyyvsp[1].v)),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 425:
#line 3074 "src/parse.y"
 yyval=YY9(new_pat(new Pointer_p(new_pat(new Pointer_p( yyget_YY9(&yyyvsp[1].v)),LOC(yyyvsp[0].l,yyyvsp[1].l))),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 426:
#line 3076 "src/parse.y"
 yyval=YY9(new_pat(new Reference_p(new_vardecl(SLOC(yyyvsp[0].l), new $(Loc_n, new  yyget_String_tok(&yyyvsp[1].v)),
						void_type,NULL),
                                    new_pat(&Wild_p_val,SLOC(yyyvsp[1].l))),
		    LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 427:
#line 3081 "src/parse.y"
 if (strcmp( yyget_String_tok(&yyyvsp[2].v),"as") != 0)
        Warn::err(SLOC(yyyvsp[2].l),"expecting `as'");
      yyval=YY9(new_pat(new Reference_p(new_vardecl(SLOC(yyyvsp[0].l),new $(Loc_n, new  yyget_String_tok(&yyyvsp[1].v)),
						void_type,NULL),
                                     yyget_YY9(&yyyvsp[3].v)),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
    
break;
case 428:
#line 3088 "src/parse.y"
 let tag = id2type( yyget_String_tok(&yyyvsp[2].v),Tcutil::kind_to_bound(&Tcutil::ik));
     yyval=YY9(new_pat(new TagInt_p(typ2tvar(SLOC(yyyvsp[2].l),tag),
				new_vardecl(SLOC(yyyvsp[0].l),new $(Loc_n,new  yyget_String_tok(&yyyvsp[0].v)),
					    tag_type(tag),NULL)),
		   LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 429:
#line 3094 "src/parse.y"
 let tv = Tcutil::new_tvar(Tcutil::kind_to_bound(&Tcutil::ik));
     yyval=YY9(new_pat(new TagInt_p(tv,
				new_vardecl(SLOC(yyyvsp[0].l), new $(Loc_n,new  yyget_String_tok(&yyyvsp[0].v)),
					    tag_type(var_type(tv)),NULL)),
		   LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 430:
#line 3102 "src/parse.y"
 yyval=YY10(new $(List::rev( yyget_YY11(&yyyvsp[0].v)), false)); 
break;
case 431:
#line 3103 "src/parse.y"
 yyval=YY10(new $(List::rev( yyget_YY11(&yyyvsp[0].v)), true)); 
break;
case 432:
#line 3104 "src/parse.y"
 yyval=YY10(new $(NULL, true)); 
break;
case 433:
#line 3109 "src/parse.y"
yyval=YY11(new List( yyget_YY9(&yyyvsp[0].v),NULL));
break;
case 434:
#line 3111 "src/parse.y"
yyval=YY11(new List( yyget_YY9(&yyyvsp[2].v), yyget_YY11(&yyyvsp[0].v)));
break;
case 435:
#line 3116 "src/parse.y"
yyval=YY12(new $(NULL, yyget_YY9(&yyyvsp[0].v)));
break;
case 436:
#line 3118 "src/parse.y"
yyval=YY12(new $( yyget_YY41(&yyyvsp[0].v), yyget_YY9(&yyyvsp[1].v)));
break;
case 437:
#line 3121 "src/parse.y"
 yyval=YY14(new $(List::rev( yyget_YY13(&yyyvsp[0].v)), false)); 
break;
case 438:
#line 3122 "src/parse.y"
 yyval=YY14(new $(List::rev( yyget_YY13(&yyyvsp[0].v)), true)); 
break;
case 439:
#line 3123 "src/parse.y"
 yyval=YY14(new $(NULL, true)); 
break;
case 440:
#line 3128 "src/parse.y"
 yyval=YY13(new List( yyget_YY12(&yyyvsp[0].v),NULL));
break;
case 441:
#line 3130 "src/parse.y"
yyval=YY13(new List( yyget_YY12(&yyyvsp[2].v), yyget_YY13(&yyyvsp[0].v))); 
break;
case 442:
#line 3136 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 443:
#line 3138 "src/parse.y"
 yyval=Exp_tok(seq_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 444:
#line 3143 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 445:
#line 3145 "src/parse.y"
 yyval=Exp_tok(assignop_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_YY7(&yyyvsp[1].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 446:
#line 3147 "src/parse.y"
 yyval=Exp_tok(swap_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 447:
#line 3151 "src/parse.y"
 yyval=YY7(NULL); 
break;
case 448:
#line 3152 "src/parse.y"
 yyval=YY7(new Opt(Times)); 
break;
case 449:
#line 3153 "src/parse.y"
 yyval=YY7(new Opt(Div)); 
break;
case 450:
#line 3154 "src/parse.y"
 yyval=YY7(new Opt(Mod)); 
break;
case 451:
#line 3155 "src/parse.y"
 yyval=YY7(new Opt(Plus)); 
break;
case 452:
#line 3156 "src/parse.y"
 yyval=YY7(new Opt(Minus)); 
break;
case 453:
#line 3157 "src/parse.y"
 yyval=YY7(new Opt(Bitlshift)); 
break;
case 454:
#line 3158 "src/parse.y"
 yyval=YY7(new Opt(Bitlrshift)); 
break;
case 455:
#line 3159 "src/parse.y"
 yyval=YY7(new Opt(Bitand)); 
break;
case 456:
#line 3160 "src/parse.y"
 yyval=YY7(new Opt(Bitxor)); 
break;
case 457:
#line 3161 "src/parse.y"
 yyval=YY7(new Opt(Bitor)); 
break;
case 458:
#line 3166 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 459:
#line 3168 "src/parse.y"
 yyval=Exp_tok(conditional_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v), yyget_Exp_tok(&yyyvsp[4].v),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 460:
#line 3171 "src/parse.y"
 yyval=Exp_tok(throw_exp( yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 461:
#line 3174 "src/parse.y"
 yyval=Exp_tok(New_exp(NULL, yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 462:
#line 3176 "src/parse.y"
 yyval=Exp_tok(New_exp(NULL, yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 463:
#line 3178 "src/parse.y"
 yyval=Exp_tok(New_exp( yyget_Exp_tok(&yyyvsp[2].v), yyget_Exp_tok(&yyyvsp[4].v),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 464:
#line 3180 "src/parse.y"
 yyval=Exp_tok(New_exp( yyget_Exp_tok(&yyyvsp[2].v), yyget_Exp_tok(&yyyvsp[4].v),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 465:
#line 3184 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 466:
#line 3188 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 467:
#line 3190 "src/parse.y"
 yyval=Exp_tok(or_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 468:
#line 3194 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 469:
#line 3196 "src/parse.y"
 yyval=Exp_tok(and_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 470:
#line 3200 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 471:
#line 3202 "src/parse.y"
 yyval=Exp_tok(prim2_exp(Bitor, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 472:
#line 3206 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 473:
#line 3208 "src/parse.y"
 yyval=Exp_tok(prim2_exp(Bitxor, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 474:
#line 3212 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 475:
#line 3214 "src/parse.y"
 yyval=Exp_tok(prim2_exp(Bitand, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 476:
#line 3218 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 477:
#line 3220 "src/parse.y"
 yyval=Exp_tok(eq_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 478:
#line 3222 "src/parse.y"
 yyval=Exp_tok(neq_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 479:
#line 3226 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 480:
#line 3228 "src/parse.y"
 yyval=Exp_tok(lt_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 481:
#line 3230 "src/parse.y"
 yyval=Exp_tok(gt_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 482:
#line 3232 "src/parse.y"
 yyval=Exp_tok(lte_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 483:
#line 3234 "src/parse.y"
 yyval=Exp_tok(gte_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 484:
#line 3238 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 485:
#line 3240 "src/parse.y"
 yyval=Exp_tok(prim2_exp(Bitlshift, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 486:
#line 3242 "src/parse.y"
 yyval=Exp_tok(prim2_exp(Bitlrshift, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 487:
#line 3246 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 488:
#line 3248 "src/parse.y"
 yyval=Exp_tok(prim2_exp(Plus, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 489:
#line 3250 "src/parse.y"
 yyval=Exp_tok(prim2_exp(Minus, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 490:
#line 3254 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 491:
#line 3256 "src/parse.y"
 yyval=Exp_tok(prim2_exp(Times, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 492:
#line 3258 "src/parse.y"
 yyval=Exp_tok(prim2_exp(Div, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 493:
#line 3260 "src/parse.y"
 yyval=Exp_tok(prim2_exp(Mod, yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 494:
#line 3264 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 495:
#line 3266 "src/parse.y"
 let t = type_name_to_type( yyget_YY37(&yyyvsp[1].v),SLOC(yyyvsp[1].l));
      yyval=Exp_tok(cast_exp(t, yyget_Exp_tok(&yyyvsp[3].v),true,Unknown_coercion,LOC(yyyvsp[0].l,yyyvsp[3].l))); 
    
break;
case 496:
#line 3272 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 497:
#line 3273 "src/parse.y"
 yyval=Exp_tok(increment_exp( yyget_Exp_tok(&yyyvsp[1].v),PreInc,LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 498:
#line 3274 "src/parse.y"
 yyval=Exp_tok(increment_exp( yyget_Exp_tok(&yyyvsp[1].v),PreDec,LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 499:
#line 3275 "src/parse.y"
 yyval=Exp_tok(address_exp( yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 500:
#line 3276 "src/parse.y"
 yyval=Exp_tok(deref_exp  ( yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 501:
#line 3277 "src/parse.y"
 yyval=Exp_tok(prim1_exp(Plus, yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 502:
#line 3278 "src/parse.y"
 yyval=Exp_tok(prim1_exp( yyget_YY6(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 503:
#line 3280 "src/parse.y"
 let t = type_name_to_type( yyget_YY37(&yyyvsp[2].v),SLOC(yyyvsp[2].l));
    yyval=Exp_tok(sizeoftype_exp(t,LOC(yyyvsp[0].l,yyyvsp[3].l))); 
  
break;
case 504:
#line 3283 "src/parse.y"
 yyval=Exp_tok(sizeofexp_exp( yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 505:
#line 3285 "src/parse.y"
 let t = type_name_to_type( yyget_YY37(&yyyvsp[2].v),SLOC(yyyvsp[2].l));
     yyval=Exp_tok(offsetof_exp(t,List::imp_rev( yyget_YY3(&yyyvsp[4].v)),LOC(yyyvsp[0].l,yyyvsp[5].l))); 
   
break;
case 506:
#line 3290 "src/parse.y"
 yyval=Exp_tok(new_exp(new Malloc_e(MallocInfo{false,NULL,NULL, yyget_Exp_tok(&yyyvsp[2].v),false,false}),
                   LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 507:
#line 3293 "src/parse.y"
 yyval=Exp_tok(new_exp(new Malloc_e(MallocInfo{false, yyget_Exp_tok(&yyyvsp[2].v),NULL, yyget_Exp_tok(&yyyvsp[4].v),false,false}),
                   LOC(yyyvsp[0].l,yyyvsp[5].l))); 
break;
case 508:
#line 3296 "src/parse.y"
 yyval=Exp_tok(new_exp(new Malloc_e(MallocInfo{false, yyget_Exp_tok(&yyyvsp[2].v),NULL, yyget_Exp_tok(&yyyvsp[4].v),false,true}),
                   LOC(yyyvsp[0].l,yyyvsp[5].l))); 
break;
case 509:
#line 3299 "src/parse.y"
 let t = type_name_to_type( yyget_YY37(&yyyvsp[6].v),SLOC(yyyvsp[6].l));
     yyval=Exp_tok(new_exp(new Malloc_e(MallocInfo{true,NULL,new(t), yyget_Exp_tok(&yyyvsp[2].v),false,false}),
                   LOC(yyyvsp[0].l,yyyvsp[8].l))); 
break;
case 510:
#line 3304 "src/parse.y"
 let t = type_name_to_type( yyget_YY37(&yyyvsp[8].v),SLOC(yyyvsp[8].l));
     yyval=Exp_tok(new_exp(new Malloc_e(MallocInfo{true, yyget_Exp_tok(&yyyvsp[2].v),new(t), yyget_Exp_tok(&yyyvsp[4].v),false,false}),
                   LOC(yyyvsp[0].l,yyyvsp[10].l))); 
break;
case 511:
#line 3308 "src/parse.y"
 yyval=Exp_tok(primop_exp(Numelts, list( yyget_Exp_tok(&yyyvsp[2].v)), LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 512:
#line 3310 "src/parse.y"
 yyval=Exp_tok(new_exp(new Tagcheck_e( yyget_Exp_tok(&yyyvsp[2].v),new  yyget_String_tok(&yyyvsp[4].v)),LOC(yyyvsp[0].l,yyyvsp[5].l))); 
break;
case 513:
#line 3312 "src/parse.y"
 yyval=Exp_tok(new_exp(new Tagcheck_e(deref_exp( yyget_Exp_tok(&yyyvsp[2].v),SLOC(yyyvsp[2].l)),new  yyget_String_tok(&yyyvsp[4].v)),LOC(yyyvsp[0].l,yyyvsp[5].l))); 
break;
case 514:
#line 3314 "src/parse.y"
 let t = type_name_to_type( yyget_YY37(&yyyvsp[2].v),SLOC(yyyvsp[2].l));
     yyval=Exp_tok(valueof_exp(t, LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 515:
#line 3317 "src/parse.y"
 yyval=Exp_tok(new_exp( yyget_YY58(&yyyvsp[1].v), SLOC(yyyvsp[0].l))); 
break;
case 516:
#line 3318 "src/parse.y"
 yyval=Exp_tok(extension_exp( yyget_Exp_tok(&yyyvsp[1].v),LOC(yyyvsp[0].l,yyvs[yyvsp_offset+1].l))); 
break;
case 517:
#line 3323 "src/parse.y"
    let &$(outlist, inlist, clobbers) =  yyget_YY59(&yyyvsp[3].v);
 yyval = YY58(new Asm_e( yyget_YY31(&yyyvsp[0].v),  yyget_String_tok(&yyyvsp[2].v), outlist, inlist, clobbers)); 
break;
case 518:
#line 3328 "src/parse.y"
 yyval = YY31(false); 
break;
case 519:
#line 3329 "src/parse.y"
 yyval = YY31(true); 
break;
case 520:
#line 3333 "src/parse.y"
yyval = YY59(new $(NULL, NULL, NULL));
break;
case 521:
#line 3335 "src/parse.y"
  let &$(inlist, clobbers) =  yyget_YY60(&yyyvsp[1].v);
 yyval = YY59(new $(NULL, inlist, clobbers)); 
break;
case 522:
#line 3338 "src/parse.y"
  let &$(inlist, clobbers) =  yyget_YY60(&yyyvsp[2].v);
   yyval = YY59(new $(List::imp_rev( yyget_YY62(&yyyvsp[1].v)), inlist, clobbers));
break;
case 523:
#line 3343 "src/parse.y"
 yyval = YY62(new List( yyget_YY63(&yyyvsp[0].v), NULL)); 
break;
case 524:
#line 3344 "src/parse.y"
yyval = YY62(new List( yyget_YY63(&yyyvsp[2].v),  yyget_YY62(&yyyvsp[0].v))); 
break;
case 525:
#line 3348 "src/parse.y"
yyval = YY60(new $(NULL, NULL));
break;
case 526:
#line 3350 "src/parse.y"
  yyval = YY60(new $(NULL,  yyget_YY61(&yyyvsp[1].v))); 
break;
case 527:
#line 3352 "src/parse.y"
 yyval = YY60(new $(List::imp_rev( yyget_YY62(&yyyvsp[1].v)),  yyget_YY61(&yyyvsp[2].v))); 
break;
case 528:
#line 3356 "src/parse.y"
yyval = YY62(new List( yyget_YY63(&yyyvsp[0].v), NULL)); 
break;
case 529:
#line 3357 "src/parse.y"
yyval = YY62(new List( yyget_YY63(&yyyvsp[2].v),  yyget_YY62(&yyyvsp[0].v)));
break;
case 530:
#line 3362 "src/parse.y"
 let pf_exp =  yyget_Exp_tok(&yyyvsp[2].v);
 yyval = YY63(new $( yyget_String_tok(&yyyvsp[0].v),  yyget_Exp_tok(&yyyvsp[2].v))); 
break;
case 531:
#line 3368 "src/parse.y"
yyval = YY61(NULL);
break;
case 532:
#line 3369 "src/parse.y"
yyval = YY61(NULL);
break;
case 533:
#line 3370 "src/parse.y"
yyval = YY61(List::imp_rev( yyget_YY61(&yyyvsp[1].v)));
break;
case 534:
#line 3374 "src/parse.y"
  yyval = YY61(new List(new  yyget_String_tok(&yyyvsp[0].v), NULL)); 
break;
case 535:
#line 3375 "src/parse.y"
 yyval = YY61(new List(new  yyget_String_tok(&yyyvsp[2].v),  yyget_YY61(&yyyvsp[0].v))); 
break;
case 536:
#line 3379 "src/parse.y"
 yyval=YY6(Bitnot); 
break;
case 537:
#line 3380 "src/parse.y"
 yyval=YY6(Not); 
break;
case 538:
#line 3381 "src/parse.y"
 yyval=YY6(Minus); 
break;
case 539:
#line 3386 "src/parse.y"
 yyval= (yyyvsp[0].v); 
break;
case 540:
#line 3388 "src/parse.y"
 yyval=Exp_tok(subscript_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_Exp_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 541:
#line 3390 "src/parse.y"
 yyval=Exp_tok(unknowncall_exp( yyget_Exp_tok(&yyyvsp[0].v),NULL,LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 542:
#line 3392 "src/parse.y"
 yyval=Exp_tok(unknowncall_exp( yyget_Exp_tok(&yyyvsp[0].v), yyget_YY4(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 543:
#line 3394 "src/parse.y"
 yyval=Exp_tok(aggrmember_exp( yyget_Exp_tok(&yyyvsp[0].v),new  yyget_String_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 544:
#line 3396 "src/parse.y"
 yyval=Exp_tok(aggrarrow_exp( yyget_Exp_tok(&yyyvsp[0].v),new  yyget_String_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[2].l))); 
break;
case 545:
#line 3398 "src/parse.y"
 yyval=Exp_tok(increment_exp( yyget_Exp_tok(&yyyvsp[0].v),PostInc,LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 546:
#line 3400 "src/parse.y"
 yyval=Exp_tok(increment_exp( yyget_Exp_tok(&yyyvsp[0].v),PostDec,LOC(yyyvsp[0].l,yyyvsp[1].l))); 
break;
case 547:
#line 3402 "src/parse.y"
 yyval=Exp_tok(new_exp(new CompoundLit_e( yyget_YY37(&yyyvsp[1].v),NULL),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 548:
#line 3404 "src/parse.y"
 yyval=Exp_tok(new_exp(new CompoundLit_e( yyget_YY37(&yyyvsp[1].v),List::imp_rev( yyget_YY5(&yyyvsp[4].v))),LOC(yyyvsp[0].l,yyyvsp[5].l))); 
break;
case 549:
#line 3406 "src/parse.y"
 yyval=Exp_tok(new_exp(new CompoundLit_e( yyget_YY37(&yyyvsp[1].v),List::imp_rev( yyget_YY5(&yyyvsp[4].v))),LOC(yyyvsp[0].l,yyyvsp[6].l))); 
break;
case 550:
#line 3411 "src/parse.y"
 yyval=YY3(new List::List(new StructField(new  yyget_String_tok(&yyyvsp[0].v)),NULL)); 
break;
case 551:
#line 3414 "src/parse.y"
 yyval = YY3(new List(new TupleIndex(cnst2uint(SLOC(yyyvsp[0].l), yyget_Int_tok(&yyyvsp[0].v))),NULL)); 
break;
case 552:
#line 3416 "src/parse.y"
 yyval = YY3(new List(new StructField(new  yyget_String_tok(&yyyvsp[2].v)), yyget_YY3(&yyyvsp[0].v))); 
break;
case 553:
#line 3419 "src/parse.y"
 yyval = YY3(new List(new TupleIndex(cnst2uint(SLOC(yyyvsp[2].l), yyget_Int_tok(&yyyvsp[2].v))), yyget_YY3(&yyyvsp[0].v))); 
break;
case 554:
#line 3425 "src/parse.y"
 yyval=Exp_tok(unknownid_exp( yyget_QualId_tok(&yyyvsp[0].v),SLOC(yyyvsp[0].l))); 
break;
case 555:
#line 3427 "src/parse.y"
 yyval=Exp_tok(pragma_exp( yyget_String_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 556:
#line 3429 "src/parse.y"
 yyval= (yyyvsp[0].v); 
break;
case 557:
#line 3431 "src/parse.y"
 yyval=Exp_tok(string_exp( yyget_String_tok(&yyyvsp[0].v),SLOC(yyyvsp[0].l))); 
break;
case 558:
#line 3433 "src/parse.y"
 yyval=Exp_tok(wstring_exp( yyget_String_tok(&yyyvsp[0].v),SLOC(yyyvsp[0].l))); 
break;
case 559:
#line 3435 "src/parse.y"
 yyval= (yyyvsp[1].v); 
break;
case 560:
#line 3440 "src/parse.y"
 yyval=Exp_tok(noinstantiate_exp( yyget_Exp_tok(&yyyvsp[0].v), LOC(yyyvsp[0].l,yyyvsp[1].l)));
break;
case 561:
#line 3442 "src/parse.y"
 yyval=Exp_tok(instantiate_exp( yyget_Exp_tok(&yyyvsp[0].v), List::imp_rev( yyget_YY40(&yyyvsp[3].v)),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 562:
#line 3445 "src/parse.y"
 yyval=Exp_tok(tuple_exp( yyget_YY4(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[3].l))); 
break;
case 563:
#line 3448 "src/parse.y"
 yyval=Exp_tok(new_exp(new Aggregate_e( yyget_QualId_tok(&yyyvsp[0].v), yyget_YY40(&yyyvsp[2].v),List::imp_rev( yyget_YY5(&yyyvsp[3].v)),NULL),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 564:
#line 3451 "src/parse.y"
 yyval=Exp_tok(stmt_exp( yyget_Stmt_tok(&yyyvsp[2].v),LOC(yyyvsp[0].l,yyyvsp[4].l))); 
break;
case 565:
#line 3455 "src/parse.y"
 yyval=YY4(List::imp_rev( yyget_YY4(&yyyvsp[0].v))); 
break;
case 566:
#line 3461 "src/parse.y"
 yyval=YY4(new List( yyget_Exp_tok(&yyyvsp[0].v),NULL)); 
break;
case 567:
#line 3463 "src/parse.y"
 yyval=YY4(new List( yyget_Exp_tok(&yyyvsp[2].v), yyget_YY4(&yyyvsp[0].v))); 
break;
case 568:
#line 3469 "src/parse.y"
 yyval=Exp_tok(const_exp( yyget_Int_tok(&yyyvsp[0].v), SLOC(yyyvsp[0].l))); 
break;
case 569:
#line 3470 "src/parse.y"
 yyval=Exp_tok(char_exp( yyget_Char_tok(&yyyvsp[0].v), SLOC(yyyvsp[0].l))); 
break;
case 570:
#line 3471 "src/parse.y"
 yyval=Exp_tok(wchar_exp( yyget_String_tok(&yyyvsp[0].v), SLOC(yyyvsp[0].l))); 
break;
case 571:
#line 3472 "src/parse.y"

     let f =  yyget_String_tok(&yyyvsp[0].v);
     int l = strlen(f);
     int i = 1; // indicates double
     if (l>0) {
       char c = f[l-1];
       if (c=='f' || c=='F') i = 0;      // float
       else if (c=='l' || c=='L') i = 2; // long double
     }
     yyval=Exp_tok(float_exp(f, i, SLOC(yyyvsp[0].l)));
   
break;
case 572:
#line 3484 "src/parse.y"
 yyval=Exp_tok(null_exp(SLOC(yyyvsp[0].l)));
break;
case 573:
#line 3488 "src/parse.y"
 yyval=QualId_tok(new $(Rel_n(NULL), new  yyget_String_tok(&yyyvsp[0].v))); 
break;
case 574:
#line 3489 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 575:
#line 3492 "src/parse.y"
 yyval=QualId_tok(new $(Rel_n(NULL), new  yyget_String_tok(&yyyvsp[0].v))); 
break;
case 576:
#line 3493 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 577:
#line 3498 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 578:
#line 3499 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 579:
#line 3502 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 580:
#line 3503 "src/parse.y"
 yyval=(yyyvsp[0].v); 
break;
case 581:
#line 3507 "src/parse.y"

break;
case 582:
#line 3508 "src/parse.y"
 yylex_buf->lex_curr_pos -= 1; 
break;

    /* the action file gets copied in place of this dollarsign */
 default: break;
  }

#line 375 "cycbison.simple"
  yyvsp_offset -= yylen;
  yyssp_offset -= yylen;

#if YYDEBUG != 0
  if (yydebug)
    {
      int ssp1 = -1;
      fprintf(stderr,"state stack now");
      while (ssp1 != yyssp_offset)
	fprintf(stderr," %d",yyss[++ssp1]);
      fprintf(stderr,"\n");
    }
#endif

  yyvs[++yyvsp_offset].v = yyval;

#ifdef YYLSP_NEEDED
  if (yylen == 0) {
    _ @{2} p = (_ @{2})(yyvs + (yyvsp_offset - 1));
    p[1].l.first_line   = yylloc.first_line;
    p[1].l.first_column = yylloc.first_column;
    p[1].l.last_line    = p[0].l.last_line; 
    p[1].l.last_column  = p[0].l.last_column;  
  } else {
    yyvs[yyvsp_offset].l.last_line   =yyvs[yyvsp_offset+yylen-1].l.last_line; 
    yyvs[yyvsp_offset].l.last_column =yyvs[yyvsp_offset+yylen-1].l.last_column;
  }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + yyss[yyssp_offset];
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == yyss[yyssp_offset])
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (yyerrstatus == 0)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int sze = 0;
	  mstring_t msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (numelts(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      sze += strlen(yytname[x]) + 15, count++;
	  msg = rnew(yyregion) {for i < sze + 15 : '\000'};
	  strcpy(msg, "parse error");

	  if (count < 5)
	    {
	      count = 0;
	      for (x = (yyn < 0 ? -yyn : 0);
		   x < (numelts(yytname) / sizeof(char *)); x++)
		if (yycheck[x + yyn] == x)
		  { /* JGM: NB -- casts are needed here.  Sigh. */
		    strcat(msg, count == 0 ? 
                                 ((string_t)", expecting `") : 
			          (string_t)(" or `"));
		    strcat(msg, yytname[x]);
		    strcat(msg, "'");
		    count++;
		  }
	    }
	  yyerror(msg,yystate,yychar);
	}
      else 
#endif /* YYERROR_VERBOSE */
	yyerror("parse error",yystate,yychar);
    }
  goto yyerrlab1;

yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug) 
	fprintf(stderr,"Discarding token %d (%s).\n",
		yychar,yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif
  // fallthru to yyerrpop

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp_offset == 0) YYABORT;
  yyvsp_offset--;
  yystate = yyss[--yyssp_offset];

#if YYDEBUG != 0
  if (yydebug)
    {
      short ssp1_offset = -1;
      fprintf(stderr,"Error: state stack now");
      while (ssp1_offset != yyssp_offset)
	fprintf(stderr," %d",yyss[++ssp1_offset]);
      fprintf(stderr,"\n");
    }
#endif
  // falthru to yyerrhandle

yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG) goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR) goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG) goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0) goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr,"Shifting error token, ");
#endif

#ifdef YYLSP_NEEDED
  yyvs[++yyvsp_offset] = Yystacktype(yylval,yylloc);
#else
  yyvs[++yyvsp_offset] = Yystacktype(yylval);
#endif

  goto yynewstate;
} /* end of region yyregion */
}
#line 3509 "src/parse.y"


void yyprint(int i, union YYSTYPE<`yy> v) {
  switch (v) {
  case {.Int_tok = c}:    fprintf(stderr,"%s",Absynpp::cnst2string(c)); break;
  case {.Char_tok = c}:   fprintf(stderr,"%c",c); break;
  case {.String_tok = s}: fprintf(stderr,"\"%s\"",s); break;
  case {.QualId_tok = q}: fprintf(stderr,"%s",Absynpp::qvar2string(q)); break;
  case {.Exp_tok = e}:    fprintf(stderr,"%s",Absynpp::exp2string(e)); break;
  case {.Stmt_tok = s}:   fprintf(stderr,"%s",Absynpp::stmt2string(s)); break;
  default: fprintf(stderr,"?"); break;
  }
}

string_t token2string(int token) {
  if (token <= 0)
    return "end-of-file";
  if (token == IDENTIFIER)
    return Lex::token_string;
  else if (token == QUAL_IDENTIFIER)
    return Absynpp::qvar2string(Lex::token_qvar);
  int z = YYTRANSLATE(token);
  if ((unsigned)z < numelts(yytname))
    return yytname[z];
  else return NULL;
}

namespace Parse{

string_t<`H> filename  = NULL;

void die()
 {
	 fprintf(stderr,"\nBefore die! File name : %s Line : %d\n", filename, yylloc.first_line);
 }


list_t<decl_t> parse_file(FILE @`H f, string_t<`H> name ) {
  parse_result = NULL;
  region yyr;
  filename = name;
  //beforedie = die;
  yyparse(yyr,Lexing::from_file(f));
  return parse_result;
}
}
